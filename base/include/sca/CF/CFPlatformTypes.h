// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __CFPlatformTypes_hh__
#define __CFPlatformTypes_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_CFPlatformTypes
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_CFPlatformTypes
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFPlatformTypes
#endif



#ifndef __CFPrimitiveTypes_hh_EXTERNAL_GUARD__
#define __CFPrimitiveTypes_hh_EXTERNAL_GUARD__
#include <CFPrimitiveTypes.h>
#endif
#ifndef __CFULongLongSeq_hh_EXTERNAL_GUARD__
#define __CFULongLongSeq_hh_EXTERNAL_GUARD__
#include <CFULongLongSeq.h>
#endif
#ifndef __CFBooleanSeq_hh_EXTERNAL_GUARD__
#define __CFBooleanSeq_hh_EXTERNAL_GUARD__
#include <CFBooleanSeq.h>
#endif
#ifndef __CFULongSeq_hh_EXTERNAL_GUARD__
#define __CFULongSeq_hh_EXTERNAL_GUARD__
#include <CFULongSeq.h>
#endif
#ifndef __CFLongLongSeq_hh_EXTERNAL_GUARD__
#define __CFLongLongSeq_hh_EXTERNAL_GUARD__
#include <CFLongLongSeq.h>
#endif
#ifndef __CFCharSeq_hh_EXTERNAL_GUARD__
#define __CFCharSeq_hh_EXTERNAL_GUARD__
#include <CFCharSeq.h>
#endif
#ifndef __CFUShortSeq_hh_EXTERNAL_GUARD__
#define __CFUShortSeq_hh_EXTERNAL_GUARD__
#include <CFUShortSeq.h>
#endif
#ifndef __CFLongSeq_hh_EXTERNAL_GUARD__
#define __CFLongSeq_hh_EXTERNAL_GUARD__
#include <CFLongSeq.h>
#endif
#ifndef __CFDoubleSeq_hh_EXTERNAL_GUARD__
#define __CFDoubleSeq_hh_EXTERNAL_GUARD__
#include <CFDoubleSeq.h>
#endif
#ifndef __CFShortSeq_hh_EXTERNAL_GUARD__
#define __CFShortSeq_hh_EXTERNAL_GUARD__
#include <CFShortSeq.h>
#endif
#ifndef __CFFloatSeq_hh_EXTERNAL_GUARD__
#define __CFFloatSeq_hh_EXTERNAL_GUARD__
#include <CFFloatSeq.h>
#endif
#ifndef __CFOctetSeq_hh_EXTERNAL_GUARD__
#define __CFOctetSeq_hh_EXTERNAL_GUARD__
#include <CFOctetSeq.h>
#endif
#ifndef __CFStringSeq_hh_EXTERNAL_GUARD__
#define __CFStringSeq_hh_EXTERNAL_GUARD__
#include <CFStringSeq.h>
#endif
#ifndef __CFProperties_hh_EXTERNAL_GUARD__
#define __CFProperties_hh_EXTERNAL_GUARD__
#include <CFProperties.h>
#endif
#ifndef __CFCommonTypes_hh_EXTERNAL_GUARD__
#define __CFCommonTypes_hh_EXTERNAL_GUARD__
#include <CFCommonTypes.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE CF

_CORBA_MODULE_BEG

  struct DeviceAssignmentType {
    typedef _CORBA_ConstrType_Variable_Var<DeviceAssignmentType> _var_type;

    
    ::CORBA::String_member componentId;

    ::CORBA::String_member assignedDeviceId;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef DeviceAssignmentType::_var_type DeviceAssignmentType_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< DeviceAssignmentType,DeviceAssignmentType_var > DeviceAssignmentType_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_DeviceAssignmentType;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_DeviceAssignmentSequence;

  class DeviceAssignmentSequence_var;

  class DeviceAssignmentSequence : public _CORBA_Unbounded_Sequence< DeviceAssignmentType >  {
  public:
    typedef DeviceAssignmentSequence_var _var_type;
    inline DeviceAssignmentSequence() {}
    inline DeviceAssignmentSequence(const DeviceAssignmentSequence& _s)
      : _CORBA_Unbounded_Sequence< DeviceAssignmentType > (_s) {}

    inline DeviceAssignmentSequence(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< DeviceAssignmentType > (_max) {}
    inline DeviceAssignmentSequence(_CORBA_ULong _max, _CORBA_ULong _len, DeviceAssignmentType* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< DeviceAssignmentType > (_max, _len, _val, _rel) {}

  

    inline DeviceAssignmentSequence& operator = (const DeviceAssignmentSequence& _s) {
      _CORBA_Unbounded_Sequence< DeviceAssignmentType > ::operator=(_s);
      return *this;
    }
  };

  class DeviceAssignmentSequence_out;

  class DeviceAssignmentSequence_var {
  public:
    inline DeviceAssignmentSequence_var() : _pd_seq(0) {}
    inline DeviceAssignmentSequence_var(DeviceAssignmentSequence* _s) : _pd_seq(_s) {}
    inline DeviceAssignmentSequence_var(const DeviceAssignmentSequence_var& _s) {
      if (_s._pd_seq)  _pd_seq = new DeviceAssignmentSequence(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~DeviceAssignmentSequence_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline DeviceAssignmentSequence_var& operator = (DeviceAssignmentSequence* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline DeviceAssignmentSequence_var& operator = (const DeviceAssignmentSequence_var& _s) {
      if (_s._pd_seq) {
        if (!_pd_seq)  _pd_seq = new DeviceAssignmentSequence;
        *_pd_seq = *_s._pd_seq;
      } else if (_pd_seq) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline DeviceAssignmentType& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline DeviceAssignmentSequence* operator -> () { return _pd_seq; }
    inline const DeviceAssignmentSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator DeviceAssignmentSequence& () const { return *_pd_seq; }
#else
    inline operator const DeviceAssignmentSequence& () const { return *_pd_seq; }
    inline operator DeviceAssignmentSequence& () { return *_pd_seq; }
#endif
      
    inline const DeviceAssignmentSequence& in() const { return *_pd_seq; }
    inline DeviceAssignmentSequence&       inout()    { return *_pd_seq; }
    inline DeviceAssignmentSequence*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline DeviceAssignmentSequence* _retn() { DeviceAssignmentSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class DeviceAssignmentSequence_out;
    
  private:
    DeviceAssignmentSequence* _pd_seq;
  };

  class DeviceAssignmentSequence_out {
  public:
    inline DeviceAssignmentSequence_out(DeviceAssignmentSequence*& _s) : _data(_s) { _data = 0; }
    inline DeviceAssignmentSequence_out(DeviceAssignmentSequence_var& _s)
      : _data(_s._pd_seq) { _s = (DeviceAssignmentSequence*) 0; }
    inline DeviceAssignmentSequence_out(const DeviceAssignmentSequence_out& _s) : _data(_s._data) {}
    inline DeviceAssignmentSequence_out& operator = (const DeviceAssignmentSequence_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline DeviceAssignmentSequence_out& operator = (DeviceAssignmentSequence* _s) {
      _data = _s;
      return *this;
    }
    inline operator DeviceAssignmentSequence*&()  { return _data; }
    inline DeviceAssignmentSequence*& ptr()       { return _data; }
    inline DeviceAssignmentSequence* operator->() { return _data; }

    inline DeviceAssignmentType& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    DeviceAssignmentSequence*& _data;

  private:
    DeviceAssignmentSequence_out();
    DeviceAssignmentSequence_out& operator=(const DeviceAssignmentSequence_var&);
  };

  class InvalidProfile : public ::CORBA::UserException {
  public:
    
    

    inline InvalidProfile() {
      pd_insertToAnyFn    = insertToAnyFn;
      pd_insertToAnyFnNCP = insertToAnyFnNCP;
    }
    InvalidProfile(const InvalidProfile&);
    
    InvalidProfile& operator=(const InvalidProfile&);
    virtual ~InvalidProfile();
    virtual void _raise() const;
    static InvalidProfile* _downcast(::CORBA::Exception*);
    static const InvalidProfile* _downcast(const ::CORBA::Exception*);
    static inline InvalidProfile* _narrow(::CORBA::Exception* _e) {
      return _downcast(_e);
    }
    
    inline void operator>>=(cdrStream&) const { }
    inline void operator<<=(cdrStream&) { }

    static _core_attr insertExceptionToAny    insertToAnyFn;
    static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

    virtual ::CORBA::Exception* _NP_duplicate() const;

    static _core_attr const char* _PD_repoId;
    static _core_attr const char* _PD_typeId;

  private:
    virtual const char* _NP_typeId() const;
    virtual const char* _NP_repoId(int*) const;
    virtual void _NP_marshal(cdrStream&) const;
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_InvalidProfile;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Components;

  class Components_var;

  class Components : public _CORBA_Unbounded_Sequence< ComponentType >  {
  public:
    typedef Components_var _var_type;
    inline Components() {}
    inline Components(const Components& _s)
      : _CORBA_Unbounded_Sequence< ComponentType > (_s) {}

    inline Components(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< ComponentType > (_max) {}
    inline Components(_CORBA_ULong _max, _CORBA_ULong _len, ComponentType* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< ComponentType > (_max, _len, _val, _rel) {}

  

    inline Components& operator = (const Components& _s) {
      _CORBA_Unbounded_Sequence< ComponentType > ::operator=(_s);
      return *this;
    }
  };

  class Components_out;

  class Components_var {
  public:
    inline Components_var() : _pd_seq(0) {}
    inline Components_var(Components* _s) : _pd_seq(_s) {}
    inline Components_var(const Components_var& _s) {
      if (_s._pd_seq)  _pd_seq = new Components(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~Components_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline Components_var& operator = (Components* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline Components_var& operator = (const Components_var& _s) {
      if (_s._pd_seq) {
        if (!_pd_seq)  _pd_seq = new Components;
        *_pd_seq = *_s._pd_seq;
      } else if (_pd_seq) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ComponentType& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline Components* operator -> () { return _pd_seq; }
    inline const Components* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator Components& () const { return *_pd_seq; }
#else
    inline operator const Components& () const { return *_pd_seq; }
    inline operator Components& () { return *_pd_seq; }
#endif
      
    inline const Components& in() const { return *_pd_seq; }
    inline Components&       inout()    { return *_pd_seq; }
    inline Components*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline Components* _retn() { Components* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class Components_out;
    
  private:
    Components* _pd_seq;
  };

  class Components_out {
  public:
    inline Components_out(Components*& _s) : _data(_s) { _data = 0; }
    inline Components_out(Components_var& _s)
      : _data(_s._pd_seq) { _s = (Components*) 0; }
    inline Components_out(const Components_out& _s) : _data(_s._data) {}
    inline Components_out& operator = (const Components_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline Components_out& operator = (Components* _s) {
      _data = _s;
      return *this;
    }
    inline operator Components*&()  { return _data; }
    inline Components*& ptr()       { return _data; }
    inline Components* operator->() { return _data; }

    inline ComponentType& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    Components*& _data;

  private:
    Components_out();
    Components_out& operator=(const Components_var&);
  };

  class InvalidState : public ::CORBA::UserException {
  public:
    
    ::CORBA::String_member msg;

  

    inline InvalidState() {
      pd_insertToAnyFn    = insertToAnyFn;
      pd_insertToAnyFnNCP = insertToAnyFnNCP;
    }
    InvalidState(const InvalidState&);
    InvalidState(const char* i_msg);
    InvalidState& operator=(const InvalidState&);
    virtual ~InvalidState();
    virtual void _raise() const;
    static InvalidState* _downcast(::CORBA::Exception*);
    static const InvalidState* _downcast(const ::CORBA::Exception*);
    static inline InvalidState* _narrow(::CORBA::Exception* _e) {
      return _downcast(_e);
    }
    
    void operator>>=(cdrStream&) const ;
    void operator<<=(cdrStream&) ;

    static _core_attr insertExceptionToAny    insertToAnyFn;
    static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

    virtual ::CORBA::Exception* _NP_duplicate() const;

    static _core_attr const char* _PD_repoId;
    static _core_attr const char* _PD_typeId;

  private:
    virtual const char* _NP_typeId() const;
    virtual const char* _NP_repoId(int*) const;
    virtual void _NP_marshal(cdrStream&) const;
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_InvalidState;

_CORBA_MODULE_END



_CORBA_MODULE POA_CF
_CORBA_MODULE_BEG

_CORBA_MODULE_END



_CORBA_MODULE OBV_CF
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const CF::DeviceAssignmentType& _s);
extern void operator<<=(::CORBA::Any& _a, CF::DeviceAssignmentType* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::DeviceAssignmentType*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::DeviceAssignmentType*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::DeviceAssignmentSequence& _s);
void operator<<=(::CORBA::Any& _a, CF::DeviceAssignmentSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::DeviceAssignmentSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::DeviceAssignmentSequence*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::InvalidProfile& _s);
void operator<<=(::CORBA::Any& _a, const CF::InvalidProfile* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::InvalidProfile*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::Components& _s);
void operator<<=(::CORBA::Any& _a, CF::Components* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::Components*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::Components*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::InvalidState& _s);
void operator<<=(::CORBA::Any& _a, const CF::InvalidState* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::InvalidState*& _sp);





#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_CFPlatformTypes
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_CFPlatformTypes
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_CFPlatformTypes
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_CFPlatformTypes
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFPlatformTypes
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFPlatformTypes
#endif

#endif  // __CFPlatformTypes_hh__

