// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __CFFileSystem_hh__
#define __CFFileSystem_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_CFFileSystem
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_CFFileSystem
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFFileSystem
#endif



#ifndef __CFProperties_hh_EXTERNAL_GUARD__
#define __CFProperties_hh_EXTERNAL_GUARD__
#include <CFProperties.h>
#endif
#ifndef __CFPrimitiveTypes_hh_EXTERNAL_GUARD__
#define __CFPrimitiveTypes_hh_EXTERNAL_GUARD__
#include <CFPrimitiveTypes.h>
#endif
#ifndef __CFULongLongSeq_hh_EXTERNAL_GUARD__
#define __CFULongLongSeq_hh_EXTERNAL_GUARD__
#include <CFULongLongSeq.h>
#endif
#ifndef __CFBooleanSeq_hh_EXTERNAL_GUARD__
#define __CFBooleanSeq_hh_EXTERNAL_GUARD__
#include <CFBooleanSeq.h>
#endif
#ifndef __CFULongSeq_hh_EXTERNAL_GUARD__
#define __CFULongSeq_hh_EXTERNAL_GUARD__
#include <CFULongSeq.h>
#endif
#ifndef __CFLongLongSeq_hh_EXTERNAL_GUARD__
#define __CFLongLongSeq_hh_EXTERNAL_GUARD__
#include <CFLongLongSeq.h>
#endif
#ifndef __CFCharSeq_hh_EXTERNAL_GUARD__
#define __CFCharSeq_hh_EXTERNAL_GUARD__
#include <CFCharSeq.h>
#endif
#ifndef __CFUShortSeq_hh_EXTERNAL_GUARD__
#define __CFUShortSeq_hh_EXTERNAL_GUARD__
#include <CFUShortSeq.h>
#endif
#ifndef __CFLongSeq_hh_EXTERNAL_GUARD__
#define __CFLongSeq_hh_EXTERNAL_GUARD__
#include <CFLongSeq.h>
#endif
#ifndef __CFDoubleSeq_hh_EXTERNAL_GUARD__
#define __CFDoubleSeq_hh_EXTERNAL_GUARD__
#include <CFDoubleSeq.h>
#endif
#ifndef __CFShortSeq_hh_EXTERNAL_GUARD__
#define __CFShortSeq_hh_EXTERNAL_GUARD__
#include <CFShortSeq.h>
#endif
#ifndef __CFFloatSeq_hh_EXTERNAL_GUARD__
#define __CFFloatSeq_hh_EXTERNAL_GUARD__
#include <CFFloatSeq.h>
#endif
#ifndef __CFOctetSeq_hh_EXTERNAL_GUARD__
#define __CFOctetSeq_hh_EXTERNAL_GUARD__
#include <CFOctetSeq.h>
#endif
#ifndef __CFStringSeq_hh_EXTERNAL_GUARD__
#define __CFStringSeq_hh_EXTERNAL_GUARD__
#include <CFStringSeq.h>
#endif
#ifndef __CFCommonTypes_hh_EXTERNAL_GUARD__
#define __CFCommonTypes_hh_EXTERNAL_GUARD__
#include <CFCommonTypes.h>
#endif
#ifndef __CFFile_hh_EXTERNAL_GUARD__
#define __CFFile_hh_EXTERNAL_GUARD__
#include <CFFile.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE CF

_CORBA_MODULE_BEG

#ifndef __CF_mFileSystem__
#define __CF_mFileSystem__
  class FileSystem;
  class _objref_FileSystem;
  class _impl_FileSystem;
  
  typedef _objref_FileSystem* FileSystem_ptr;
  typedef FileSystem_ptr FileSystemRef;

  class FileSystem_Helper {
  public:
    typedef FileSystem_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_FileSystem, FileSystem_Helper> FileSystem_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_FileSystem,FileSystem_Helper > FileSystem_out;

#endif

  // interface FileSystem
  class FileSystem {
  public:
    // Declarations for this interface type.
    typedef FileSystem_ptr _ptr_type;
    typedef FileSystem_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    class UnknownFileSystemProperties : public ::CORBA::UserException {
    public:
      
      Properties invalidProperties;

    

      inline UnknownFileSystemProperties() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      UnknownFileSystemProperties(const UnknownFileSystemProperties&);
      UnknownFileSystemProperties(const Properties i_invalidProperties);
      UnknownFileSystemProperties& operator=(const UnknownFileSystemProperties&);
      virtual ~UnknownFileSystemProperties();
      virtual void _raise() const;
      static UnknownFileSystemProperties* _downcast(::CORBA::Exception*);
      static const UnknownFileSystemProperties* _downcast(const ::CORBA::Exception*);
      static inline UnknownFileSystemProperties* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_UnknownFileSystemProperties;

    static _core_attr const char * SIZE;

    static _core_attr const char * AVAILABLE_SPACE;

    enum FileType { PLAIN, DIRECTORY, FILE_SYSTEM /*, __max_FileType=0xffffffff */ };
    typedef FileType& FileType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_FileType;

    struct FileInformationType {
      typedef _CORBA_ConstrType_Variable_Var<FileInformationType> _var_type;

      
      ::CORBA::String_member name;

      FileType kind;

      ::CORBA::ULongLong size;

      Properties fileProperties;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef FileInformationType::_var_type FileInformationType_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< FileInformationType,FileInformationType_var > FileInformationType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_FileInformationType;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_FileInformationSequence;

    class FileInformationSequence_var;

    class FileInformationSequence : public _CORBA_Unbounded_Sequence< FileInformationType >  {
    public:
      typedef FileInformationSequence_var _var_type;
      inline FileInformationSequence() {}
      inline FileInformationSequence(const FileInformationSequence& _s)
        : _CORBA_Unbounded_Sequence< FileInformationType > (_s) {}

      inline FileInformationSequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< FileInformationType > (_max) {}
      inline FileInformationSequence(_CORBA_ULong _max, _CORBA_ULong _len, FileInformationType* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< FileInformationType > (_max, _len, _val, _rel) {}

    

      inline FileInformationSequence& operator = (const FileInformationSequence& _s) {
        _CORBA_Unbounded_Sequence< FileInformationType > ::operator=(_s);
        return *this;
      }
    };

    class FileInformationSequence_out;

    class FileInformationSequence_var {
    public:
      inline FileInformationSequence_var() : _pd_seq(0) {}
      inline FileInformationSequence_var(FileInformationSequence* _s) : _pd_seq(_s) {}
      inline FileInformationSequence_var(const FileInformationSequence_var& _s) {
        if (_s._pd_seq)  _pd_seq = new FileInformationSequence(*_s._pd_seq);
        else             _pd_seq = 0;
      }
      inline ~FileInformationSequence_var() { if (_pd_seq)  delete _pd_seq; }
        
      inline FileInformationSequence_var& operator = (FileInformationSequence* _s) {
        if (_pd_seq)  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline FileInformationSequence_var& operator = (const FileInformationSequence_var& _s) {
        if (_s._pd_seq) {
          if (!_pd_seq)  _pd_seq = new FileInformationSequence;
          *_pd_seq = *_s._pd_seq;
        } else if (_pd_seq) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline FileInformationType& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline FileInformationSequence* operator -> () { return _pd_seq; }
      inline const FileInformationSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator FileInformationSequence& () const { return *_pd_seq; }
#else
      inline operator const FileInformationSequence& () const { return *_pd_seq; }
      inline operator FileInformationSequence& () { return *_pd_seq; }
#endif
        
      inline const FileInformationSequence& in() const { return *_pd_seq; }
      inline FileInformationSequence&       inout()    { return *_pd_seq; }
      inline FileInformationSequence*&      out() {
        if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline FileInformationSequence* _retn() { FileInformationSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class FileInformationSequence_out;
      
    private:
      FileInformationSequence* _pd_seq;
    };

    class FileInformationSequence_out {
    public:
      inline FileInformationSequence_out(FileInformationSequence*& _s) : _data(_s) { _data = 0; }
      inline FileInformationSequence_out(FileInformationSequence_var& _s)
        : _data(_s._pd_seq) { _s = (FileInformationSequence*) 0; }
      inline FileInformationSequence_out(const FileInformationSequence_out& _s) : _data(_s._data) {}
      inline FileInformationSequence_out& operator = (const FileInformationSequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline FileInformationSequence_out& operator = (FileInformationSequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator FileInformationSequence*&()  { return _data; }
      inline FileInformationSequence*& ptr()       { return _data; }
      inline FileInformationSequence* operator->() { return _data; }

      inline FileInformationType& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      FileInformationSequence*& _data;

    private:
      FileInformationSequence_out();
      FileInformationSequence_out& operator=(const FileInformationSequence_var&);
    };

    static _core_attr const char * CREATED_TIME_ID;

    static _core_attr const char * MODIFIED_TIME_ID;

    static _core_attr const char * LAST_ACCESS_TIME_ID;

  
  };

  class _objref_FileSystem :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    void remove(const char* fileName);
    void copy(const char* sourceFileName, const char* destinationFileName);
    ::CORBA::Boolean exists(const char* fileName);
    FileSystem::FileInformationSequence* list(const char* pattern);
    File_ptr create(const char* fileName);
    File_ptr open(const char* fileName, ::CORBA::Boolean read_Only);
    void mkdir(const char* directoryName);
    void rmdir(const char* directoryName);
    void query(::CF::Properties& fileSystemProperties);

    // Constructors
    inline _objref_FileSystem()  { _PR_setobj(0); }  // nil
    _objref_FileSystem(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_FileSystem();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_FileSystem(const _objref_FileSystem&);
    _objref_FileSystem& operator = (const _objref_FileSystem&);
    // not implemented

    friend class FileSystem;
  };

  class _pof_FileSystem : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_FileSystem() : _OMNI_NS(proxyObjectFactory)(FileSystem::_PD_repoId) {}
    virtual ~_pof_FileSystem();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_FileSystem :
    public virtual omniServant
  {
  public:
    virtual ~_impl_FileSystem();

    virtual void remove(const char* fileName) = 0;
    virtual void copy(const char* sourceFileName, const char* destinationFileName) = 0;
    virtual ::CORBA::Boolean exists(const char* fileName) = 0;
    virtual FileSystem::FileInformationSequence* list(const char* pattern) = 0;
    virtual File_ptr create(const char* fileName) = 0;
    virtual File_ptr open(const char* fileName, ::CORBA::Boolean read_Only) = 0;
    virtual void mkdir(const char* directoryName) = 0;
    virtual void rmdir(const char* directoryName) = 0;
    virtual void query(::CF::Properties& fileSystemProperties) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_FileSystem;

_CORBA_MODULE_END



_CORBA_MODULE POA_CF
_CORBA_MODULE_BEG

  class FileSystem :
    public virtual CF::_impl_FileSystem,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~FileSystem();

    inline ::CF::FileSystem_ptr _this() {
      return (::CF::FileSystem_ptr) _do_this(::CF::FileSystem::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_CF
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const CF::FileSystem::UnknownFileSystemProperties& _s);
void operator<<=(::CORBA::Any& _a, const CF::FileSystem::UnknownFileSystemProperties* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::FileSystem::UnknownFileSystemProperties*& _sp);

inline void operator >>=(CF::FileSystem::FileType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (CF::FileSystem::FileType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= CF::FileSystem::FILE_SYSTEM) {
    _e = (CF::FileSystem::FileType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, CF::FileSystem::FileType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::FileSystem::FileType& _s);

extern void operator<<=(::CORBA::Any& _a, const CF::FileSystem::FileInformationType& _s);
extern void operator<<=(::CORBA::Any& _a, CF::FileSystem::FileInformationType* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::FileSystem::FileInformationType*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::FileSystem::FileInformationType*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::FileSystem::FileInformationSequence& _s);
void operator<<=(::CORBA::Any& _a, CF::FileSystem::FileInformationSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::FileSystem::FileInformationSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::FileSystem::FileInformationSequence*& _sp);

void operator<<=(::CORBA::Any& _a, CF::FileSystem_ptr _s);
void operator<<=(::CORBA::Any& _a, CF::FileSystem_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::FileSystem_ptr& _s);



inline void
CF::FileSystem::_marshalObjRef(::CF::FileSystem_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_CFFileSystem
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_CFFileSystem
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_CFFileSystem
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_CFFileSystem
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFFileSystem
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFFileSystem
#endif

#endif  // __CFFileSystem_hh__

