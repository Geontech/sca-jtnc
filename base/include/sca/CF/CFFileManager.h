// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __CFFileManager_hh__
#define __CFFileManager_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_CFFileManager
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_CFFileManager
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFFileManager
#endif



#ifndef __CFProperties_hh_EXTERNAL_GUARD__
#define __CFProperties_hh_EXTERNAL_GUARD__
#include <CFProperties.h>
#endif
#ifndef __CFPrimitiveTypes_hh_EXTERNAL_GUARD__
#define __CFPrimitiveTypes_hh_EXTERNAL_GUARD__
#include <CFPrimitiveTypes.h>
#endif
#ifndef __CFULongLongSeq_hh_EXTERNAL_GUARD__
#define __CFULongLongSeq_hh_EXTERNAL_GUARD__
#include <CFULongLongSeq.h>
#endif
#ifndef __CFBooleanSeq_hh_EXTERNAL_GUARD__
#define __CFBooleanSeq_hh_EXTERNAL_GUARD__
#include <CFBooleanSeq.h>
#endif
#ifndef __CFULongSeq_hh_EXTERNAL_GUARD__
#define __CFULongSeq_hh_EXTERNAL_GUARD__
#include <CFULongSeq.h>
#endif
#ifndef __CFLongLongSeq_hh_EXTERNAL_GUARD__
#define __CFLongLongSeq_hh_EXTERNAL_GUARD__
#include <CFLongLongSeq.h>
#endif
#ifndef __CFCharSeq_hh_EXTERNAL_GUARD__
#define __CFCharSeq_hh_EXTERNAL_GUARD__
#include <CFCharSeq.h>
#endif
#ifndef __CFUShortSeq_hh_EXTERNAL_GUARD__
#define __CFUShortSeq_hh_EXTERNAL_GUARD__
#include <CFUShortSeq.h>
#endif
#ifndef __CFLongSeq_hh_EXTERNAL_GUARD__
#define __CFLongSeq_hh_EXTERNAL_GUARD__
#include <CFLongSeq.h>
#endif
#ifndef __CFDoubleSeq_hh_EXTERNAL_GUARD__
#define __CFDoubleSeq_hh_EXTERNAL_GUARD__
#include <CFDoubleSeq.h>
#endif
#ifndef __CFShortSeq_hh_EXTERNAL_GUARD__
#define __CFShortSeq_hh_EXTERNAL_GUARD__
#include <CFShortSeq.h>
#endif
#ifndef __CFFloatSeq_hh_EXTERNAL_GUARD__
#define __CFFloatSeq_hh_EXTERNAL_GUARD__
#include <CFFloatSeq.h>
#endif
#ifndef __CFOctetSeq_hh_EXTERNAL_GUARD__
#define __CFOctetSeq_hh_EXTERNAL_GUARD__
#include <CFOctetSeq.h>
#endif
#ifndef __CFStringSeq_hh_EXTERNAL_GUARD__
#define __CFStringSeq_hh_EXTERNAL_GUARD__
#include <CFStringSeq.h>
#endif
#ifndef __CFCommonTypes_hh_EXTERNAL_GUARD__
#define __CFCommonTypes_hh_EXTERNAL_GUARD__
#include <CFCommonTypes.h>
#endif
#ifndef __CFFile_hh_EXTERNAL_GUARD__
#define __CFFile_hh_EXTERNAL_GUARD__
#include <CFFile.h>
#endif
#ifndef __CFFileSystem_hh_EXTERNAL_GUARD__
#define __CFFileSystem_hh_EXTERNAL_GUARD__
#include <CFFileSystem.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE CF

_CORBA_MODULE_BEG

#ifndef __CF_mFileManager__
#define __CF_mFileManager__
  class FileManager;
  class _objref_FileManager;
  class _impl_FileManager;
  
  typedef _objref_FileManager* FileManager_ptr;
  typedef FileManager_ptr FileManagerRef;

  class FileManager_Helper {
  public:
    typedef FileManager_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_FileManager, FileManager_Helper> FileManager_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_FileManager,FileManager_Helper > FileManager_out;

#endif

  // interface FileManager
  class FileManager {
  public:
    // Declarations for this interface type.
    typedef FileManager_ptr _ptr_type;
    typedef FileManager_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    struct MountType {
      typedef _CORBA_ConstrType_Variable_Var<MountType> _var_type;

      
      ::CORBA::String_member mountPoint;

      _CORBA_ObjRef_Member< _objref_FileSystem, FileSystem_Helper>  fs;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef MountType::_var_type MountType_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< MountType,MountType_var > MountType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_MountType;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_MountSequence;

    class MountSequence_var;

    class MountSequence : public _CORBA_Unbounded_Sequence< MountType >  {
    public:
      typedef MountSequence_var _var_type;
      inline MountSequence() {}
      inline MountSequence(const MountSequence& _s)
        : _CORBA_Unbounded_Sequence< MountType > (_s) {}

      inline MountSequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< MountType > (_max) {}
      inline MountSequence(_CORBA_ULong _max, _CORBA_ULong _len, MountType* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< MountType > (_max, _len, _val, _rel) {}

    

      inline MountSequence& operator = (const MountSequence& _s) {
        _CORBA_Unbounded_Sequence< MountType > ::operator=(_s);
        return *this;
      }
    };

    class MountSequence_out;

    class MountSequence_var {
    public:
      inline MountSequence_var() : _pd_seq(0) {}
      inline MountSequence_var(MountSequence* _s) : _pd_seq(_s) {}
      inline MountSequence_var(const MountSequence_var& _s) {
        if (_s._pd_seq)  _pd_seq = new MountSequence(*_s._pd_seq);
        else             _pd_seq = 0;
      }
      inline ~MountSequence_var() { if (_pd_seq)  delete _pd_seq; }
        
      inline MountSequence_var& operator = (MountSequence* _s) {
        if (_pd_seq)  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline MountSequence_var& operator = (const MountSequence_var& _s) {
        if (_s._pd_seq) {
          if (!_pd_seq)  _pd_seq = new MountSequence;
          *_pd_seq = *_s._pd_seq;
        } else if (_pd_seq) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline MountType& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline MountSequence* operator -> () { return _pd_seq; }
      inline const MountSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator MountSequence& () const { return *_pd_seq; }
#else
      inline operator const MountSequence& () const { return *_pd_seq; }
      inline operator MountSequence& () { return *_pd_seq; }
#endif
        
      inline const MountSequence& in() const { return *_pd_seq; }
      inline MountSequence&       inout()    { return *_pd_seq; }
      inline MountSequence*&      out() {
        if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline MountSequence* _retn() { MountSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class MountSequence_out;
      
    private:
      MountSequence* _pd_seq;
    };

    class MountSequence_out {
    public:
      inline MountSequence_out(MountSequence*& _s) : _data(_s) { _data = 0; }
      inline MountSequence_out(MountSequence_var& _s)
        : _data(_s._pd_seq) { _s = (MountSequence*) 0; }
      inline MountSequence_out(const MountSequence_out& _s) : _data(_s._data) {}
      inline MountSequence_out& operator = (const MountSequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline MountSequence_out& operator = (MountSequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator MountSequence*&()  { return _data; }
      inline MountSequence*& ptr()       { return _data; }
      inline MountSequence* operator->() { return _data; }

      inline MountType& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      MountSequence*& _data;

    private:
      MountSequence_out();
      MountSequence_out& operator=(const MountSequence_var&);
    };

    class NonExistentMount : public ::CORBA::UserException {
    public:
      
      

      inline NonExistentMount() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      NonExistentMount(const NonExistentMount&);
      
      NonExistentMount& operator=(const NonExistentMount&);
      virtual ~NonExistentMount();
      virtual void _raise() const;
      static NonExistentMount* _downcast(::CORBA::Exception*);
      static const NonExistentMount* _downcast(const ::CORBA::Exception*);
      static inline NonExistentMount* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      inline void operator>>=(cdrStream&) const { }
      inline void operator<<=(cdrStream&) { }

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_NonExistentMount;

    class InvalidFileSystem : public ::CORBA::UserException {
    public:
      
      

      inline InvalidFileSystem() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      InvalidFileSystem(const InvalidFileSystem&);
      
      InvalidFileSystem& operator=(const InvalidFileSystem&);
      virtual ~InvalidFileSystem();
      virtual void _raise() const;
      static InvalidFileSystem* _downcast(::CORBA::Exception*);
      static const InvalidFileSystem* _downcast(const ::CORBA::Exception*);
      static inline InvalidFileSystem* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      inline void operator>>=(cdrStream&) const { }
      inline void operator<<=(cdrStream&) { }

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_InvalidFileSystem;

    class MountPointAlreadyExists : public ::CORBA::UserException {
    public:
      
      

      inline MountPointAlreadyExists() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      MountPointAlreadyExists(const MountPointAlreadyExists&);
      
      MountPointAlreadyExists& operator=(const MountPointAlreadyExists&);
      virtual ~MountPointAlreadyExists();
      virtual void _raise() const;
      static MountPointAlreadyExists* _downcast(::CORBA::Exception*);
      static const MountPointAlreadyExists* _downcast(const ::CORBA::Exception*);
      static inline MountPointAlreadyExists* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      inline void operator>>=(cdrStream&) const { }
      inline void operator<<=(cdrStream&) { }

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_MountPointAlreadyExists;

  
  };

  class _objref_FileManager :
    public virtual _objref_FileSystem
  {
  public:
    // IDL operations
    void mount(const char* mountPoint, ::CF::FileSystem_ptr file_System);
    void unmount(const char* mountPoint);
    FileManager::MountSequence* getMounts();

    // Constructors
    inline _objref_FileManager()  { _PR_setobj(0); }  // nil
    _objref_FileManager(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_FileManager();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_FileManager(const _objref_FileManager&);
    _objref_FileManager& operator = (const _objref_FileManager&);
    // not implemented

    friend class FileManager;
  };

  class _pof_FileManager : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_FileManager() : _OMNI_NS(proxyObjectFactory)(FileManager::_PD_repoId) {}
    virtual ~_pof_FileManager();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_FileManager :
    public virtual _impl_FileSystem
  {
  public:
    virtual ~_impl_FileManager();

    virtual void mount(const char* mountPoint, ::CF::FileSystem_ptr file_System) = 0;
    virtual void unmount(const char* mountPoint) = 0;
    virtual FileManager::MountSequence* getMounts() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_FileManager;

_CORBA_MODULE_END



_CORBA_MODULE POA_CF
_CORBA_MODULE_BEG

  class FileManager :
    public virtual CF::_impl_FileManager,
    public virtual FileSystem
  {
  public:
    virtual ~FileManager();

    inline ::CF::FileManager_ptr _this() {
      return (::CF::FileManager_ptr) _do_this(::CF::FileManager::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_CF
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const CF::FileManager::MountType& _s);
extern void operator<<=(::CORBA::Any& _a, CF::FileManager::MountType* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::FileManager::MountType*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::FileManager::MountType*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::FileManager::MountSequence& _s);
void operator<<=(::CORBA::Any& _a, CF::FileManager::MountSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::FileManager::MountSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::FileManager::MountSequence*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::FileManager::NonExistentMount& _s);
void operator<<=(::CORBA::Any& _a, const CF::FileManager::NonExistentMount* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::FileManager::NonExistentMount*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::FileManager::InvalidFileSystem& _s);
void operator<<=(::CORBA::Any& _a, const CF::FileManager::InvalidFileSystem* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::FileManager::InvalidFileSystem*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::FileManager::MountPointAlreadyExists& _s);
void operator<<=(::CORBA::Any& _a, const CF::FileManager::MountPointAlreadyExists* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::FileManager::MountPointAlreadyExists*& _sp);

void operator<<=(::CORBA::Any& _a, CF::FileManager_ptr _s);
void operator<<=(::CORBA::Any& _a, CF::FileManager_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::FileManager_ptr& _s);



inline void
CF::FileManager::_marshalObjRef(::CF::FileManager_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_CFFileManager
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_CFFileManager
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_CFFileManager
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_CFFileManager
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFFileManager
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFFileManager
#endif

#endif  // __CFFileManager_hh__

