// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __CFLoadableInterface_hh__
#define __CFLoadableInterface_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_CFLoadableInterface
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_CFLoadableInterface
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFLoadableInterface
#endif



#ifndef __CFProperties_hh_EXTERNAL_GUARD__
#define __CFProperties_hh_EXTERNAL_GUARD__
#include <CFProperties.h>
#endif
#ifndef __CFPrimitiveTypes_hh_EXTERNAL_GUARD__
#define __CFPrimitiveTypes_hh_EXTERNAL_GUARD__
#include <CFPrimitiveTypes.h>
#endif
#ifndef __CFULongLongSeq_hh_EXTERNAL_GUARD__
#define __CFULongLongSeq_hh_EXTERNAL_GUARD__
#include <CFULongLongSeq.h>
#endif
#ifndef __CFBooleanSeq_hh_EXTERNAL_GUARD__
#define __CFBooleanSeq_hh_EXTERNAL_GUARD__
#include <CFBooleanSeq.h>
#endif
#ifndef __CFULongSeq_hh_EXTERNAL_GUARD__
#define __CFULongSeq_hh_EXTERNAL_GUARD__
#include <CFULongSeq.h>
#endif
#ifndef __CFLongLongSeq_hh_EXTERNAL_GUARD__
#define __CFLongLongSeq_hh_EXTERNAL_GUARD__
#include <CFLongLongSeq.h>
#endif
#ifndef __CFCharSeq_hh_EXTERNAL_GUARD__
#define __CFCharSeq_hh_EXTERNAL_GUARD__
#include <CFCharSeq.h>
#endif
#ifndef __CFUShortSeq_hh_EXTERNAL_GUARD__
#define __CFUShortSeq_hh_EXTERNAL_GUARD__
#include <CFUShortSeq.h>
#endif
#ifndef __CFLongSeq_hh_EXTERNAL_GUARD__
#define __CFLongSeq_hh_EXTERNAL_GUARD__
#include <CFLongSeq.h>
#endif
#ifndef __CFDoubleSeq_hh_EXTERNAL_GUARD__
#define __CFDoubleSeq_hh_EXTERNAL_GUARD__
#include <CFDoubleSeq.h>
#endif
#ifndef __CFShortSeq_hh_EXTERNAL_GUARD__
#define __CFShortSeq_hh_EXTERNAL_GUARD__
#include <CFShortSeq.h>
#endif
#ifndef __CFFloatSeq_hh_EXTERNAL_GUARD__
#define __CFFloatSeq_hh_EXTERNAL_GUARD__
#include <CFFloatSeq.h>
#endif
#ifndef __CFOctetSeq_hh_EXTERNAL_GUARD__
#define __CFOctetSeq_hh_EXTERNAL_GUARD__
#include <CFOctetSeq.h>
#endif
#ifndef __CFStringSeq_hh_EXTERNAL_GUARD__
#define __CFStringSeq_hh_EXTERNAL_GUARD__
#include <CFStringSeq.h>
#endif
#ifndef __CFCommonTypes_hh_EXTERNAL_GUARD__
#define __CFCommonTypes_hh_EXTERNAL_GUARD__
#include <CFCommonTypes.h>
#endif
#ifndef __CFFile_hh_EXTERNAL_GUARD__
#define __CFFile_hh_EXTERNAL_GUARD__
#include <CFFile.h>
#endif
#ifndef __CFFileSystem_hh_EXTERNAL_GUARD__
#define __CFFileSystem_hh_EXTERNAL_GUARD__
#include <CFFileSystem.h>
#endif
#ifndef __CFPlatformTypes_hh_EXTERNAL_GUARD__
#define __CFPlatformTypes_hh_EXTERNAL_GUARD__
#include <CFPlatformTypes.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE CF

_CORBA_MODULE_BEG

#ifndef __CF_mLoadableInterface__
#define __CF_mLoadableInterface__
  class LoadableInterface;
  class _objref_LoadableInterface;
  class _impl_LoadableInterface;
  
  typedef _objref_LoadableInterface* LoadableInterface_ptr;
  typedef LoadableInterface_ptr LoadableInterfaceRef;

  class LoadableInterface_Helper {
  public:
    typedef LoadableInterface_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_LoadableInterface, LoadableInterface_Helper> LoadableInterface_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_LoadableInterface,LoadableInterface_Helper > LoadableInterface_out;

#endif

  // interface LoadableInterface
  class LoadableInterface {
  public:
    // Declarations for this interface type.
    typedef LoadableInterface_ptr _ptr_type;
    typedef LoadableInterface_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    enum LoadType { KERNEL_MODULE, DRIVER, SHARED_LIBRARY, EXECUTABLE /*, __max_LoadType=0xffffffff */ };
    typedef LoadType& LoadType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_LoadType;

    class InvalidLoadKind : public ::CORBA::UserException {
    public:
      
      

      inline InvalidLoadKind() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      InvalidLoadKind(const InvalidLoadKind&);
      
      InvalidLoadKind& operator=(const InvalidLoadKind&);
      virtual ~InvalidLoadKind();
      virtual void _raise() const;
      static InvalidLoadKind* _downcast(::CORBA::Exception*);
      static const InvalidLoadKind* _downcast(const ::CORBA::Exception*);
      static inline InvalidLoadKind* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      inline void operator>>=(cdrStream&) const { }
      inline void operator<<=(cdrStream&) { }

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_InvalidLoadKind;

    class LoadFail : public ::CORBA::UserException {
    public:
      
      ErrorNumberType errorNumber;

      ::CORBA::String_member msg;

    

      inline LoadFail() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      LoadFail(const LoadFail&);
      LoadFail(ErrorNumberType i_errorNumber, const char* i_msg);
      LoadFail& operator=(const LoadFail&);
      virtual ~LoadFail();
      virtual void _raise() const;
      static LoadFail* _downcast(::CORBA::Exception*);
      static const LoadFail* _downcast(const ::CORBA::Exception*);
      static inline LoadFail* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_LoadFail;

  
  };

  class _objref_LoadableInterface :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    void load(::CF::FileSystem_ptr fs, const char* fileName, ::CF::LoadableInterface::LoadType loadKind);
    void unload(const char* fileName);

    // Constructors
    inline _objref_LoadableInterface()  { _PR_setobj(0); }  // nil
    _objref_LoadableInterface(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_LoadableInterface();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_LoadableInterface(const _objref_LoadableInterface&);
    _objref_LoadableInterface& operator = (const _objref_LoadableInterface&);
    // not implemented

    friend class LoadableInterface;
  };

  class _pof_LoadableInterface : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_LoadableInterface() : _OMNI_NS(proxyObjectFactory)(LoadableInterface::_PD_repoId) {}
    virtual ~_pof_LoadableInterface();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_LoadableInterface :
    public virtual omniServant
  {
  public:
    virtual ~_impl_LoadableInterface();

    virtual void load(::CF::FileSystem_ptr fs, const char* fileName, ::CF::LoadableInterface::LoadType loadKind) = 0;
    virtual void unload(const char* fileName) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_LoadableInterface;

_CORBA_MODULE_END



_CORBA_MODULE POA_CF
_CORBA_MODULE_BEG

  class LoadableInterface :
    public virtual CF::_impl_LoadableInterface,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~LoadableInterface();

    inline ::CF::LoadableInterface_ptr _this() {
      return (::CF::LoadableInterface_ptr) _do_this(::CF::LoadableInterface::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_CF
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(CF::LoadableInterface::LoadType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (CF::LoadableInterface::LoadType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= CF::LoadableInterface::EXECUTABLE) {
    _e = (CF::LoadableInterface::LoadType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, CF::LoadableInterface::LoadType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::LoadableInterface::LoadType& _s);

void operator<<=(::CORBA::Any& _a, const CF::LoadableInterface::InvalidLoadKind& _s);
void operator<<=(::CORBA::Any& _a, const CF::LoadableInterface::InvalidLoadKind* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::LoadableInterface::InvalidLoadKind*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::LoadableInterface::LoadFail& _s);
void operator<<=(::CORBA::Any& _a, const CF::LoadableInterface::LoadFail* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::LoadableInterface::LoadFail*& _sp);

void operator<<=(::CORBA::Any& _a, CF::LoadableInterface_ptr _s);
void operator<<=(::CORBA::Any& _a, CF::LoadableInterface_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::LoadableInterface_ptr& _s);



inline void
CF::LoadableInterface::_marshalObjRef(::CF::LoadableInterface_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_CFLoadableInterface
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_CFLoadableInterface
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_CFLoadableInterface
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_CFLoadableInterface
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFLoadableInterface
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFLoadableInterface
#endif

#endif  // __CFLoadableInterface_hh__

