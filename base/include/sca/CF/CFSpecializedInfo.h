// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __CFSpecializedInfo_hh__
#define __CFSpecializedInfo_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_CFSpecializedInfo
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_CFSpecializedInfo
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFSpecializedInfo
#endif



#ifndef __CFPrimitiveTypes_hh_EXTERNAL_GUARD__
#define __CFPrimitiveTypes_hh_EXTERNAL_GUARD__
#include <CFPrimitiveTypes.h>
#endif
#ifndef __CFULongLongSeq_hh_EXTERNAL_GUARD__
#define __CFULongLongSeq_hh_EXTERNAL_GUARD__
#include <CFULongLongSeq.h>
#endif
#ifndef __CFBooleanSeq_hh_EXTERNAL_GUARD__
#define __CFBooleanSeq_hh_EXTERNAL_GUARD__
#include <CFBooleanSeq.h>
#endif
#ifndef __CFULongSeq_hh_EXTERNAL_GUARD__
#define __CFULongSeq_hh_EXTERNAL_GUARD__
#include <CFULongSeq.h>
#endif
#ifndef __CFLongLongSeq_hh_EXTERNAL_GUARD__
#define __CFLongLongSeq_hh_EXTERNAL_GUARD__
#include <CFLongLongSeq.h>
#endif
#ifndef __CFCharSeq_hh_EXTERNAL_GUARD__
#define __CFCharSeq_hh_EXTERNAL_GUARD__
#include <CFCharSeq.h>
#endif
#ifndef __CFUShortSeq_hh_EXTERNAL_GUARD__
#define __CFUShortSeq_hh_EXTERNAL_GUARD__
#include <CFUShortSeq.h>
#endif
#ifndef __CFLongSeq_hh_EXTERNAL_GUARD__
#define __CFLongSeq_hh_EXTERNAL_GUARD__
#include <CFLongSeq.h>
#endif
#ifndef __CFDoubleSeq_hh_EXTERNAL_GUARD__
#define __CFDoubleSeq_hh_EXTERNAL_GUARD__
#include <CFDoubleSeq.h>
#endif
#ifndef __CFShortSeq_hh_EXTERNAL_GUARD__
#define __CFShortSeq_hh_EXTERNAL_GUARD__
#include <CFShortSeq.h>
#endif
#ifndef __CFFloatSeq_hh_EXTERNAL_GUARD__
#define __CFFloatSeq_hh_EXTERNAL_GUARD__
#include <CFFloatSeq.h>
#endif
#ifndef __CFOctetSeq_hh_EXTERNAL_GUARD__
#define __CFOctetSeq_hh_EXTERNAL_GUARD__
#include <CFOctetSeq.h>
#endif
#ifndef __CFStringSeq_hh_EXTERNAL_GUARD__
#define __CFStringSeq_hh_EXTERNAL_GUARD__
#include <CFStringSeq.h>
#endif
#ifndef __CFProperties_hh_EXTERNAL_GUARD__
#define __CFProperties_hh_EXTERNAL_GUARD__
#include <CFProperties.h>
#endif
#ifndef __CFCommonTypes_hh_EXTERNAL_GUARD__
#define __CFCommonTypes_hh_EXTERNAL_GUARD__
#include <CFCommonTypes.h>
#endif
#ifndef __CFFile_hh_EXTERNAL_GUARD__
#define __CFFile_hh_EXTERNAL_GUARD__
#include <CFFile.h>
#endif
#ifndef __CFFileSystem_hh_EXTERNAL_GUARD__
#define __CFFileSystem_hh_EXTERNAL_GUARD__
#include <CFFileSystem.h>
#endif
#ifndef __CFPlatformTypes_hh_EXTERNAL_GUARD__
#define __CFPlatformTypes_hh_EXTERNAL_GUARD__
#include <CFPlatformTypes.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE CF

_CORBA_MODULE_BEG

  enum PropertyActionType { CF_EQ, CF_NE, CF_GT, CF_GE, CF_LT, CF_LE, CF_EXTERNAL /*, __max_PropertyActionType=0xffffffff */ };
  typedef PropertyActionType& PropertyActionType_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PropertyActionType;

  enum PropertyType { CF_BOOLEAN, CF_CHAR, CF_DOUBLE, CF_FLOAT, CF_SHORT, CF_LONG, CF_OBJREF, CF_OCTET, CF_STRING, CF_USHORT, CF_ULONG /*, __max_PropertyType=0xffffffff */ };
  typedef PropertyType& PropertyType_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PropertyType;

  _CORBA_MODULE_VAR _core_attr const char * ALLOCATION_PROPS_ID;

  struct AllocationPropertyType {
    typedef _CORBA_ConstrType_Variable_Var<AllocationPropertyType> _var_type;

    
    ::CORBA::String_member id;

    StringSequence values;

    PropertyActionType action;

    PropertyType type;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef AllocationPropertyType::_var_type AllocationPropertyType_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< AllocationPropertyType,AllocationPropertyType_var > AllocationPropertyType_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AllocationPropertyType;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AllocationProperties;

  class AllocationProperties_var;

  class AllocationProperties : public _CORBA_Unbounded_Sequence< AllocationPropertyType >  {
  public:
    typedef AllocationProperties_var _var_type;
    inline AllocationProperties() {}
    inline AllocationProperties(const AllocationProperties& _s)
      : _CORBA_Unbounded_Sequence< AllocationPropertyType > (_s) {}

    inline AllocationProperties(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< AllocationPropertyType > (_max) {}
    inline AllocationProperties(_CORBA_ULong _max, _CORBA_ULong _len, AllocationPropertyType* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< AllocationPropertyType > (_max, _len, _val, _rel) {}

  

    inline AllocationProperties& operator = (const AllocationProperties& _s) {
      _CORBA_Unbounded_Sequence< AllocationPropertyType > ::operator=(_s);
      return *this;
    }
  };

  class AllocationProperties_out;

  class AllocationProperties_var {
  public:
    inline AllocationProperties_var() : _pd_seq(0) {}
    inline AllocationProperties_var(AllocationProperties* _s) : _pd_seq(_s) {}
    inline AllocationProperties_var(const AllocationProperties_var& _s) {
      if (_s._pd_seq)  _pd_seq = new AllocationProperties(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~AllocationProperties_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline AllocationProperties_var& operator = (AllocationProperties* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline AllocationProperties_var& operator = (const AllocationProperties_var& _s) {
      if (_s._pd_seq) {
        if (!_pd_seq)  _pd_seq = new AllocationProperties;
        *_pd_seq = *_s._pd_seq;
      } else if (_pd_seq) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline AllocationPropertyType& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline AllocationProperties* operator -> () { return _pd_seq; }
    inline const AllocationProperties* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator AllocationProperties& () const { return *_pd_seq; }
#else
    inline operator const AllocationProperties& () const { return *_pd_seq; }
    inline operator AllocationProperties& () { return *_pd_seq; }
#endif
      
    inline const AllocationProperties& in() const { return *_pd_seq; }
    inline AllocationProperties&       inout()    { return *_pd_seq; }
    inline AllocationProperties*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline AllocationProperties* _retn() { AllocationProperties* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class AllocationProperties_out;
    
  private:
    AllocationProperties* _pd_seq;
  };

  class AllocationProperties_out {
  public:
    inline AllocationProperties_out(AllocationProperties*& _s) : _data(_s) { _data = 0; }
    inline AllocationProperties_out(AllocationProperties_var& _s)
      : _data(_s._pd_seq) { _s = (AllocationProperties*) 0; }
    inline AllocationProperties_out(const AllocationProperties_out& _s) : _data(_s._data) {}
    inline AllocationProperties_out& operator = (const AllocationProperties_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline AllocationProperties_out& operator = (AllocationProperties* _s) {
      _data = _s;
      return *this;
    }
    inline operator AllocationProperties*&()  { return _data; }
    inline AllocationProperties*& ptr()       { return _data; }
    inline AllocationProperties* operator->() { return _data; }

    inline AllocationPropertyType& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    AllocationProperties*& _data;

  private:
    AllocationProperties_out();
    AllocationProperties_out& operator=(const AllocationProperties_var&);
  };

  _CORBA_MODULE_VAR _core_attr const char * DEVICE_MANAGER_ID;

  _CORBA_MODULE_VAR _core_attr const char * MANAGER_INFO_ID;

  _CORBA_MODULE_VAR _core_attr const char * EXECUTION_ID;

  _CORBA_MODULE_VAR _core_attr const char * IMPLEMENTATION_ID;

  _CORBA_MODULE_VAR _core_attr const char * TARGET_DEVICE_ID;

  _CORBA_MODULE_VAR _core_attr const char * USES_DEVICE_ID;

  _CORBA_MODULE_VAR _core_attr const char * COMPONENTS_ID;

  struct UsesDeviceAssignmentType {
    typedef _CORBA_ConstrType_Variable_Var<UsesDeviceAssignmentType> _var_type;

    
    ::CORBA::String_member usesDeviceId;

    ::CORBA::String_member assignedDeviceId;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef UsesDeviceAssignmentType::_var_type UsesDeviceAssignmentType_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< UsesDeviceAssignmentType,UsesDeviceAssignmentType_var > UsesDeviceAssignmentType_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_UsesDeviceAssignmentType;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_UsesDeviceAssignmentSeq;

  class UsesDeviceAssignmentSeq_var;

  class UsesDeviceAssignmentSeq : public _CORBA_Unbounded_Sequence< UsesDeviceAssignmentType >  {
  public:
    typedef UsesDeviceAssignmentSeq_var _var_type;
    inline UsesDeviceAssignmentSeq() {}
    inline UsesDeviceAssignmentSeq(const UsesDeviceAssignmentSeq& _s)
      : _CORBA_Unbounded_Sequence< UsesDeviceAssignmentType > (_s) {}

    inline UsesDeviceAssignmentSeq(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< UsesDeviceAssignmentType > (_max) {}
    inline UsesDeviceAssignmentSeq(_CORBA_ULong _max, _CORBA_ULong _len, UsesDeviceAssignmentType* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< UsesDeviceAssignmentType > (_max, _len, _val, _rel) {}

  

    inline UsesDeviceAssignmentSeq& operator = (const UsesDeviceAssignmentSeq& _s) {
      _CORBA_Unbounded_Sequence< UsesDeviceAssignmentType > ::operator=(_s);
      return *this;
    }
  };

  class UsesDeviceAssignmentSeq_out;

  class UsesDeviceAssignmentSeq_var {
  public:
    inline UsesDeviceAssignmentSeq_var() : _pd_seq(0) {}
    inline UsesDeviceAssignmentSeq_var(UsesDeviceAssignmentSeq* _s) : _pd_seq(_s) {}
    inline UsesDeviceAssignmentSeq_var(const UsesDeviceAssignmentSeq_var& _s) {
      if (_s._pd_seq)  _pd_seq = new UsesDeviceAssignmentSeq(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~UsesDeviceAssignmentSeq_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline UsesDeviceAssignmentSeq_var& operator = (UsesDeviceAssignmentSeq* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline UsesDeviceAssignmentSeq_var& operator = (const UsesDeviceAssignmentSeq_var& _s) {
      if (_s._pd_seq) {
        if (!_pd_seq)  _pd_seq = new UsesDeviceAssignmentSeq;
        *_pd_seq = *_s._pd_seq;
      } else if (_pd_seq) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline UsesDeviceAssignmentType& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline UsesDeviceAssignmentSeq* operator -> () { return _pd_seq; }
    inline const UsesDeviceAssignmentSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator UsesDeviceAssignmentSeq& () const { return *_pd_seq; }
#else
    inline operator const UsesDeviceAssignmentSeq& () const { return *_pd_seq; }
    inline operator UsesDeviceAssignmentSeq& () { return *_pd_seq; }
#endif
      
    inline const UsesDeviceAssignmentSeq& in() const { return *_pd_seq; }
    inline UsesDeviceAssignmentSeq&       inout()    { return *_pd_seq; }
    inline UsesDeviceAssignmentSeq*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline UsesDeviceAssignmentSeq* _retn() { UsesDeviceAssignmentSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class UsesDeviceAssignmentSeq_out;
    
  private:
    UsesDeviceAssignmentSeq* _pd_seq;
  };

  class UsesDeviceAssignmentSeq_out {
  public:
    inline UsesDeviceAssignmentSeq_out(UsesDeviceAssignmentSeq*& _s) : _data(_s) { _data = 0; }
    inline UsesDeviceAssignmentSeq_out(UsesDeviceAssignmentSeq_var& _s)
      : _data(_s._pd_seq) { _s = (UsesDeviceAssignmentSeq*) 0; }
    inline UsesDeviceAssignmentSeq_out(const UsesDeviceAssignmentSeq_out& _s) : _data(_s._data) {}
    inline UsesDeviceAssignmentSeq_out& operator = (const UsesDeviceAssignmentSeq_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline UsesDeviceAssignmentSeq_out& operator = (UsesDeviceAssignmentSeq* _s) {
      _data = _s;
      return *this;
    }
    inline operator UsesDeviceAssignmentSeq*&()  { return _data; }
    inline UsesDeviceAssignmentSeq*& ptr()       { return _data; }
    inline UsesDeviceAssignmentSeq* operator->() { return _data; }

    inline UsesDeviceAssignmentType& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    UsesDeviceAssignmentSeq*& _data;

  private:
    UsesDeviceAssignmentSeq_out();
    UsesDeviceAssignmentSeq_out& operator=(const UsesDeviceAssignmentSeq_var&);
  };

  struct ManagerInfo {
    typedef _CORBA_ConstrType_Variable_Var<ManagerInfo> _var_type;

    
    _CORBA_ObjRef_Member< _objref_FileSystem, FileSystem_Helper>  fileSys;

    Components deployedComponents;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ManagerInfo::_var_type ManagerInfo_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< ManagerInfo,ManagerInfo_var > ManagerInfo_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ManagerInfo;

_CORBA_MODULE_END



_CORBA_MODULE POA_CF
_CORBA_MODULE_BEG

_CORBA_MODULE_END



_CORBA_MODULE OBV_CF
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(CF::PropertyActionType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (CF::PropertyActionType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= CF::CF_EXTERNAL) {
    _e = (CF::PropertyActionType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, CF::PropertyActionType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::PropertyActionType& _s);

inline void operator >>=(CF::PropertyType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (CF::PropertyType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= CF::CF_ULONG) {
    _e = (CF::PropertyType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, CF::PropertyType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::PropertyType& _s);

extern void operator<<=(::CORBA::Any& _a, const CF::AllocationPropertyType& _s);
extern void operator<<=(::CORBA::Any& _a, CF::AllocationPropertyType* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::AllocationPropertyType*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::AllocationPropertyType*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::AllocationProperties& _s);
void operator<<=(::CORBA::Any& _a, CF::AllocationProperties* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::AllocationProperties*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::AllocationProperties*& _sp);

extern void operator<<=(::CORBA::Any& _a, const CF::UsesDeviceAssignmentType& _s);
extern void operator<<=(::CORBA::Any& _a, CF::UsesDeviceAssignmentType* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::UsesDeviceAssignmentType*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::UsesDeviceAssignmentType*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::UsesDeviceAssignmentSeq& _s);
void operator<<=(::CORBA::Any& _a, CF::UsesDeviceAssignmentSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::UsesDeviceAssignmentSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::UsesDeviceAssignmentSeq*& _sp);

extern void operator<<=(::CORBA::Any& _a, const CF::ManagerInfo& _s);
extern void operator<<=(::CORBA::Any& _a, CF::ManagerInfo* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::ManagerInfo*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::ManagerInfo*& _sp);





#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_CFSpecializedInfo
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_CFSpecializedInfo
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_CFSpecializedInfo
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_CFSpecializedInfo
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFSpecializedInfo
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFSpecializedInfo
#endif

#endif  // __CFSpecializedInfo_hh__

