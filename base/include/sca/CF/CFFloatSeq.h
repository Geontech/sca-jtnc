// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __CFFloatSeq_hh__
#define __CFFloatSeq_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_CFFloatSeq
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_CFFloatSeq
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFFloatSeq
#endif



#ifndef __CFPrimitiveTypes_hh_EXTERNAL_GUARD__
#define __CFPrimitiveTypes_hh_EXTERNAL_GUARD__
#include <CFPrimitiveTypes.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE CF

_CORBA_MODULE_BEG

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_FloatSeq;

  class FloatSeq_var;

  class FloatSeq : public _CORBA_Unbounded_Sequence_w_FixSizeElement< FloatType, 4, 4 >  {
  public:
    typedef FloatSeq_var _var_type;
    inline FloatSeq() {}
    inline FloatSeq(const FloatSeq& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< FloatType, 4, 4 > (_s) {}

    inline FloatSeq(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< FloatType, 4, 4 > (_max) {}
    inline FloatSeq(_CORBA_ULong _max, _CORBA_ULong _len, FloatType* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< FloatType, 4, 4 > (_max, _len, _val, _rel) {}

  

    inline FloatSeq& operator = (const FloatSeq& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< FloatType, 4, 4 > ::operator=(_s);
      return *this;
    }
  };

  class FloatSeq_out;

  class FloatSeq_var {
  public:
    inline FloatSeq_var() : _pd_seq(0) {}
    inline FloatSeq_var(FloatSeq* _s) : _pd_seq(_s) {}
    inline FloatSeq_var(const FloatSeq_var& _s) {
      if (_s._pd_seq)  _pd_seq = new FloatSeq(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~FloatSeq_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline FloatSeq_var& operator = (FloatSeq* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline FloatSeq_var& operator = (const FloatSeq_var& _s) {
      if (_s._pd_seq) {
        if (!_pd_seq)  _pd_seq = new FloatSeq;
        *_pd_seq = *_s._pd_seq;
      } else if (_pd_seq) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline FloatType& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline FloatSeq* operator -> () { return _pd_seq; }
    inline const FloatSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator FloatSeq& () const { return *_pd_seq; }
#else
    inline operator const FloatSeq& () const { return *_pd_seq; }
    inline operator FloatSeq& () { return *_pd_seq; }
#endif
      
    inline const FloatSeq& in() const { return *_pd_seq; }
    inline FloatSeq&       inout()    { return *_pd_seq; }
    inline FloatSeq*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline FloatSeq* _retn() { FloatSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class FloatSeq_out;
    
  private:
    FloatSeq* _pd_seq;
  };

  class FloatSeq_out {
  public:
    inline FloatSeq_out(FloatSeq*& _s) : _data(_s) { _data = 0; }
    inline FloatSeq_out(FloatSeq_var& _s)
      : _data(_s._pd_seq) { _s = (FloatSeq*) 0; }
    inline FloatSeq_out(const FloatSeq_out& _s) : _data(_s._data) {}
    inline FloatSeq_out& operator = (const FloatSeq_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline FloatSeq_out& operator = (FloatSeq* _s) {
      _data = _s;
      return *this;
    }
    inline operator FloatSeq*&()  { return _data; }
    inline FloatSeq*& ptr()       { return _data; }
    inline FloatSeq* operator->() { return _data; }

    inline FloatType& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    FloatSeq*& _data;

  private:
    FloatSeq_out();
    FloatSeq_out& operator=(const FloatSeq_var&);
  };

_CORBA_MODULE_END



_CORBA_MODULE POA_CF
_CORBA_MODULE_BEG

_CORBA_MODULE_END



_CORBA_MODULE OBV_CF
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const CF::FloatSeq& _s);
void operator<<=(::CORBA::Any& _a, CF::FloatSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::FloatSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::FloatSeq*& _sp);





#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_CFFloatSeq
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_CFFloatSeq
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_CFFloatSeq
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_CFFloatSeq
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFFloatSeq
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFFloatSeq
#endif

#endif  // __CFFloatSeq_hh__

