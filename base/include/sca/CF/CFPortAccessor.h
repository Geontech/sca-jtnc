// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __CFPortAccessor_hh__
#define __CFPortAccessor_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_CFPortAccessor
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_CFPortAccessor
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFPortAccessor
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE CF

_CORBA_MODULE_BEG

#ifndef __CF_mPortAccessor__
#define __CF_mPortAccessor__
  class PortAccessor;
  class _objref_PortAccessor;
  class _impl_PortAccessor;
  
  typedef _objref_PortAccessor* PortAccessor_ptr;
  typedef PortAccessor_ptr PortAccessorRef;

  class PortAccessor_Helper {
  public:
    typedef PortAccessor_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_PortAccessor, PortAccessor_Helper> PortAccessor_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_PortAccessor,PortAccessor_Helper > PortAccessor_out;

#endif

  // interface PortAccessor
  class PortAccessor {
  public:
    // Declarations for this interface type.
    typedef PortAccessor_ptr _ptr_type;
    typedef PortAccessor_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    struct ConnectionIdType {
      typedef _CORBA_ConstrType_Variable_Var<ConnectionIdType> _var_type;

      
      ::CORBA::String_member connectionId;

      ::CORBA::String_member portName;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef ConnectionIdType::_var_type ConnectionIdType_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< ConnectionIdType,ConnectionIdType_var > ConnectionIdType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ConnectionIdType;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_Disconnections;

    class Disconnections_var;

    class Disconnections : public _CORBA_Unbounded_Sequence< ConnectionIdType >  {
    public:
      typedef Disconnections_var _var_type;
      inline Disconnections() {}
      inline Disconnections(const Disconnections& _s)
        : _CORBA_Unbounded_Sequence< ConnectionIdType > (_s) {}

      inline Disconnections(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< ConnectionIdType > (_max) {}
      inline Disconnections(_CORBA_ULong _max, _CORBA_ULong _len, ConnectionIdType* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< ConnectionIdType > (_max, _len, _val, _rel) {}

    

      inline Disconnections& operator = (const Disconnections& _s) {
        _CORBA_Unbounded_Sequence< ConnectionIdType > ::operator=(_s);
        return *this;
      }
    };

    class Disconnections_out;

    class Disconnections_var {
    public:
      inline Disconnections_var() : _pd_seq(0) {}
      inline Disconnections_var(Disconnections* _s) : _pd_seq(_s) {}
      inline Disconnections_var(const Disconnections_var& _s) {
        if (_s._pd_seq)  _pd_seq = new Disconnections(*_s._pd_seq);
        else             _pd_seq = 0;
      }
      inline ~Disconnections_var() { if (_pd_seq)  delete _pd_seq; }
        
      inline Disconnections_var& operator = (Disconnections* _s) {
        if (_pd_seq)  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline Disconnections_var& operator = (const Disconnections_var& _s) {
        if (_s._pd_seq) {
          if (!_pd_seq)  _pd_seq = new Disconnections;
          *_pd_seq = *_s._pd_seq;
        } else if (_pd_seq) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ConnectionIdType& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline Disconnections* operator -> () { return _pd_seq; }
      inline const Disconnections* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator Disconnections& () const { return *_pd_seq; }
#else
      inline operator const Disconnections& () const { return *_pd_seq; }
      inline operator Disconnections& () { return *_pd_seq; }
#endif
        
      inline const Disconnections& in() const { return *_pd_seq; }
      inline Disconnections&       inout()    { return *_pd_seq; }
      inline Disconnections*&      out() {
        if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline Disconnections* _retn() { Disconnections* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class Disconnections_out;
      
    private:
      Disconnections* _pd_seq;
    };

    class Disconnections_out {
    public:
      inline Disconnections_out(Disconnections*& _s) : _data(_s) { _data = 0; }
      inline Disconnections_out(Disconnections_var& _s)
        : _data(_s._pd_seq) { _s = (Disconnections*) 0; }
      inline Disconnections_out(const Disconnections_out& _s) : _data(_s._data) {}
      inline Disconnections_out& operator = (const Disconnections_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline Disconnections_out& operator = (Disconnections* _s) {
        _data = _s;
        return *this;
      }
      inline operator Disconnections*&()  { return _data; }
      inline Disconnections*& ptr()       { return _data; }
      inline Disconnections* operator->() { return _data; }

      inline ConnectionIdType& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      Disconnections*& _data;

    private:
      Disconnections_out();
      Disconnections_out& operator=(const Disconnections_var&);
    };

    struct ConnectionType {
      typedef _CORBA_ConstrType_Variable_Var<ConnectionType> _var_type;

      
      ConnectionIdType portConnectionId;

      ::CORBA::Object_Member portReference;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef ConnectionType::_var_type ConnectionType_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< ConnectionType,ConnectionType_var > ConnectionType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ConnectionType;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_Connections;

    class Connections_var;

    class Connections : public _CORBA_Unbounded_Sequence< ConnectionType >  {
    public:
      typedef Connections_var _var_type;
      inline Connections() {}
      inline Connections(const Connections& _s)
        : _CORBA_Unbounded_Sequence< ConnectionType > (_s) {}

      inline Connections(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< ConnectionType > (_max) {}
      inline Connections(_CORBA_ULong _max, _CORBA_ULong _len, ConnectionType* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< ConnectionType > (_max, _len, _val, _rel) {}

    

      inline Connections& operator = (const Connections& _s) {
        _CORBA_Unbounded_Sequence< ConnectionType > ::operator=(_s);
        return *this;
      }
    };

    class Connections_out;

    class Connections_var {
    public:
      inline Connections_var() : _pd_seq(0) {}
      inline Connections_var(Connections* _s) : _pd_seq(_s) {}
      inline Connections_var(const Connections_var& _s) {
        if (_s._pd_seq)  _pd_seq = new Connections(*_s._pd_seq);
        else             _pd_seq = 0;
      }
      inline ~Connections_var() { if (_pd_seq)  delete _pd_seq; }
        
      inline Connections_var& operator = (Connections* _s) {
        if (_pd_seq)  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline Connections_var& operator = (const Connections_var& _s) {
        if (_s._pd_seq) {
          if (!_pd_seq)  _pd_seq = new Connections;
          *_pd_seq = *_s._pd_seq;
        } else if (_pd_seq) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ConnectionType& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline Connections* operator -> () { return _pd_seq; }
      inline const Connections* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator Connections& () const { return *_pd_seq; }
#else
      inline operator const Connections& () const { return *_pd_seq; }
      inline operator Connections& () { return *_pd_seq; }
#endif
        
      inline const Connections& in() const { return *_pd_seq; }
      inline Connections&       inout()    { return *_pd_seq; }
      inline Connections*&      out() {
        if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline Connections* _retn() { Connections* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class Connections_out;
      
    private:
      Connections* _pd_seq;
    };

    class Connections_out {
    public:
      inline Connections_out(Connections*& _s) : _data(_s) { _data = 0; }
      inline Connections_out(Connections_var& _s)
        : _data(_s._pd_seq) { _s = (Connections*) 0; }
      inline Connections_out(const Connections_out& _s) : _data(_s._data) {}
      inline Connections_out& operator = (const Connections_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline Connections_out& operator = (Connections* _s) {
        _data = _s;
        return *this;
      }
      inline operator Connections*&()  { return _data; }
      inline Connections*& ptr()       { return _data; }
      inline Connections* operator->() { return _data; }

      inline ConnectionType& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      Connections*& _data;

    private:
      Connections_out();
      Connections_out& operator=(const Connections_var&);
    };

    struct ConnectionErrorType {
      typedef _CORBA_ConstrType_Variable_Var<ConnectionErrorType> _var_type;

      
      ConnectionIdType portConnectionId;

      ::CORBA::UShort errorCode;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef ConnectionErrorType::_var_type ConnectionErrorType_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< ConnectionErrorType,ConnectionErrorType_var > ConnectionErrorType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ConnectionErrorType;

    class InvalidPort : public ::CORBA::UserException {
    public:
      
      ConnectionErrorType invalidConnections;

    

      inline InvalidPort() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      InvalidPort(const InvalidPort&);
      InvalidPort(const ConnectionErrorType& i_invalidConnections);
      InvalidPort& operator=(const InvalidPort&);
      virtual ~InvalidPort();
      virtual void _raise() const;
      static InvalidPort* _downcast(::CORBA::Exception*);
      static const InvalidPort* _downcast(const ::CORBA::Exception*);
      static inline InvalidPort* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_InvalidPort;

  
  };

  class _objref_PortAccessor :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    void connectUsesPorts(const ::CF::PortAccessor::Connections& portConnections);
    void disconnectPorts(const ::CF::PortAccessor::Disconnections& portDisconnections);
    void getProvidesPorts(::CF::PortAccessor::Connections& portConnections);

    // Constructors
    inline _objref_PortAccessor()  { _PR_setobj(0); }  // nil
    _objref_PortAccessor(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_PortAccessor();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_PortAccessor(const _objref_PortAccessor&);
    _objref_PortAccessor& operator = (const _objref_PortAccessor&);
    // not implemented

    friend class PortAccessor;
  };

  class _pof_PortAccessor : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_PortAccessor() : _OMNI_NS(proxyObjectFactory)(PortAccessor::_PD_repoId) {}
    virtual ~_pof_PortAccessor();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_PortAccessor :
    public virtual omniServant
  {
  public:
    virtual ~_impl_PortAccessor();

    virtual void connectUsesPorts(const ::CF::PortAccessor::Connections& portConnections) = 0;
    virtual void disconnectPorts(const ::CF::PortAccessor::Disconnections& portDisconnections) = 0;
    virtual void getProvidesPorts(::CF::PortAccessor::Connections& portConnections) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PortAccessor;

_CORBA_MODULE_END



_CORBA_MODULE POA_CF
_CORBA_MODULE_BEG

  class PortAccessor :
    public virtual CF::_impl_PortAccessor,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~PortAccessor();

    inline ::CF::PortAccessor_ptr _this() {
      return (::CF::PortAccessor_ptr) _do_this(::CF::PortAccessor::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_CF
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const CF::PortAccessor::ConnectionIdType& _s);
extern void operator<<=(::CORBA::Any& _a, CF::PortAccessor::ConnectionIdType* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::PortAccessor::ConnectionIdType*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::PortAccessor::ConnectionIdType*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::PortAccessor::Disconnections& _s);
void operator<<=(::CORBA::Any& _a, CF::PortAccessor::Disconnections* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::PortAccessor::Disconnections*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::PortAccessor::Disconnections*& _sp);

extern void operator<<=(::CORBA::Any& _a, const CF::PortAccessor::ConnectionType& _s);
extern void operator<<=(::CORBA::Any& _a, CF::PortAccessor::ConnectionType* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::PortAccessor::ConnectionType*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::PortAccessor::ConnectionType*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::PortAccessor::Connections& _s);
void operator<<=(::CORBA::Any& _a, CF::PortAccessor::Connections* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::PortAccessor::Connections*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::PortAccessor::Connections*& _sp);

extern void operator<<=(::CORBA::Any& _a, const CF::PortAccessor::ConnectionErrorType& _s);
extern void operator<<=(::CORBA::Any& _a, CF::PortAccessor::ConnectionErrorType* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::PortAccessor::ConnectionErrorType*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::PortAccessor::ConnectionErrorType*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::PortAccessor::InvalidPort& _s);
void operator<<=(::CORBA::Any& _a, const CF::PortAccessor::InvalidPort* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::PortAccessor::InvalidPort*& _sp);

void operator<<=(::CORBA::Any& _a, CF::PortAccessor_ptr _s);
void operator<<=(::CORBA::Any& _a, CF::PortAccessor_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::PortAccessor_ptr& _s);



inline void
CF::PortAccessor::_marshalObjRef(::CF::PortAccessor_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_CFPortAccessor
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_CFPortAccessor
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_CFPortAccessor
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_CFPortAccessor
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFPortAccessor
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFPortAccessor
#endif

#endif  // __CFPortAccessor_hh__

