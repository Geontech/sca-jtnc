// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __CFProperties_hh__
#define __CFProperties_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_CFProperties
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_CFProperties
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFProperties
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE CF

_CORBA_MODULE_BEG

  struct DataType {
    typedef _CORBA_ConstrType_Variable_Var<DataType> _var_type;

    
    ::CORBA::String_member id;

    ::CORBA::Any value;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef DataType::_var_type DataType_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< DataType,DataType_var > DataType_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_DataType;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Properties;

  class Properties_var;

  class Properties : public _CORBA_Unbounded_Sequence< DataType >  {
  public:
    typedef Properties_var _var_type;
    inline Properties() {}
    inline Properties(const Properties& _s)
      : _CORBA_Unbounded_Sequence< DataType > (_s) {}

    inline Properties(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< DataType > (_max) {}
    inline Properties(_CORBA_ULong _max, _CORBA_ULong _len, DataType* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< DataType > (_max, _len, _val, _rel) {}

  

    inline Properties& operator = (const Properties& _s) {
      _CORBA_Unbounded_Sequence< DataType > ::operator=(_s);
      return *this;
    }
  };

  class Properties_out;

  class Properties_var {
  public:
    inline Properties_var() : _pd_seq(0) {}
    inline Properties_var(Properties* _s) : _pd_seq(_s) {}
    inline Properties_var(const Properties_var& _s) {
      if (_s._pd_seq)  _pd_seq = new Properties(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~Properties_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline Properties_var& operator = (Properties* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline Properties_var& operator = (const Properties_var& _s) {
      if (_s._pd_seq) {
        if (!_pd_seq)  _pd_seq = new Properties;
        *_pd_seq = *_s._pd_seq;
      } else if (_pd_seq) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline DataType& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline Properties* operator -> () { return _pd_seq; }
    inline const Properties* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator Properties& () const { return *_pd_seq; }
#else
    inline operator const Properties& () const { return *_pd_seq; }
    inline operator Properties& () { return *_pd_seq; }
#endif
      
    inline const Properties& in() const { return *_pd_seq; }
    inline Properties&       inout()    { return *_pd_seq; }
    inline Properties*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline Properties* _retn() { Properties* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class Properties_out;
    
  private:
    Properties* _pd_seq;
  };

  class Properties_out {
  public:
    inline Properties_out(Properties*& _s) : _data(_s) { _data = 0; }
    inline Properties_out(Properties_var& _s)
      : _data(_s._pd_seq) { _s = (Properties*) 0; }
    inline Properties_out(const Properties_out& _s) : _data(_s._data) {}
    inline Properties_out& operator = (const Properties_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline Properties_out& operator = (Properties* _s) {
      _data = _s;
      return *this;
    }
    inline operator Properties*&()  { return _data; }
    inline Properties*& ptr()       { return _data; }
    inline Properties* operator->() { return _data; }

    inline DataType& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    Properties*& _data;

  private:
    Properties_out();
    Properties_out& operator=(const Properties_var&);
  };

  class UnknownProperties : public ::CORBA::UserException {
  public:
    
    Properties invalidProperties;

  

    inline UnknownProperties() {
      pd_insertToAnyFn    = insertToAnyFn;
      pd_insertToAnyFnNCP = insertToAnyFnNCP;
    }
    UnknownProperties(const UnknownProperties&);
    UnknownProperties(const Properties i_invalidProperties);
    UnknownProperties& operator=(const UnknownProperties&);
    virtual ~UnknownProperties();
    virtual void _raise() const;
    static UnknownProperties* _downcast(::CORBA::Exception*);
    static const UnknownProperties* _downcast(const ::CORBA::Exception*);
    static inline UnknownProperties* _narrow(::CORBA::Exception* _e) {
      return _downcast(_e);
    }
    
    void operator>>=(cdrStream&) const ;
    void operator<<=(cdrStream&) ;

    static _core_attr insertExceptionToAny    insertToAnyFn;
    static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

    virtual ::CORBA::Exception* _NP_duplicate() const;

    static _core_attr const char* _PD_repoId;
    static _core_attr const char* _PD_typeId;

  private:
    virtual const char* _NP_typeId() const;
    virtual const char* _NP_repoId(int*) const;
    virtual void _NP_marshal(cdrStream&) const;
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_UnknownProperties;

_CORBA_MODULE_END



_CORBA_MODULE POA_CF
_CORBA_MODULE_BEG

_CORBA_MODULE_END



_CORBA_MODULE OBV_CF
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const CF::DataType& _s);
extern void operator<<=(::CORBA::Any& _a, CF::DataType* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::DataType*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::DataType*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::Properties& _s);
void operator<<=(::CORBA::Any& _a, CF::Properties* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::Properties*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::Properties*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::UnknownProperties& _s);
void operator<<=(::CORBA::Any& _a, const CF::UnknownProperties* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::UnknownProperties*& _sp);





#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_CFProperties
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_CFProperties
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_CFProperties
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_CFProperties
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFProperties
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFProperties
#endif

#endif  // __CFProperties_hh__

