// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __CFStringSeq_hh__
#define __CFStringSeq_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_CFStringSeq
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_CFStringSeq
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFStringSeq
#endif



#ifndef __CFPrimitiveTypes_hh_EXTERNAL_GUARD__
#define __CFPrimitiveTypes_hh_EXTERNAL_GUARD__
#include <CFPrimitiveTypes.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE CF

_CORBA_MODULE_BEG

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StringSeq;

  class StringSeq_var;

  class StringSeq : public _CORBA_Unbounded_Sequence_String {
  public:
    typedef StringSeq_var _var_type;
    inline StringSeq() {}
    inline StringSeq(const StringSeq& _s)
      : _CORBA_Unbounded_Sequence_String(_s) {}

    inline StringSeq(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_String(_max) {}
    inline StringSeq(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

  

    inline StringSeq& operator = (const StringSeq& _s) {
      _CORBA_Unbounded_Sequence_String::operator=(_s);
      return *this;
    }
  };

  class StringSeq_out;

  class StringSeq_var {
  public:
    inline StringSeq_var() : _pd_seq(0) {}
    inline StringSeq_var(StringSeq* _s) : _pd_seq(_s) {}
    inline StringSeq_var(const StringSeq_var& _s) {
      if (_s._pd_seq)  _pd_seq = new StringSeq(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~StringSeq_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline StringSeq_var& operator = (StringSeq* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline StringSeq_var& operator = (const StringSeq_var& _s) {
      if (_s._pd_seq) {
        if (!_pd_seq)  _pd_seq = new StringSeq;
        *_pd_seq = *_s._pd_seq;
      } else if (_pd_seq) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline StringSeq* operator -> () { return _pd_seq; }
    inline const StringSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator StringSeq& () const { return *_pd_seq; }
#else
    inline operator const StringSeq& () const { return *_pd_seq; }
    inline operator StringSeq& () { return *_pd_seq; }
#endif
      
    inline const StringSeq& in() const { return *_pd_seq; }
    inline StringSeq&       inout()    { return *_pd_seq; }
    inline StringSeq*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline StringSeq* _retn() { StringSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class StringSeq_out;
    
  private:
    StringSeq* _pd_seq;
  };

  class StringSeq_out {
  public:
    inline StringSeq_out(StringSeq*& _s) : _data(_s) { _data = 0; }
    inline StringSeq_out(StringSeq_var& _s)
      : _data(_s._pd_seq) { _s = (StringSeq*) 0; }
    inline StringSeq_out(const StringSeq_out& _s) : _data(_s._data) {}
    inline StringSeq_out& operator = (const StringSeq_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline StringSeq_out& operator = (StringSeq* _s) {
      _data = _s;
      return *this;
    }
    inline operator StringSeq*&()  { return _data; }
    inline StringSeq*& ptr()       { return _data; }
    inline StringSeq* operator->() { return _data; }

    inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    StringSeq*& _data;

  private:
    StringSeq_out();
    StringSeq_out& operator=(const StringSeq_var&);
  };

_CORBA_MODULE_END



_CORBA_MODULE POA_CF
_CORBA_MODULE_BEG

_CORBA_MODULE_END



_CORBA_MODULE OBV_CF
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const CF::StringSeq& _s);
void operator<<=(::CORBA::Any& _a, CF::StringSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::StringSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::StringSeq*& _sp);





#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_CFStringSeq
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_CFStringSeq
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_CFStringSeq
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_CFStringSeq
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFStringSeq
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFStringSeq
#endif

#endif  // __CFStringSeq_hh__

