// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __CFApplicationFactory_hh__
#define __CFApplicationFactory_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_CFApplicationFactory
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_CFApplicationFactory
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFApplicationFactory
#endif



#ifndef __CFPrimitiveTypes_hh_EXTERNAL_GUARD__
#define __CFPrimitiveTypes_hh_EXTERNAL_GUARD__
#include <CFPrimitiveTypes.h>
#endif
#ifndef __CFULongLongSeq_hh_EXTERNAL_GUARD__
#define __CFULongLongSeq_hh_EXTERNAL_GUARD__
#include <CFULongLongSeq.h>
#endif
#ifndef __CFBooleanSeq_hh_EXTERNAL_GUARD__
#define __CFBooleanSeq_hh_EXTERNAL_GUARD__
#include <CFBooleanSeq.h>
#endif
#ifndef __CFULongSeq_hh_EXTERNAL_GUARD__
#define __CFULongSeq_hh_EXTERNAL_GUARD__
#include <CFULongSeq.h>
#endif
#ifndef __CFLongLongSeq_hh_EXTERNAL_GUARD__
#define __CFLongLongSeq_hh_EXTERNAL_GUARD__
#include <CFLongLongSeq.h>
#endif
#ifndef __CFCharSeq_hh_EXTERNAL_GUARD__
#define __CFCharSeq_hh_EXTERNAL_GUARD__
#include <CFCharSeq.h>
#endif
#ifndef __CFUShortSeq_hh_EXTERNAL_GUARD__
#define __CFUShortSeq_hh_EXTERNAL_GUARD__
#include <CFUShortSeq.h>
#endif
#ifndef __CFLongSeq_hh_EXTERNAL_GUARD__
#define __CFLongSeq_hh_EXTERNAL_GUARD__
#include <CFLongSeq.h>
#endif
#ifndef __CFDoubleSeq_hh_EXTERNAL_GUARD__
#define __CFDoubleSeq_hh_EXTERNAL_GUARD__
#include <CFDoubleSeq.h>
#endif
#ifndef __CFShortSeq_hh_EXTERNAL_GUARD__
#define __CFShortSeq_hh_EXTERNAL_GUARD__
#include <CFShortSeq.h>
#endif
#ifndef __CFFloatSeq_hh_EXTERNAL_GUARD__
#define __CFFloatSeq_hh_EXTERNAL_GUARD__
#include <CFFloatSeq.h>
#endif
#ifndef __CFOctetSeq_hh_EXTERNAL_GUARD__
#define __CFOctetSeq_hh_EXTERNAL_GUARD__
#include <CFOctetSeq.h>
#endif
#ifndef __CFStringSeq_hh_EXTERNAL_GUARD__
#define __CFStringSeq_hh_EXTERNAL_GUARD__
#include <CFStringSeq.h>
#endif
#ifndef __CFProperties_hh_EXTERNAL_GUARD__
#define __CFProperties_hh_EXTERNAL_GUARD__
#include <CFProperties.h>
#endif
#ifndef __CFCommonTypes_hh_EXTERNAL_GUARD__
#define __CFCommonTypes_hh_EXTERNAL_GUARD__
#include <CFCommonTypes.h>
#endif
#ifndef __CFPlatformTypes_hh_EXTERNAL_GUARD__
#define __CFPlatformTypes_hh_EXTERNAL_GUARD__
#include <CFPlatformTypes.h>
#endif
#ifndef __CFFile_hh_EXTERNAL_GUARD__
#define __CFFile_hh_EXTERNAL_GUARD__
#include <CFFile.h>
#endif
#ifndef __CFFileSystem_hh_EXTERNAL_GUARD__
#define __CFFileSystem_hh_EXTERNAL_GUARD__
#include <CFFileSystem.h>
#endif
#ifndef __CFSpecializedInfo_hh_EXTERNAL_GUARD__
#define __CFSpecializedInfo_hh_EXTERNAL_GUARD__
#include <CFSpecializedInfo.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE CF

_CORBA_MODULE_BEG

#ifndef __CF_mApplicationFactory__
#define __CF_mApplicationFactory__
  class ApplicationFactory;
  class _objref_ApplicationFactory;
  class _impl_ApplicationFactory;
  
  typedef _objref_ApplicationFactory* ApplicationFactory_ptr;
  typedef ApplicationFactory_ptr ApplicationFactoryRef;

  class ApplicationFactory_Helper {
  public:
    typedef ApplicationFactory_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_ApplicationFactory, ApplicationFactory_Helper> ApplicationFactory_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_ApplicationFactory,ApplicationFactory_Helper > ApplicationFactory_out;

#endif

  // interface ApplicationFactory
  class ApplicationFactory {
  public:
    // Declarations for this interface type.
    typedef ApplicationFactory_ptr _ptr_type;
    typedef ApplicationFactory_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    class CreateApplicationRequestError : public ::CORBA::UserException {
    public:
      
      DeviceAssignmentSequence invalidAssignments;

    

      inline CreateApplicationRequestError() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      CreateApplicationRequestError(const CreateApplicationRequestError&);
      CreateApplicationRequestError(const DeviceAssignmentSequence i_invalidAssignments);
      CreateApplicationRequestError& operator=(const CreateApplicationRequestError&);
      virtual ~CreateApplicationRequestError();
      virtual void _raise() const;
      static CreateApplicationRequestError* _downcast(::CORBA::Exception*);
      static const CreateApplicationRequestError* _downcast(const ::CORBA::Exception*);
      static inline CreateApplicationRequestError* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CreateApplicationRequestError;

    class CreateApplicationError : public ::CORBA::UserException {
    public:
      
      ErrorNumberType errorNumber;

      ::CORBA::String_member msg;

    

      inline CreateApplicationError() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      CreateApplicationError(const CreateApplicationError&);
      CreateApplicationError(ErrorNumberType i_errorNumber, const char* i_msg);
      CreateApplicationError& operator=(const CreateApplicationError&);
      virtual ~CreateApplicationError();
      virtual void _raise() const;
      static CreateApplicationError* _downcast(::CORBA::Exception*);
      static const CreateApplicationError* _downcast(const ::CORBA::Exception*);
      static inline CreateApplicationError* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CreateApplicationError;

    class InvalidInitConfiguration : public ::CORBA::UserException {
    public:
      
      Properties invalidProperties;

    

      inline InvalidInitConfiguration() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      InvalidInitConfiguration(const InvalidInitConfiguration&);
      InvalidInitConfiguration(const Properties i_invalidProperties);
      InvalidInitConfiguration& operator=(const InvalidInitConfiguration&);
      virtual ~InvalidInitConfiguration();
      virtual void _raise() const;
      static InvalidInitConfiguration* _downcast(::CORBA::Exception*);
      static const InvalidInitConfiguration* _downcast(const ::CORBA::Exception*);
      static inline InvalidInitConfiguration* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_InvalidInitConfiguration;

    struct ExecutionAffinityType {
      typedef _CORBA_ConstrType_Variable_Var<ExecutionAffinityType> _var_type;

      
      ::CORBA::String_member componentId;

      ::CORBA::String_member processCollocation;

      ULongSeq coreAffinities;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef ExecutionAffinityType::_var_type ExecutionAffinityType_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< ExecutionAffinityType,ExecutionAffinityType_var > ExecutionAffinityType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ExecutionAffinityType;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ExecutionAffinitySequence;

    class ExecutionAffinitySequence_var;

    class ExecutionAffinitySequence : public _CORBA_Unbounded_Sequence< ExecutionAffinityType >  {
    public:
      typedef ExecutionAffinitySequence_var _var_type;
      inline ExecutionAffinitySequence() {}
      inline ExecutionAffinitySequence(const ExecutionAffinitySequence& _s)
        : _CORBA_Unbounded_Sequence< ExecutionAffinityType > (_s) {}

      inline ExecutionAffinitySequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< ExecutionAffinityType > (_max) {}
      inline ExecutionAffinitySequence(_CORBA_ULong _max, _CORBA_ULong _len, ExecutionAffinityType* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< ExecutionAffinityType > (_max, _len, _val, _rel) {}

    

      inline ExecutionAffinitySequence& operator = (const ExecutionAffinitySequence& _s) {
        _CORBA_Unbounded_Sequence< ExecutionAffinityType > ::operator=(_s);
        return *this;
      }
    };

    class ExecutionAffinitySequence_out;

    class ExecutionAffinitySequence_var {
    public:
      inline ExecutionAffinitySequence_var() : _pd_seq(0) {}
      inline ExecutionAffinitySequence_var(ExecutionAffinitySequence* _s) : _pd_seq(_s) {}
      inline ExecutionAffinitySequence_var(const ExecutionAffinitySequence_var& _s) {
        if (_s._pd_seq)  _pd_seq = new ExecutionAffinitySequence(*_s._pd_seq);
        else             _pd_seq = 0;
      }
      inline ~ExecutionAffinitySequence_var() { if (_pd_seq)  delete _pd_seq; }
        
      inline ExecutionAffinitySequence_var& operator = (ExecutionAffinitySequence* _s) {
        if (_pd_seq)  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline ExecutionAffinitySequence_var& operator = (const ExecutionAffinitySequence_var& _s) {
        if (_s._pd_seq) {
          if (!_pd_seq)  _pd_seq = new ExecutionAffinitySequence;
          *_pd_seq = *_s._pd_seq;
        } else if (_pd_seq) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ExecutionAffinityType& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline ExecutionAffinitySequence* operator -> () { return _pd_seq; }
      inline const ExecutionAffinitySequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator ExecutionAffinitySequence& () const { return *_pd_seq; }
#else
      inline operator const ExecutionAffinitySequence& () const { return *_pd_seq; }
      inline operator ExecutionAffinitySequence& () { return *_pd_seq; }
#endif
        
      inline const ExecutionAffinitySequence& in() const { return *_pd_seq; }
      inline ExecutionAffinitySequence&       inout()    { return *_pd_seq; }
      inline ExecutionAffinitySequence*&      out() {
        if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline ExecutionAffinitySequence* _retn() { ExecutionAffinitySequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class ExecutionAffinitySequence_out;
      
    private:
      ExecutionAffinitySequence* _pd_seq;
    };

    class ExecutionAffinitySequence_out {
    public:
      inline ExecutionAffinitySequence_out(ExecutionAffinitySequence*& _s) : _data(_s) { _data = 0; }
      inline ExecutionAffinitySequence_out(ExecutionAffinitySequence_var& _s)
        : _data(_s._pd_seq) { _s = (ExecutionAffinitySequence*) 0; }
      inline ExecutionAffinitySequence_out(const ExecutionAffinitySequence_out& _s) : _data(_s._data) {}
      inline ExecutionAffinitySequence_out& operator = (const ExecutionAffinitySequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline ExecutionAffinitySequence_out& operator = (ExecutionAffinitySequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator ExecutionAffinitySequence*&()  { return _data; }
      inline ExecutionAffinitySequence*& ptr()       { return _data; }
      inline ExecutionAffinitySequence* operator->() { return _data; }

      inline ExecutionAffinityType& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      ExecutionAffinitySequence*& _data;

    private:
      ExecutionAffinitySequence_out();
      ExecutionAffinitySequence_out& operator=(const ExecutionAffinitySequence_var&);
    };

  
  };

  class _objref_ApplicationFactory :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    char* name();
    ComponentType* create(const char* name, const ::CF::Properties& initConfiguration, const ::CF::DeviceAssignmentSequence& deviceAssignments, const ::CF::Properties& deploymentDependencies, const ::CF::ApplicationFactory::ExecutionAffinitySequence& executionAffinityAssignments);

    // Constructors
    inline _objref_ApplicationFactory()  { _PR_setobj(0); }  // nil
    _objref_ApplicationFactory(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_ApplicationFactory();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_ApplicationFactory(const _objref_ApplicationFactory&);
    _objref_ApplicationFactory& operator = (const _objref_ApplicationFactory&);
    // not implemented

    friend class ApplicationFactory;
  };

  class _pof_ApplicationFactory : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_ApplicationFactory() : _OMNI_NS(proxyObjectFactory)(ApplicationFactory::_PD_repoId) {}
    virtual ~_pof_ApplicationFactory();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_ApplicationFactory :
    public virtual omniServant
  {
  public:
    virtual ~_impl_ApplicationFactory();

    virtual char* name() = 0;
    virtual ComponentType* create(const char* name, const ::CF::Properties& initConfiguration, const ::CF::DeviceAssignmentSequence& deviceAssignments, const ::CF::Properties& deploymentDependencies, const ::CF::ApplicationFactory::ExecutionAffinitySequence& executionAffinityAssignments) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ApplicationFactory;

_CORBA_MODULE_END



_CORBA_MODULE POA_CF
_CORBA_MODULE_BEG

  class ApplicationFactory :
    public virtual CF::_impl_ApplicationFactory,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~ApplicationFactory();

    inline ::CF::ApplicationFactory_ptr _this() {
      return (::CF::ApplicationFactory_ptr) _do_this(::CF::ApplicationFactory::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_CF
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const CF::ApplicationFactory::CreateApplicationRequestError& _s);
void operator<<=(::CORBA::Any& _a, const CF::ApplicationFactory::CreateApplicationRequestError* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::ApplicationFactory::CreateApplicationRequestError*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::ApplicationFactory::CreateApplicationError& _s);
void operator<<=(::CORBA::Any& _a, const CF::ApplicationFactory::CreateApplicationError* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::ApplicationFactory::CreateApplicationError*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::ApplicationFactory::InvalidInitConfiguration& _s);
void operator<<=(::CORBA::Any& _a, const CF::ApplicationFactory::InvalidInitConfiguration* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::ApplicationFactory::InvalidInitConfiguration*& _sp);

extern void operator<<=(::CORBA::Any& _a, const CF::ApplicationFactory::ExecutionAffinityType& _s);
extern void operator<<=(::CORBA::Any& _a, CF::ApplicationFactory::ExecutionAffinityType* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::ApplicationFactory::ExecutionAffinityType*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::ApplicationFactory::ExecutionAffinityType*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::ApplicationFactory::ExecutionAffinitySequence& _s);
void operator<<=(::CORBA::Any& _a, CF::ApplicationFactory::ExecutionAffinitySequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::ApplicationFactory::ExecutionAffinitySequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::ApplicationFactory::ExecutionAffinitySequence*& _sp);

void operator<<=(::CORBA::Any& _a, CF::ApplicationFactory_ptr _s);
void operator<<=(::CORBA::Any& _a, CF::ApplicationFactory_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::ApplicationFactory_ptr& _s);



inline void
CF::ApplicationFactory::_marshalObjRef(::CF::ApplicationFactory_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_CFApplicationFactory
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_CFApplicationFactory
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_CFApplicationFactory
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_CFApplicationFactory
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFApplicationFactory
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_CFApplicationFactory
#endif

#endif  // __CFApplicationFactory_hh__

