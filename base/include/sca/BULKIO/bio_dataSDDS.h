// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __bio__dataSDDS_hh__
#define __bio__dataSDDS_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_bio__dataSDDS
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_bio__dataSDDS
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_bio__dataSDDS
#endif



#ifndef __CFProperties_hh_EXTERNAL_GUARD__
#define __CFProperties_hh_EXTERNAL_GUARD__
#include <sca/CF/CFProperties.h>
#endif
#ifndef __CFPrimitiveTypes_hh_EXTERNAL_GUARD__
#define __CFPrimitiveTypes_hh_EXTERNAL_GUARD__
#include <CFPrimitiveTypes.h>
#endif
#ifndef __CFULongLongSeq_hh_EXTERNAL_GUARD__
#define __CFULongLongSeq_hh_EXTERNAL_GUARD__
#include <CFULongLongSeq.h>
#endif
#ifndef __CFBooleanSeq_hh_EXTERNAL_GUARD__
#define __CFBooleanSeq_hh_EXTERNAL_GUARD__
#include <CFBooleanSeq.h>
#endif
#ifndef __CFULongSeq_hh_EXTERNAL_GUARD__
#define __CFULongSeq_hh_EXTERNAL_GUARD__
#include <CFULongSeq.h>
#endif
#ifndef __CFLongLongSeq_hh_EXTERNAL_GUARD__
#define __CFLongLongSeq_hh_EXTERNAL_GUARD__
#include <CFLongLongSeq.h>
#endif
#ifndef __CFCharSeq_hh_EXTERNAL_GUARD__
#define __CFCharSeq_hh_EXTERNAL_GUARD__
#include <CFCharSeq.h>
#endif
#ifndef __CFUShortSeq_hh_EXTERNAL_GUARD__
#define __CFUShortSeq_hh_EXTERNAL_GUARD__
#include <CFUShortSeq.h>
#endif
#ifndef __CFLongSeq_hh_EXTERNAL_GUARD__
#define __CFLongSeq_hh_EXTERNAL_GUARD__
#include <CFLongSeq.h>
#endif
#ifndef __CFDoubleSeq_hh_EXTERNAL_GUARD__
#define __CFDoubleSeq_hh_EXTERNAL_GUARD__
#include <CFDoubleSeq.h>
#endif
#ifndef __CFShortSeq_hh_EXTERNAL_GUARD__
#define __CFShortSeq_hh_EXTERNAL_GUARD__
#include <CFShortSeq.h>
#endif
#ifndef __CFFloatSeq_hh_EXTERNAL_GUARD__
#define __CFFloatSeq_hh_EXTERNAL_GUARD__
#include <CFFloatSeq.h>
#endif
#ifndef __CFOctetSeq_hh_EXTERNAL_GUARD__
#define __CFOctetSeq_hh_EXTERNAL_GUARD__
#include <CFOctetSeq.h>
#endif
#ifndef __CFStringSeq_hh_EXTERNAL_GUARD__
#define __CFStringSeq_hh_EXTERNAL_GUARD__
#include <CFStringSeq.h>
#endif
#ifndef __CFCommonTypes_hh_EXTERNAL_GUARD__
#define __CFCommonTypes_hh_EXTERNAL_GUARD__
#include <sca/CF/CFCommonTypes.h>
#endif
#ifndef __Port_hh_EXTERNAL_GUARD__
#define __Port_hh_EXTERNAL_GUARD__
#include <sca/CF/Port.h>
#endif
#ifndef __QueryablePort_hh_EXTERNAL_GUARD__
#define __QueryablePort_hh_EXTERNAL_GUARD__
#include <sca/CF/QueryablePort.h>
#endif
#ifndef __AdditionalTypes_hh_EXTERNAL_GUARD__
#define __AdditionalTypes_hh_EXTERNAL_GUARD__
#include <sca/CF/AdditionalTypes.h>
#endif
#ifndef __bulkioDataTypes_hh_EXTERNAL_GUARD__
#define __bulkioDataTypes_hh_EXTERNAL_GUARD__
#include <sca/BULKIO/bulkioDataTypes.h>
#endif
#ifndef __bio__runtimeStats_hh_EXTERNAL_GUARD__
#define __bio__runtimeStats_hh_EXTERNAL_GUARD__
#include <sca/BULKIO/bio_runtimeStats.h>
#endif
#ifndef __bio__updateSRI_hh_EXTERNAL_GUARD__
#define __bio__updateSRI_hh_EXTERNAL_GUARD__
#include <sca/BULKIO/bio_updateSRI.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE BULKIO

_CORBA_MODULE_BEG

  enum SDDSDataDigraph { SDDS_SP, SDDS_SB, SDDS_SI, SDDS_SL, SDDS_SX, SDDS_SF, SDDS_SD, SDDS_CB, SDDS_CI, SDDS_CL, SDDS_CX, SDDS_CF, SDDS_CD /*, __max_SDDSDataDigraph=0xffffffff */ };
  typedef SDDSDataDigraph& SDDSDataDigraph_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_SDDSDataDigraph;

  struct SDDSStreamDefinition {
    typedef _CORBA_ConstrType_Variable_Var<SDDSStreamDefinition> _var_type;

    
    ::CORBA::String_member id;

    SDDSDataDigraph dataFormat;

    ::CORBA::String_member multicastAddress;

    ::CORBA::ULong vlan;

    ::CORBA::ULong port;

    ::CORBA::ULong sampleRate;

    ::CORBA::Boolean timeTagValid;

    ::CORBA::String_member privateInfo;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef SDDSStreamDefinition::_var_type SDDSStreamDefinition_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< SDDSStreamDefinition,SDDSStreamDefinition_var > SDDSStreamDefinition_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_SDDSStreamDefinition;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_SDDSStreamSequence;

  class SDDSStreamSequence_var;

  class SDDSStreamSequence : public _CORBA_Unbounded_Sequence< SDDSStreamDefinition >  {
  public:
    typedef SDDSStreamSequence_var _var_type;
    inline SDDSStreamSequence() {}
    inline SDDSStreamSequence(const SDDSStreamSequence& _s)
      : _CORBA_Unbounded_Sequence< SDDSStreamDefinition > (_s) {}

    inline SDDSStreamSequence(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< SDDSStreamDefinition > (_max) {}
    inline SDDSStreamSequence(_CORBA_ULong _max, _CORBA_ULong _len, SDDSStreamDefinition* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< SDDSStreamDefinition > (_max, _len, _val, _rel) {}

  

    inline SDDSStreamSequence& operator = (const SDDSStreamSequence& _s) {
      _CORBA_Unbounded_Sequence< SDDSStreamDefinition > ::operator=(_s);
      return *this;
    }
  };

  class SDDSStreamSequence_out;

  class SDDSStreamSequence_var {
  public:
    inline SDDSStreamSequence_var() : _pd_seq(0) {}
    inline SDDSStreamSequence_var(SDDSStreamSequence* _s) : _pd_seq(_s) {}
    inline SDDSStreamSequence_var(const SDDSStreamSequence_var& _s) {
      if (_s._pd_seq)  _pd_seq = new SDDSStreamSequence(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~SDDSStreamSequence_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline SDDSStreamSequence_var& operator = (SDDSStreamSequence* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline SDDSStreamSequence_var& operator = (const SDDSStreamSequence_var& _s) {
      if (_s._pd_seq) {
        if (!_pd_seq)  _pd_seq = new SDDSStreamSequence;
        *_pd_seq = *_s._pd_seq;
      } else if (_pd_seq) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline SDDSStreamDefinition& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline SDDSStreamSequence* operator -> () { return _pd_seq; }
    inline const SDDSStreamSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator SDDSStreamSequence& () const { return *_pd_seq; }
#else
    inline operator const SDDSStreamSequence& () const { return *_pd_seq; }
    inline operator SDDSStreamSequence& () { return *_pd_seq; }
#endif
      
    inline const SDDSStreamSequence& in() const { return *_pd_seq; }
    inline SDDSStreamSequence&       inout()    { return *_pd_seq; }
    inline SDDSStreamSequence*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline SDDSStreamSequence* _retn() { SDDSStreamSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class SDDSStreamSequence_out;
    
  private:
    SDDSStreamSequence* _pd_seq;
  };

  class SDDSStreamSequence_out {
  public:
    inline SDDSStreamSequence_out(SDDSStreamSequence*& _s) : _data(_s) { _data = 0; }
    inline SDDSStreamSequence_out(SDDSStreamSequence_var& _s)
      : _data(_s._pd_seq) { _s = (SDDSStreamSequence*) 0; }
    inline SDDSStreamSequence_out(const SDDSStreamSequence_out& _s) : _data(_s._data) {}
    inline SDDSStreamSequence_out& operator = (const SDDSStreamSequence_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline SDDSStreamSequence_out& operator = (SDDSStreamSequence* _s) {
      _data = _s;
      return *this;
    }
    inline operator SDDSStreamSequence*&()  { return _data; }
    inline SDDSStreamSequence*& ptr()       { return _data; }
    inline SDDSStreamSequence* operator->() { return _data; }

    inline SDDSStreamDefinition& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    SDDSStreamSequence*& _data;

  private:
    SDDSStreamSequence_out();
    SDDSStreamSequence_out& operator=(const SDDSStreamSequence_var&);
  };

#ifndef __BULKIO_mdataSDDS__
#define __BULKIO_mdataSDDS__
  class dataSDDS;
  class _objref_dataSDDS;
  class _impl_dataSDDS;
  
  typedef _objref_dataSDDS* dataSDDS_ptr;
  typedef dataSDDS_ptr dataSDDSRef;

  class dataSDDS_Helper {
  public:
    typedef dataSDDS_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_dataSDDS, dataSDDS_Helper> dataSDDS_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_dataSDDS,dataSDDS_Helper > dataSDDS_out;

#endif

  // interface dataSDDS
  class dataSDDS {
  public:
    // Declarations for this interface type.
    typedef dataSDDS_ptr _ptr_type;
    typedef dataSDDS_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    enum InputUsageState { IDLE, ACTIVE, BUSY /*, __max_InputUsageState=0xffffffff */ };
    typedef InputUsageState& InputUsageState_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_InputUsageState;

    class AttachError : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member msg;

    

      inline AttachError() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      AttachError(const AttachError&);
      AttachError(const char* i_msg);
      AttachError& operator=(const AttachError&);
      virtual ~AttachError();
      virtual void _raise() const;
      static AttachError* _downcast(::CORBA::Exception*);
      static const AttachError* _downcast(const ::CORBA::Exception*);
      static inline AttachError* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_AttachError;

    class DetachError : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member msg;

    

      inline DetachError() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      DetachError(const DetachError&);
      DetachError(const char* i_msg);
      DetachError& operator=(const DetachError&);
      virtual ~DetachError();
      virtual void _raise() const;
      static DetachError* _downcast(::CORBA::Exception*);
      static const DetachError* _downcast(const ::CORBA::Exception*);
      static inline DetachError* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_DetachError;

    class StreamInputError : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member msg;

    

      inline StreamInputError() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      StreamInputError(const StreamInputError&);
      StreamInputError(const char* i_msg);
      StreamInputError& operator=(const StreamInputError&);
      virtual ~StreamInputError();
      virtual void _raise() const;
      static StreamInputError* _downcast(::CORBA::Exception*);
      static const StreamInputError* _downcast(const ::CORBA::Exception*);
      static inline StreamInputError* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_StreamInputError;

  
  };

  class _objref_dataSDDS :
    public virtual _objref_ProvidesPortStatisticsProvider
  {
  public:
    // IDL operations
    dataSDDS::InputUsageState usageState();
    SDDSStreamSequence* attachedStreams();
    StringSequence* attachmentIds();
    char* attach(const ::BULKIO::SDDSStreamDefinition& stream, const char* userid);
    void detach(const char* attachId);
    SDDSStreamDefinition* getStreamDefinition(const char* attachId);
    char* getUser(const char* attachId);
    StreamSRISequence* attachedSRIs();
    void pushSRI(const ::BULKIO::StreamSRI& H, const ::BULKIO::PrecisionUTCTime& T);

    // Constructors
    inline _objref_dataSDDS()  { _PR_setobj(0); }  // nil
    _objref_dataSDDS(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_dataSDDS();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_dataSDDS(const _objref_dataSDDS&);
    _objref_dataSDDS& operator = (const _objref_dataSDDS&);
    // not implemented

    friend class dataSDDS;
  };

  class _pof_dataSDDS : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_dataSDDS() : _OMNI_NS(proxyObjectFactory)(dataSDDS::_PD_repoId) {}
    virtual ~_pof_dataSDDS();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_dataSDDS :
    public virtual _impl_ProvidesPortStatisticsProvider
  {
  public:
    virtual ~_impl_dataSDDS();

    virtual dataSDDS::InputUsageState usageState() = 0;
    virtual SDDSStreamSequence* attachedStreams() = 0;
    virtual StringSequence* attachmentIds() = 0;
    virtual char* attach(const ::BULKIO::SDDSStreamDefinition& stream, const char* userid) = 0;
    virtual void detach(const char* attachId) = 0;
    virtual SDDSStreamDefinition* getStreamDefinition(const char* attachId) = 0;
    virtual char* getUser(const char* attachId) = 0;
    virtual StreamSRISequence* attachedSRIs() = 0;
    virtual void pushSRI(const ::BULKIO::StreamSRI& H, const ::BULKIO::PrecisionUTCTime& T) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_dataSDDS;

_CORBA_MODULE_END



_CORBA_MODULE POA_BULKIO
_CORBA_MODULE_BEG

  class dataSDDS :
    public virtual BULKIO::_impl_dataSDDS,
    public virtual ProvidesPortStatisticsProvider
  {
  public:
    virtual ~dataSDDS();

    inline ::BULKIO::dataSDDS_ptr _this() {
      return (::BULKIO::dataSDDS_ptr) _do_this(::BULKIO::dataSDDS::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_BULKIO
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(BULKIO::SDDSDataDigraph _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (BULKIO::SDDSDataDigraph& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= BULKIO::SDDS_CD) {
    _e = (BULKIO::SDDSDataDigraph) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, BULKIO::SDDSDataDigraph _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, BULKIO::SDDSDataDigraph& _s);

extern void operator<<=(::CORBA::Any& _a, const BULKIO::SDDSStreamDefinition& _s);
extern void operator<<=(::CORBA::Any& _a, BULKIO::SDDSStreamDefinition* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, BULKIO::SDDSStreamDefinition*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const BULKIO::SDDSStreamDefinition*& _sp);

void operator<<=(::CORBA::Any& _a, const BULKIO::SDDSStreamSequence& _s);
void operator<<=(::CORBA::Any& _a, BULKIO::SDDSStreamSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, BULKIO::SDDSStreamSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const BULKIO::SDDSStreamSequence*& _sp);

inline void operator >>=(BULKIO::dataSDDS::InputUsageState _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (BULKIO::dataSDDS::InputUsageState& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= BULKIO::dataSDDS::BUSY) {
    _e = (BULKIO::dataSDDS::InputUsageState) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, BULKIO::dataSDDS::InputUsageState _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, BULKIO::dataSDDS::InputUsageState& _s);

void operator<<=(::CORBA::Any& _a, const BULKIO::dataSDDS::AttachError& _s);
void operator<<=(::CORBA::Any& _a, const BULKIO::dataSDDS::AttachError* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const BULKIO::dataSDDS::AttachError*& _sp);

void operator<<=(::CORBA::Any& _a, const BULKIO::dataSDDS::DetachError& _s);
void operator<<=(::CORBA::Any& _a, const BULKIO::dataSDDS::DetachError* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const BULKIO::dataSDDS::DetachError*& _sp);

void operator<<=(::CORBA::Any& _a, const BULKIO::dataSDDS::StreamInputError& _s);
void operator<<=(::CORBA::Any& _a, const BULKIO::dataSDDS::StreamInputError* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const BULKIO::dataSDDS::StreamInputError*& _sp);

void operator<<=(::CORBA::Any& _a, BULKIO::dataSDDS_ptr _s);
void operator<<=(::CORBA::Any& _a, BULKIO::dataSDDS_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, BULKIO::dataSDDS_ptr& _s);



inline void
BULKIO::dataSDDS::_marshalObjRef(::BULKIO::dataSDDS_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_bio__dataSDDS
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_bio__dataSDDS
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_bio__dataSDDS
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_bio__dataSDDS
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_bio__dataSDDS
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_bio__dataSDDS
#endif

#endif  // __bio__dataSDDS_hh__

