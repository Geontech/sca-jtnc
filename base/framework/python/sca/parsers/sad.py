#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Wed Nov 28 18:40:08 2018 by generateDS.py version 2.30.8.
# Python 2.7.5 (default, Jul 13 2018, 13:06:57)  [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)]
#
# Command line options:
#   ('-f', '')
#   ('--silence', '')
#   ('-m', '')
#   ('-o', 'sca/parsers/sad.py')
#
# Command line arguments:
#   ../../../xml/xsd/softwareassembly.4.1.xsd
#
# Command line:
#   /usr/bin/generateDS.py -f --silence -m -o "sca/parsers/sad.py" ../../../xml/xsd/softwareassembly.4.1.xsd
#
# Current working directory (os.getcwd()):
#   python
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class softwareassembly(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, sca_version=None, version=None, description=None, componentfiles=None, partitioning=None, deploymentdependencies=None, assemblycontroller=None, connections=None, externalports=None, deploymentprefs=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.name = _cast(None, name)
        self.sca_version = _cast(None, sca_version)
        self.version = _cast(None, version)
        self.description = description
        self.componentfiles = componentfiles
        self.partitioning = partitioning
        self.deploymentdependencies = deploymentdependencies
        self.assemblycontroller = assemblycontroller
        self.connections = connections
        self.externalports = externalports
        self.deploymentprefs = deploymentprefs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, softwareassembly)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if softwareassembly.subclass:
            return softwareassembly.subclass(*args_, **kwargs_)
        else:
            return softwareassembly(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    descriptionProp = property(get_description, set_description)
    def get_componentfiles(self):
        return self.componentfiles
    def set_componentfiles(self, componentfiles):
        self.componentfiles = componentfiles
    componentfilesProp = property(get_componentfiles, set_componentfiles)
    def get_partitioning(self):
        return self.partitioning
    def set_partitioning(self, partitioning):
        self.partitioning = partitioning
    partitioningProp = property(get_partitioning, set_partitioning)
    def get_deploymentdependencies(self):
        return self.deploymentdependencies
    def set_deploymentdependencies(self, deploymentdependencies):
        self.deploymentdependencies = deploymentdependencies
    deploymentdependenciesProp = property(get_deploymentdependencies, set_deploymentdependencies)
    def get_assemblycontroller(self):
        return self.assemblycontroller
    def set_assemblycontroller(self, assemblycontroller):
        self.assemblycontroller = assemblycontroller
    assemblycontrollerProp = property(get_assemblycontroller, set_assemblycontroller)
    def get_connections(self):
        return self.connections
    def set_connections(self, connections):
        self.connections = connections
    connectionsProp = property(get_connections, set_connections)
    def get_externalports(self):
        return self.externalports
    def set_externalports(self, externalports):
        self.externalports = externalports
    externalportsProp = property(get_externalports, set_externalports)
    def get_deploymentprefs(self):
        return self.deploymentprefs
    def set_deploymentprefs(self, deploymentprefs):
        self.deploymentprefs = deploymentprefs
    deploymentprefsProp = property(get_deploymentprefs, set_deploymentprefs)
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    nameProp = property(get_name, set_name)
    def get_sca_version(self):
        return self.sca_version
    def set_sca_version(self, sca_version):
        self.sca_version = sca_version
    sca_versionProp = property(get_sca_version, set_sca_version)
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    versionProp = property(get_version, set_version)
    def hasContent_(self):
        if (
            self.description is not None or
            self.componentfiles is not None or
            self.partitioning is not None or
            self.deploymentdependencies is not None or
            self.assemblycontroller is not None or
            self.connections is not None or
            self.externalports is not None or
            self.deploymentprefs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='softwareassembly', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('softwareassembly')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='softwareassembly')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='softwareassembly', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='softwareassembly'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.sca_version is not None and 'sca_version' not in already_processed:
            already_processed.add('sca_version')
            outfile.write(' sca_version=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.sca_version), input_name='sca_version')), ))
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.version), input_name='version')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='softwareassembly', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.description is not None:
            self.description.export(outfile, level, namespaceprefix_='t:', name_='description', pretty_print=pretty_print)
        if self.componentfiles is not None:
            self.componentfiles.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='componentfiles', pretty_print=pretty_print)
        if self.partitioning is not None:
            self.partitioning.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='partitioning', pretty_print=pretty_print)
        if self.deploymentdependencies is not None:
            self.deploymentdependencies.export(outfile, level, namespaceprefix_='t:', name_='deploymentdependencies', pretty_print=pretty_print)
        if self.assemblycontroller is not None:
            self.assemblycontroller.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='assemblycontroller', pretty_print=pretty_print)
        if self.connections is not None:
            self.connections.export(outfile, level, namespaceprefix_='t:', name_='connections', pretty_print=pretty_print)
        if self.externalports is not None:
            self.externalports.export(outfile, level, namespaceprefix_='t:', name_='externalports', pretty_print=pretty_print)
        if self.deploymentprefs is not None:
            self.deploymentprefs.export(outfile, level, namespaceprefix_='t:', name_='deploymentprefs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('sca_version', node)
        if value is not None and 'sca_version' not in already_processed:
            already_processed.add('sca_version')
            self.sca_version = value
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            obj_ = description.factory(parent_object_=self)
            obj_.build(child_)
            self.description = obj_
            obj_.original_tagname_ = 'description'
        elif nodeName_ == 'componentfiles':
            obj_ = componentfiles.factory(parent_object_=self)
            obj_.build(child_)
            self.componentfiles = obj_
            obj_.original_tagname_ = 'componentfiles'
        elif nodeName_ == 'partitioning':
            obj_ = partitioning.factory(parent_object_=self)
            obj_.build(child_)
            self.partitioning = obj_
            obj_.original_tagname_ = 'partitioning'
        elif nodeName_ == 'deploymentdependencies':
            obj_ = deploymentdependencies.factory(parent_object_=self)
            obj_.build(child_)
            self.deploymentdependencies = obj_
            obj_.original_tagname_ = 'deploymentdependencies'
        elif nodeName_ == 'assemblycontroller':
            obj_ = assemblycontroller.factory(parent_object_=self)
            obj_.build(child_)
            self.assemblycontroller = obj_
            obj_.original_tagname_ = 'assemblycontroller'
        elif nodeName_ == 'connections':
            obj_ = connections.factory(parent_object_=self)
            obj_.build(child_)
            self.connections = obj_
            obj_.original_tagname_ = 'connections'
        elif nodeName_ == 'externalports':
            obj_ = externalports.factory(parent_object_=self)
            obj_.build(child_)
            self.externalports = obj_
            obj_.original_tagname_ = 'externalports'
        elif nodeName_ == 'deploymentprefs':
            obj_ = deploymentprefs.factory(parent_object_=self)
            obj_.build(child_)
            self.deploymentprefs = obj_
            obj_.original_tagname_ = 'deploymentprefs'
# end class softwareassembly


class description(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None, mixedclass_=None, content_=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, description)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if description.subclass:
            return description.subclass(*args_, **kwargs_)
        else:
            return description(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='description', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('description')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='description')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='description'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='description', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        pass
# end class description


class componentfiles(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, componentfile=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if componentfile is None:
            self.componentfile = []
        else:
            self.componentfile = componentfile
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, componentfiles)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if componentfiles.subclass:
            return componentfiles.subclass(*args_, **kwargs_)
        else:
            return componentfiles(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_componentfile(self):
        return self.componentfile
    def set_componentfile(self, componentfile):
        self.componentfile = componentfile
    def add_componentfile(self, value):
        self.componentfile.append(value)
    def add_componentfile(self, value):
        self.componentfile.append(value)
    def insert_componentfile_at(self, index, value):
        self.componentfile.insert(index, value)
    def replace_componentfile_at(self, index, value):
        self.componentfile[index] = value
    componentfileProp = property(get_componentfile, set_componentfile)
    def hasContent_(self):
        if (
            self.componentfile
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentfiles', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('componentfiles')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='componentfiles')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='componentfiles', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='componentfiles'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentfiles', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for componentfile_ in self.componentfile:
            componentfile_.export(outfile, level, namespaceprefix_='t:', name_='componentfile', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'componentfile':
            obj_ = componentfile.factory(parent_object_=self)
            obj_.build(child_)
            self.componentfile.append(obj_)
            obj_.original_tagname_ = 'componentfile'
# end class componentfiles


class componentfile(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _id=None, type_=None, localfile=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self._id = _cast(None, _id)
        self.type_ = _cast(None, type_)
        self.localfile = localfile
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, componentfile)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if componentfile.subclass:
            return componentfile.subclass(*args_, **kwargs_)
        else:
            return componentfile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_localfile(self):
        return self.localfile
    def set_localfile(self, localfile):
        self.localfile = localfile
    localfileProp = property(get_localfile, set_localfile)
    def get_id(self):
        return self._id
    def set_id(self, _id):
        self._id = _id
    idProp = property(get_id, set_id)
    def get_type(self):
        return self.type_
    def set_type(self, type_):
        self.type_ = type_
    typeProp = property(get_type, set_type)
    def hasContent_(self):
        if (
            self.localfile is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentfile', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('componentfile')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='componentfile')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='componentfile', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='componentfile'):
        if self._id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self._id), input_name='id')), ))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.type_), input_name='type')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentfile', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.localfile is not None:
            self.localfile.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='localfile', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self._id = value
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'localfile':
            obj_ = localfile.factory(parent_object_=self)
            obj_.build(child_)
            self.localfile = obj_
            obj_.original_tagname_ = 'localfile'
# end class componentfile


class localfile(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.name = _cast(None, name)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, localfile)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if localfile.subclass:
            return localfile.subclass(*args_, **kwargs_)
        else:
            return localfile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    nameProp = property(get_name, set_name)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='localfile', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('localfile')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='localfile')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='localfile', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='localfile'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='localfile', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class localfile


class partitioning(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, componentplacement=None, hostcollocation=None, assemblyplacement=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if componentplacement is None:
            self.componentplacement = []
        else:
            self.componentplacement = componentplacement
        if hostcollocation is None:
            self.hostcollocation = []
        else:
            self.hostcollocation = hostcollocation
        if assemblyplacement is None:
            self.assemblyplacement = []
        else:
            self.assemblyplacement = assemblyplacement
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, partitioning)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if partitioning.subclass:
            return partitioning.subclass(*args_, **kwargs_)
        else:
            return partitioning(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_componentplacement(self):
        return self.componentplacement
    def set_componentplacement(self, componentplacement):
        self.componentplacement = componentplacement
    def add_componentplacement(self, value):
        self.componentplacement.append(value)
    def add_componentplacement(self, value):
        self.componentplacement.append(value)
    def insert_componentplacement_at(self, index, value):
        self.componentplacement.insert(index, value)
    def replace_componentplacement_at(self, index, value):
        self.componentplacement[index] = value
    componentplacementProp = property(get_componentplacement, set_componentplacement)
    def get_hostcollocation(self):
        return self.hostcollocation
    def set_hostcollocation(self, hostcollocation):
        self.hostcollocation = hostcollocation
    def add_hostcollocation(self, value):
        self.hostcollocation.append(value)
    def add_hostcollocation(self, value):
        self.hostcollocation.append(value)
    def insert_hostcollocation_at(self, index, value):
        self.hostcollocation.insert(index, value)
    def replace_hostcollocation_at(self, index, value):
        self.hostcollocation[index] = value
    hostcollocationProp = property(get_hostcollocation, set_hostcollocation)
    def get_assemblyplacement(self):
        return self.assemblyplacement
    def set_assemblyplacement(self, assemblyplacement):
        self.assemblyplacement = assemblyplacement
    def add_assemblyplacement(self, value):
        self.assemblyplacement.append(value)
    def add_assemblyplacement(self, value):
        self.assemblyplacement.append(value)
    def insert_assemblyplacement_at(self, index, value):
        self.assemblyplacement.insert(index, value)
    def replace_assemblyplacement_at(self, index, value):
        self.assemblyplacement[index] = value
    assemblyplacementProp = property(get_assemblyplacement, set_assemblyplacement)
    def hasContent_(self):
        if (
            self.componentplacement or
            self.hostcollocation or
            self.assemblyplacement
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='partitioning', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('partitioning')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='partitioning')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='partitioning', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='partitioning'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='partitioning', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for componentplacement_ in self.componentplacement:
            componentplacement_.export(outfile, level, namespaceprefix_='t:', name_='componentplacement', pretty_print=pretty_print)
        for hostcollocation_ in self.hostcollocation:
            hostcollocation_.export(outfile, level, namespaceprefix_='t:', name_='hostcollocation', pretty_print=pretty_print)
        for assemblyplacement_ in self.assemblyplacement:
            assemblyplacement_.export(outfile, level, namespaceprefix_='t:', name_='assemblyplacement', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'componentplacement':
            obj_ = componentplacement.factory(parent_object_=self)
            obj_.build(child_)
            self.componentplacement.append(obj_)
            obj_.original_tagname_ = 'componentplacement'
        elif nodeName_ == 'hostcollocation':
            obj_ = hostcollocation.factory(parent_object_=self)
            obj_.build(child_)
            self.hostcollocation.append(obj_)
            obj_.original_tagname_ = 'hostcollocation'
        elif nodeName_ == 'assemblyplacement':
            obj_ = assemblyplacement.factory(parent_object_=self)
            obj_.build(child_)
            self.assemblyplacement.append(obj_)
            obj_.original_tagname_ = 'assemblyplacement'
# end class partitioning


class componentplacement(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, componentfileref=None, componentinstantiation=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.componentfileref = componentfileref
        if componentinstantiation is None:
            self.componentinstantiation = []
        else:
            self.componentinstantiation = componentinstantiation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, componentplacement)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if componentplacement.subclass:
            return componentplacement.subclass(*args_, **kwargs_)
        else:
            return componentplacement(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_componentfileref(self):
        return self.componentfileref
    def set_componentfileref(self, componentfileref):
        self.componentfileref = componentfileref
    componentfilerefProp = property(get_componentfileref, set_componentfileref)
    def get_componentinstantiation(self):
        return self.componentinstantiation
    def set_componentinstantiation(self, componentinstantiation):
        self.componentinstantiation = componentinstantiation
    def add_componentinstantiation(self, value):
        self.componentinstantiation.append(value)
    def add_componentinstantiation(self, value):
        self.componentinstantiation.append(value)
    def insert_componentinstantiation_at(self, index, value):
        self.componentinstantiation.insert(index, value)
    def replace_componentinstantiation_at(self, index, value):
        self.componentinstantiation[index] = value
    componentinstantiationProp = property(get_componentinstantiation, set_componentinstantiation)
    def hasContent_(self):
        if (
            self.componentfileref is not None or
            self.componentinstantiation
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentplacement', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('componentplacement')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='componentplacement')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='componentplacement', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='componentplacement'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentplacement', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.componentfileref is not None:
            self.componentfileref.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='componentfileref', pretty_print=pretty_print)
        for componentinstantiation_ in self.componentinstantiation:
            componentinstantiation_.export(outfile, level, namespaceprefix_='t:', name_='componentinstantiation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'componentfileref':
            obj_ = componentfileref.factory(parent_object_=self)
            obj_.build(child_)
            self.componentfileref = obj_
            obj_.original_tagname_ = 'componentfileref'
        elif nodeName_ == 'componentinstantiation':
            obj_ = componentinstantiation.factory(parent_object_=self)
            obj_.build(child_)
            self.componentinstantiation.append(obj_)
            obj_.original_tagname_ = 'componentinstantiation'
# end class componentplacement


class componentfileref(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.refid = _cast(None, refid)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, componentfileref)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if componentfileref.subclass:
            return componentfileref.subclass(*args_, **kwargs_)
        else:
            return componentfileref(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_refid(self):
        return self.refid
    def set_refid(self, refid):
        self.refid = refid
    refidProp = property(get_refid, set_refid)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentfileref', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('componentfileref')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='componentfileref')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='componentfileref', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='componentfileref'):
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.refid), input_name='refid')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentfileref', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class componentfileref


class componentinstantiation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _id=None, processcollocation=None, stringifiedobjectref=None, componentproperties=None, coreaffinity=None, deploymentdependencies=None, componentfactoryref=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self._id = _cast(None, _id)
        self.processcollocation = _cast(None, processcollocation)
        self.stringifiedobjectref = _cast(None, stringifiedobjectref)
        self.componentproperties = componentproperties
        if coreaffinity is None:
            self.coreaffinity = []
        else:
            self.coreaffinity = coreaffinity
        self.deploymentdependencies = deploymentdependencies
        self.componentfactoryref = componentfactoryref
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, componentinstantiation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if componentinstantiation.subclass:
            return componentinstantiation.subclass(*args_, **kwargs_)
        else:
            return componentinstantiation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_componentproperties(self):
        return self.componentproperties
    def set_componentproperties(self, componentproperties):
        self.componentproperties = componentproperties
    componentpropertiesProp = property(get_componentproperties, set_componentproperties)
    def get_coreaffinity(self):
        return self.coreaffinity
    def set_coreaffinity(self, coreaffinity):
        self.coreaffinity = coreaffinity
    def add_coreaffinity(self, value):
        self.coreaffinity.append(value)
    def add_coreaffinity(self, value):
        self.coreaffinity.append(value)
    def insert_coreaffinity_at(self, index, value):
        self.coreaffinity.insert(index, value)
    def replace_coreaffinity_at(self, index, value):
        self.coreaffinity[index] = value
    coreaffinityProp = property(get_coreaffinity, set_coreaffinity)
    def get_deploymentdependencies(self):
        return self.deploymentdependencies
    def set_deploymentdependencies(self, deploymentdependencies):
        self.deploymentdependencies = deploymentdependencies
    deploymentdependenciesProp = property(get_deploymentdependencies, set_deploymentdependencies)
    def get_componentfactoryref(self):
        return self.componentfactoryref
    def set_componentfactoryref(self, componentfactoryref):
        self.componentfactoryref = componentfactoryref
    componentfactoryrefProp = property(get_componentfactoryref, set_componentfactoryref)
    def get_id(self):
        return self._id
    def set_id(self, _id):
        self._id = _id
    idProp = property(get_id, set_id)
    def get_processcollocation(self):
        return self.processcollocation
    def set_processcollocation(self, processcollocation):
        self.processcollocation = processcollocation
    processcollocationProp = property(get_processcollocation, set_processcollocation)
    def get_stringifiedobjectref(self):
        return self.stringifiedobjectref
    def set_stringifiedobjectref(self, stringifiedobjectref):
        self.stringifiedobjectref = stringifiedobjectref
    stringifiedobjectrefProp = property(get_stringifiedobjectref, set_stringifiedobjectref)
    def hasContent_(self):
        if (
            self.componentproperties is not None or
            self.coreaffinity or
            self.deploymentdependencies is not None or
            self.componentfactoryref is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentinstantiation', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('componentinstantiation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='componentinstantiation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='componentinstantiation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='componentinstantiation'):
        if self._id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self._id), input_name='id')), ))
        if self.processcollocation is not None and 'processcollocation' not in already_processed:
            already_processed.add('processcollocation')
            outfile.write(' processcollocation=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.processcollocation), input_name='processcollocation')), ))
        if self.stringifiedobjectref is not None and 'stringifiedobjectref' not in already_processed:
            already_processed.add('stringifiedobjectref')
            outfile.write(' stringifiedobjectref=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.stringifiedobjectref), input_name='stringifiedobjectref')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentinstantiation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.componentproperties is not None:
            self.componentproperties.export(outfile, level, namespaceprefix_='t:', name_='componentproperties', pretty_print=pretty_print)
        for coreaffinity_ in self.coreaffinity:
            coreaffinity_.export(outfile, level, namespaceprefix_='t:', name_='coreaffinity', pretty_print=pretty_print)
        if self.deploymentdependencies is not None:
            self.deploymentdependencies.export(outfile, level, namespaceprefix_='t:', name_='deploymentdependencies', pretty_print=pretty_print)
        if self.componentfactoryref is not None:
            self.componentfactoryref.export(outfile, level, namespaceprefix_='t:', name_='componentfactoryref', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self._id = value
        value = find_attr_value_('processcollocation', node)
        if value is not None and 'processcollocation' not in already_processed:
            already_processed.add('processcollocation')
            self.processcollocation = value
        value = find_attr_value_('stringifiedobjectref', node)
        if value is not None and 'stringifiedobjectref' not in already_processed:
            already_processed.add('stringifiedobjectref')
            self.stringifiedobjectref = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'componentproperties':
            obj_ = componentproperties.factory(parent_object_=self)
            obj_.build(child_)
            self.componentproperties = obj_
            obj_.original_tagname_ = 'componentproperties'
        elif nodeName_ == 'coreaffinity':
            obj_ = coreaffinity.factory(parent_object_=self)
            obj_.build(child_)
            self.coreaffinity.append(obj_)
            obj_.original_tagname_ = 'coreaffinity'
        elif nodeName_ == 'deploymentdependencies':
            obj_ = deploymentdependencies.factory(parent_object_=self)
            obj_.build(child_)
            self.deploymentdependencies = obj_
            obj_.original_tagname_ = 'deploymentdependencies'
        elif nodeName_ == 'componentfactoryref':
            obj_ = componentfactoryref.factory(parent_object_=self)
            obj_.build(child_)
            self.componentfactoryref = obj_
            obj_.original_tagname_ = 'componentfactoryref'
# end class componentinstantiation


class coreaffinity(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None, mixedclass_=None, content_=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, coreaffinity)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if coreaffinity.subclass:
            return coreaffinity.subclass(*args_, **kwargs_)
        else:
            return coreaffinity(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='coreaffinity', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('coreaffinity')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='coreaffinity')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='coreaffinity'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='coreaffinity', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        pass
# end class coreaffinity


class componentfactoryref(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, componentfactoryproperties=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.refid = _cast(None, refid)
        self.componentfactoryproperties = componentfactoryproperties
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, componentfactoryref)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if componentfactoryref.subclass:
            return componentfactoryref.subclass(*args_, **kwargs_)
        else:
            return componentfactoryref(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_componentfactoryproperties(self):
        return self.componentfactoryproperties
    def set_componentfactoryproperties(self, componentfactoryproperties):
        self.componentfactoryproperties = componentfactoryproperties
    componentfactorypropertiesProp = property(get_componentfactoryproperties, set_componentfactoryproperties)
    def get_refid(self):
        return self.refid
    def set_refid(self, refid):
        self.refid = refid
    refidProp = property(get_refid, set_refid)
    def hasContent_(self):
        if (
            self.componentfactoryproperties is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentfactoryref', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('componentfactoryref')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='componentfactoryref')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='componentfactoryref', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='componentfactoryref'):
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.refid), input_name='refid')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentfactoryref', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.componentfactoryproperties is not None:
            self.componentfactoryproperties.export(outfile, level, namespaceprefix_='t:', name_='componentfactoryproperties', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'componentfactoryproperties':
            obj_ = componentfactoryproperties.factory(parent_object_=self)
            obj_.build(child_)
            self.componentfactoryproperties = obj_
            obj_.original_tagname_ = 'componentfactoryproperties'
# end class componentfactoryref


class componentfactoryproperties(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, simpleref=None, simplesequenceref=None, structref=None, structsequenceref=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if simpleref is None:
            self.simpleref = []
        else:
            self.simpleref = simpleref
        if simplesequenceref is None:
            self.simplesequenceref = []
        else:
            self.simplesequenceref = simplesequenceref
        if structref is None:
            self.structref = []
        else:
            self.structref = structref
        if structsequenceref is None:
            self.structsequenceref = []
        else:
            self.structsequenceref = structsequenceref
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, componentfactoryproperties)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if componentfactoryproperties.subclass:
            return componentfactoryproperties.subclass(*args_, **kwargs_)
        else:
            return componentfactoryproperties(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_simpleref(self):
        return self.simpleref
    def set_simpleref(self, simpleref):
        self.simpleref = simpleref
    def add_simpleref(self, value):
        self.simpleref.append(value)
    def add_simpleref(self, value):
        self.simpleref.append(value)
    def insert_simpleref_at(self, index, value):
        self.simpleref.insert(index, value)
    def replace_simpleref_at(self, index, value):
        self.simpleref[index] = value
    simplerefProp = property(get_simpleref, set_simpleref)
    def get_simplesequenceref(self):
        return self.simplesequenceref
    def set_simplesequenceref(self, simplesequenceref):
        self.simplesequenceref = simplesequenceref
    def add_simplesequenceref(self, value):
        self.simplesequenceref.append(value)
    def add_simplesequenceref(self, value):
        self.simplesequenceref.append(value)
    def insert_simplesequenceref_at(self, index, value):
        self.simplesequenceref.insert(index, value)
    def replace_simplesequenceref_at(self, index, value):
        self.simplesequenceref[index] = value
    simplesequencerefProp = property(get_simplesequenceref, set_simplesequenceref)
    def get_structref(self):
        return self.structref
    def set_structref(self, structref):
        self.structref = structref
    def add_structref(self, value):
        self.structref.append(value)
    def add_structref(self, value):
        self.structref.append(value)
    def insert_structref_at(self, index, value):
        self.structref.insert(index, value)
    def replace_structref_at(self, index, value):
        self.structref[index] = value
    structrefProp = property(get_structref, set_structref)
    def get_structsequenceref(self):
        return self.structsequenceref
    def set_structsequenceref(self, structsequenceref):
        self.structsequenceref = structsequenceref
    def add_structsequenceref(self, value):
        self.structsequenceref.append(value)
    def add_structsequenceref(self, value):
        self.structsequenceref.append(value)
    def insert_structsequenceref_at(self, index, value):
        self.structsequenceref.insert(index, value)
    def replace_structsequenceref_at(self, index, value):
        self.structsequenceref[index] = value
    structsequencerefProp = property(get_structsequenceref, set_structsequenceref)
    def hasContent_(self):
        if (
            self.simpleref or
            self.simplesequenceref or
            self.structref or
            self.structsequenceref
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentfactoryproperties', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('componentfactoryproperties')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='componentfactoryproperties')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='componentfactoryproperties', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='componentfactoryproperties'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentfactoryproperties', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for simpleref_ in self.simpleref:
            simpleref_.export(outfile, level, namespaceprefix_='t:', name_='simpleref', pretty_print=pretty_print)
        for simplesequenceref_ in self.simplesequenceref:
            simplesequenceref_.export(outfile, level, namespaceprefix_='t:', name_='simplesequenceref', pretty_print=pretty_print)
        for structref_ in self.structref:
            structref_.export(outfile, level, namespaceprefix_='t:', name_='structref', pretty_print=pretty_print)
        for structsequenceref_ in self.structsequenceref:
            structsequenceref_.export(outfile, level, namespaceprefix_='t:', name_='structsequenceref', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'simpleref':
            obj_ = simpleref.factory(parent_object_=self)
            obj_.build(child_)
            self.simpleref.append(obj_)
            obj_.original_tagname_ = 'simpleref'
        elif nodeName_ == 'simplesequenceref':
            obj_ = simplesequenceref.factory(parent_object_=self)
            obj_.build(child_)
            self.simplesequenceref.append(obj_)
            obj_.original_tagname_ = 'simplesequenceref'
        elif nodeName_ == 'structref':
            obj_ = structref.factory(parent_object_=self)
            obj_.build(child_)
            self.structref.append(obj_)
            obj_.original_tagname_ = 'structref'
        elif nodeName_ == 'structsequenceref':
            obj_ = structsequenceref.factory(parent_object_=self)
            obj_.build(child_)
            self.structsequenceref.append(obj_)
            obj_.original_tagname_ = 'structsequenceref'
# end class componentfactoryproperties


class simpleref(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, value=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.refid = _cast(None, refid)
        self.value = _cast(None, value)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, simpleref)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if simpleref.subclass:
            return simpleref.subclass(*args_, **kwargs_)
        else:
            return simpleref(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_refid(self):
        return self.refid
    def set_refid(self, refid):
        self.refid = refid
    refidProp = property(get_refid, set_refid)
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    valueProp = property(get_value, set_value)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='simpleref', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('simpleref')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='simpleref')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='simpleref', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='simpleref'):
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.refid), input_name='refid')), ))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='simpleref', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class simpleref


class simplesequenceref(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, values=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.refid = _cast(None, refid)
        self.values = values
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, simplesequenceref)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if simplesequenceref.subclass:
            return simplesequenceref.subclass(*args_, **kwargs_)
        else:
            return simplesequenceref(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_values(self):
        return self.values
    def set_values(self, values):
        self.values = values
    valuesProp = property(get_values, set_values)
    def get_refid(self):
        return self.refid
    def set_refid(self, refid):
        self.refid = refid
    refidProp = property(get_refid, set_refid)
    def hasContent_(self):
        if (
            self.values is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='simplesequenceref', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('simplesequenceref')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='simplesequenceref')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='simplesequenceref', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='simplesequenceref'):
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.refid), input_name='refid')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='simplesequenceref', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.values is not None:
            self.values.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='values', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'values':
            obj_ = values.factory(parent_object_=self)
            obj_.build(child_)
            self.values = obj_
            obj_.original_tagname_ = 'values'
# end class simplesequenceref


class structref(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, simpleref=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.refid = _cast(None, refid)
        if simpleref is None:
            self.simpleref = []
        else:
            self.simpleref = simpleref
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, structref)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if structref.subclass:
            return structref.subclass(*args_, **kwargs_)
        else:
            return structref(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_simpleref(self):
        return self.simpleref
    def set_simpleref(self, simpleref):
        self.simpleref = simpleref
    def add_simpleref(self, value):
        self.simpleref.append(value)
    def add_simpleref(self, value):
        self.simpleref.append(value)
    def insert_simpleref_at(self, index, value):
        self.simpleref.insert(index, value)
    def replace_simpleref_at(self, index, value):
        self.simpleref[index] = value
    simplerefProp = property(get_simpleref, set_simpleref)
    def get_refid(self):
        return self.refid
    def set_refid(self, refid):
        self.refid = refid
    refidProp = property(get_refid, set_refid)
    def hasContent_(self):
        if (
            self.simpleref
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='structref', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('structref')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='structref')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='structref', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='structref'):
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.refid), input_name='refid')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='structref', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for simpleref_ in self.simpleref:
            simpleref_.export(outfile, level, namespaceprefix_='t:', name_='simpleref', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'simpleref':
            obj_ = simpleref.factory(parent_object_=self)
            obj_.build(child_)
            self.simpleref.append(obj_)
            obj_.original_tagname_ = 'simpleref'
# end class structref


class structsequenceref(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, structvalue=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.refid = _cast(None, refid)
        if structvalue is None:
            self.structvalue = []
        else:
            self.structvalue = structvalue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, structsequenceref)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if structsequenceref.subclass:
            return structsequenceref.subclass(*args_, **kwargs_)
        else:
            return structsequenceref(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_structvalue(self):
        return self.structvalue
    def set_structvalue(self, structvalue):
        self.structvalue = structvalue
    def add_structvalue(self, value):
        self.structvalue.append(value)
    def add_structvalue(self, value):
        self.structvalue.append(value)
    def insert_structvalue_at(self, index, value):
        self.structvalue.insert(index, value)
    def replace_structvalue_at(self, index, value):
        self.structvalue[index] = value
    structvalueProp = property(get_structvalue, set_structvalue)
    def get_refid(self):
        return self.refid
    def set_refid(self, refid):
        self.refid = refid
    refidProp = property(get_refid, set_refid)
    def hasContent_(self):
        if (
            self.structvalue
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='structsequenceref', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('structsequenceref')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='structsequenceref')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='structsequenceref', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='structsequenceref'):
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.refid), input_name='refid')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='structsequenceref', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for structvalue_ in self.structvalue:
            structvalue_.export(outfile, level, namespaceprefix_='t:', name_='structvalue', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'structvalue':
            obj_ = structvalue.factory(parent_object_=self)
            obj_.build(child_)
            self.structvalue.append(obj_)
            obj_.original_tagname_ = 'structvalue'
# end class structsequenceref


class structvalue(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, simpleref=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if simpleref is None:
            self.simpleref = []
        else:
            self.simpleref = simpleref
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, structvalue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if structvalue.subclass:
            return structvalue.subclass(*args_, **kwargs_)
        else:
            return structvalue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_simpleref(self):
        return self.simpleref
    def set_simpleref(self, simpleref):
        self.simpleref = simpleref
    def add_simpleref(self, value):
        self.simpleref.append(value)
    def add_simpleref(self, value):
        self.simpleref.append(value)
    def insert_simpleref_at(self, index, value):
        self.simpleref.insert(index, value)
    def replace_simpleref_at(self, index, value):
        self.simpleref[index] = value
    simplerefProp = property(get_simpleref, set_simpleref)
    def hasContent_(self):
        if (
            self.simpleref
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='structvalue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('structvalue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='structvalue')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='structvalue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='structvalue'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='structvalue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for simpleref_ in self.simpleref:
            simpleref_.export(outfile, level, namespaceprefix_='t:', name_='simpleref', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'simpleref':
            obj_ = simpleref.factory(parent_object_=self)
            obj_.build(child_)
            self.simpleref.append(obj_)
            obj_.original_tagname_ = 'simpleref'
# end class structvalue


class values(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if value is None:
            self.value = []
        else:
            self.value = value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, values)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if values.subclass:
            return values.subclass(*args_, **kwargs_)
        else:
            return values(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def add_value(self, value):
        self.value.append(value)
    def add_value(self, value):
        self.value.append(value)
    def insert_value_at(self, index, value):
        self.value.insert(index, value)
    def replace_value_at(self, index, value):
        self.value[index] = value
    valueProp = property(get_value, set_value)
    def hasContent_(self):
        if (
            self.value
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='values', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('values')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='values')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='values', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='values'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='values', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for value_ in self.value:
            value_.export(outfile, level, namespaceprefix_='t:', name_='value', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'value':
            obj_ = value.factory(parent_object_=self)
            obj_.build(child_)
            self.value.append(obj_)
            obj_.original_tagname_ = 'value'
# end class values


class value(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None, mixedclass_=None, content_=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, value)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if value.subclass:
            return value.subclass(*args_, **kwargs_)
        else:
            return value(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='value', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('value')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='value')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='value'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='value', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        pass
# end class value


class hostcollocation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _id=None, name=None, componentplacement=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self._id = _cast(None, _id)
        self.name = _cast(None, name)
        if componentplacement is None:
            self.componentplacement = []
        else:
            self.componentplacement = componentplacement
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, hostcollocation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if hostcollocation.subclass:
            return hostcollocation.subclass(*args_, **kwargs_)
        else:
            return hostcollocation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_componentplacement(self):
        return self.componentplacement
    def set_componentplacement(self, componentplacement):
        self.componentplacement = componentplacement
    def add_componentplacement(self, value):
        self.componentplacement.append(value)
    def add_componentplacement(self, value):
        self.componentplacement.append(value)
    def insert_componentplacement_at(self, index, value):
        self.componentplacement.insert(index, value)
    def replace_componentplacement_at(self, index, value):
        self.componentplacement[index] = value
    componentplacementProp = property(get_componentplacement, set_componentplacement)
    def get_id(self):
        return self._id
    def set_id(self, _id):
        self._id = _id
    idProp = property(get_id, set_id)
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    nameProp = property(get_name, set_name)
    def hasContent_(self):
        if (
            self.componentplacement
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='hostcollocation', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('hostcollocation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='hostcollocation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='hostcollocation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='hostcollocation'):
        if self._id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self._id), input_name='id')), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='hostcollocation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for componentplacement_ in self.componentplacement:
            componentplacement_.export(outfile, level, namespaceprefix_='t:', name_='componentplacement', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self._id = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'componentplacement':
            obj_ = componentplacement.factory(parent_object_=self)
            obj_.build(child_)
            self.componentplacement.append(obj_)
            obj_.original_tagname_ = 'componentplacement'
# end class hostcollocation


class assemblyplacement(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, componentfileref=None, assemblyinstantiation=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.componentfileref = componentfileref
        if assemblyinstantiation is None:
            self.assemblyinstantiation = []
        else:
            self.assemblyinstantiation = assemblyinstantiation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, assemblyplacement)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if assemblyplacement.subclass:
            return assemblyplacement.subclass(*args_, **kwargs_)
        else:
            return assemblyplacement(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_componentfileref(self):
        return self.componentfileref
    def set_componentfileref(self, componentfileref):
        self.componentfileref = componentfileref
    componentfilerefProp = property(get_componentfileref, set_componentfileref)
    def get_assemblyinstantiation(self):
        return self.assemblyinstantiation
    def set_assemblyinstantiation(self, assemblyinstantiation):
        self.assemblyinstantiation = assemblyinstantiation
    def add_assemblyinstantiation(self, value):
        self.assemblyinstantiation.append(value)
    def add_assemblyinstantiation(self, value):
        self.assemblyinstantiation.append(value)
    def insert_assemblyinstantiation_at(self, index, value):
        self.assemblyinstantiation.insert(index, value)
    def replace_assemblyinstantiation_at(self, index, value):
        self.assemblyinstantiation[index] = value
    assemblyinstantiationProp = property(get_assemblyinstantiation, set_assemblyinstantiation)
    def hasContent_(self):
        if (
            self.componentfileref is not None or
            self.assemblyinstantiation
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='assemblyplacement', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('assemblyplacement')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='assemblyplacement')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='assemblyplacement', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='assemblyplacement'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='assemblyplacement', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.componentfileref is not None:
            self.componentfileref.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='componentfileref', pretty_print=pretty_print)
        for assemblyinstantiation_ in self.assemblyinstantiation:
            assemblyinstantiation_.export(outfile, level, namespaceprefix_='t:', name_='assemblyinstantiation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'componentfileref':
            obj_ = componentfileref.factory(parent_object_=self)
            obj_.build(child_)
            self.componentfileref = obj_
            obj_.original_tagname_ = 'componentfileref'
        elif nodeName_ == 'assemblyinstantiation':
            obj_ = assemblyinstantiation.factory(parent_object_=self)
            obj_.build(child_)
            self.assemblyinstantiation.append(obj_)
            obj_.original_tagname_ = 'assemblyinstantiation'
# end class assemblyplacement


class assemblyinstantiation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _id=None, componentproperties=None, deviceassignments=None, deploymentdependencies=None, executionaffinityassignments=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self._id = _cast(None, _id)
        self.componentproperties = componentproperties
        self.deviceassignments = deviceassignments
        self.deploymentdependencies = deploymentdependencies
        self.executionaffinityassignments = executionaffinityassignments
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, assemblyinstantiation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if assemblyinstantiation.subclass:
            return assemblyinstantiation.subclass(*args_, **kwargs_)
        else:
            return assemblyinstantiation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_componentproperties(self):
        return self.componentproperties
    def set_componentproperties(self, componentproperties):
        self.componentproperties = componentproperties
    componentpropertiesProp = property(get_componentproperties, set_componentproperties)
    def get_deviceassignments(self):
        return self.deviceassignments
    def set_deviceassignments(self, deviceassignments):
        self.deviceassignments = deviceassignments
    deviceassignmentsProp = property(get_deviceassignments, set_deviceassignments)
    def get_deploymentdependencies(self):
        return self.deploymentdependencies
    def set_deploymentdependencies(self, deploymentdependencies):
        self.deploymentdependencies = deploymentdependencies
    deploymentdependenciesProp = property(get_deploymentdependencies, set_deploymentdependencies)
    def get_executionaffinityassignments(self):
        return self.executionaffinityassignments
    def set_executionaffinityassignments(self, executionaffinityassignments):
        self.executionaffinityassignments = executionaffinityassignments
    executionaffinityassignmentsProp = property(get_executionaffinityassignments, set_executionaffinityassignments)
    def get_id(self):
        return self._id
    def set_id(self, _id):
        self._id = _id
    idProp = property(get_id, set_id)
    def hasContent_(self):
        if (
            self.componentproperties is not None or
            self.deviceassignments is not None or
            self.deploymentdependencies is not None or
            self.executionaffinityassignments is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='assemblyinstantiation', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('assemblyinstantiation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='assemblyinstantiation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='assemblyinstantiation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='assemblyinstantiation'):
        if self._id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self._id), input_name='id')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='assemblyinstantiation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.componentproperties is not None:
            self.componentproperties.export(outfile, level, namespaceprefix_='t:', name_='componentproperties', pretty_print=pretty_print)
        if self.deviceassignments is not None:
            self.deviceassignments.export(outfile, level, namespaceprefix_='t:', name_='deviceassignments', pretty_print=pretty_print)
        if self.deploymentdependencies is not None:
            self.deploymentdependencies.export(outfile, level, namespaceprefix_='t:', name_='deploymentdependencies', pretty_print=pretty_print)
        if self.executionaffinityassignments is not None:
            self.executionaffinityassignments.export(outfile, level, namespaceprefix_='t:', name_='executionaffinityassignments', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'componentproperties':
            obj_ = componentproperties.factory(parent_object_=self)
            obj_.build(child_)
            self.componentproperties = obj_
            obj_.original_tagname_ = 'componentproperties'
        elif nodeName_ == 'deviceassignments':
            obj_ = deviceassignments.factory(parent_object_=self)
            obj_.build(child_)
            self.deviceassignments = obj_
            obj_.original_tagname_ = 'deviceassignments'
        elif nodeName_ == 'deploymentdependencies':
            obj_ = deploymentdependencies.factory(parent_object_=self)
            obj_.build(child_)
            self.deploymentdependencies = obj_
            obj_.original_tagname_ = 'deploymentdependencies'
        elif nodeName_ == 'executionaffinityassignments':
            obj_ = executionaffinityassignments.factory(parent_object_=self)
            obj_.build(child_)
            self.executionaffinityassignments = obj_
            obj_.original_tagname_ = 'executionaffinityassignments'
# end class assemblyinstantiation


class componentproperties(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, simpleref=None, simplesequenceref=None, structref=None, structsequenceref=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if simpleref is None:
            self.simpleref = []
        else:
            self.simpleref = simpleref
        if simplesequenceref is None:
            self.simplesequenceref = []
        else:
            self.simplesequenceref = simplesequenceref
        if structref is None:
            self.structref = []
        else:
            self.structref = structref
        if structsequenceref is None:
            self.structsequenceref = []
        else:
            self.structsequenceref = structsequenceref
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, componentproperties)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if componentproperties.subclass:
            return componentproperties.subclass(*args_, **kwargs_)
        else:
            return componentproperties(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_simpleref(self):
        return self.simpleref
    def set_simpleref(self, simpleref):
        self.simpleref = simpleref
    def add_simpleref(self, value):
        self.simpleref.append(value)
    def add_simpleref(self, value):
        self.simpleref.append(value)
    def insert_simpleref_at(self, index, value):
        self.simpleref.insert(index, value)
    def replace_simpleref_at(self, index, value):
        self.simpleref[index] = value
    simplerefProp = property(get_simpleref, set_simpleref)
    def get_simplesequenceref(self):
        return self.simplesequenceref
    def set_simplesequenceref(self, simplesequenceref):
        self.simplesequenceref = simplesequenceref
    def add_simplesequenceref(self, value):
        self.simplesequenceref.append(value)
    def add_simplesequenceref(self, value):
        self.simplesequenceref.append(value)
    def insert_simplesequenceref_at(self, index, value):
        self.simplesequenceref.insert(index, value)
    def replace_simplesequenceref_at(self, index, value):
        self.simplesequenceref[index] = value
    simplesequencerefProp = property(get_simplesequenceref, set_simplesequenceref)
    def get_structref(self):
        return self.structref
    def set_structref(self, structref):
        self.structref = structref
    def add_structref(self, value):
        self.structref.append(value)
    def add_structref(self, value):
        self.structref.append(value)
    def insert_structref_at(self, index, value):
        self.structref.insert(index, value)
    def replace_structref_at(self, index, value):
        self.structref[index] = value
    structrefProp = property(get_structref, set_structref)
    def get_structsequenceref(self):
        return self.structsequenceref
    def set_structsequenceref(self, structsequenceref):
        self.structsequenceref = structsequenceref
    def add_structsequenceref(self, value):
        self.structsequenceref.append(value)
    def add_structsequenceref(self, value):
        self.structsequenceref.append(value)
    def insert_structsequenceref_at(self, index, value):
        self.structsequenceref.insert(index, value)
    def replace_structsequenceref_at(self, index, value):
        self.structsequenceref[index] = value
    structsequencerefProp = property(get_structsequenceref, set_structsequenceref)
    def hasContent_(self):
        if (
            self.simpleref or
            self.simplesequenceref or
            self.structref or
            self.structsequenceref
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentproperties', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('componentproperties')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='componentproperties')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='componentproperties', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='componentproperties'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentproperties', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for simpleref_ in self.simpleref:
            simpleref_.export(outfile, level, namespaceprefix_='t:', name_='simpleref', pretty_print=pretty_print)
        for simplesequenceref_ in self.simplesequenceref:
            simplesequenceref_.export(outfile, level, namespaceprefix_='t:', name_='simplesequenceref', pretty_print=pretty_print)
        for structref_ in self.structref:
            structref_.export(outfile, level, namespaceprefix_='t:', name_='structref', pretty_print=pretty_print)
        for structsequenceref_ in self.structsequenceref:
            structsequenceref_.export(outfile, level, namespaceprefix_='t:', name_='structsequenceref', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'simpleref':
            obj_ = simpleref.factory(parent_object_=self)
            obj_.build(child_)
            self.simpleref.append(obj_)
            obj_.original_tagname_ = 'simpleref'
        elif nodeName_ == 'simplesequenceref':
            obj_ = simplesequenceref.factory(parent_object_=self)
            obj_.build(child_)
            self.simplesequenceref.append(obj_)
            obj_.original_tagname_ = 'simplesequenceref'
        elif nodeName_ == 'structref':
            obj_ = structref.factory(parent_object_=self)
            obj_.build(child_)
            self.structref.append(obj_)
            obj_.original_tagname_ = 'structref'
        elif nodeName_ == 'structsequenceref':
            obj_ = structsequenceref.factory(parent_object_=self)
            obj_.build(child_)
            self.structsequenceref.append(obj_)
            obj_.original_tagname_ = 'structsequenceref'
# end class componentproperties


class deviceassignments(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, deviceassignment=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if deviceassignment is None:
            self.deviceassignment = []
        else:
            self.deviceassignment = deviceassignment
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, deviceassignments)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if deviceassignments.subclass:
            return deviceassignments.subclass(*args_, **kwargs_)
        else:
            return deviceassignments(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_deviceassignment(self):
        return self.deviceassignment
    def set_deviceassignment(self, deviceassignment):
        self.deviceassignment = deviceassignment
    def add_deviceassignment(self, value):
        self.deviceassignment.append(value)
    def add_deviceassignment(self, value):
        self.deviceassignment.append(value)
    def insert_deviceassignment_at(self, index, value):
        self.deviceassignment.insert(index, value)
    def replace_deviceassignment_at(self, index, value):
        self.deviceassignment[index] = value
    deviceassignmentProp = property(get_deviceassignment, set_deviceassignment)
    def hasContent_(self):
        if (
            self.deviceassignment
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='deviceassignments', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('deviceassignments')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='deviceassignments')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='deviceassignments', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='deviceassignments'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='deviceassignments', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for deviceassignment_ in self.deviceassignment:
            deviceassignment_.export(outfile, level, namespaceprefix_='t:', name_='deviceassignment', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'deviceassignment':
            obj_ = deviceassignment.factory(parent_object_=self)
            obj_.build(child_)
            self.deviceassignment.append(obj_)
            obj_.original_tagname_ = 'deviceassignment'
# end class deviceassignments


class deviceassignment(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, componentid=None, assignedDeviceid=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.componentid = _cast(None, componentid)
        self.assignedDeviceid = _cast(None, assignedDeviceid)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, deviceassignment)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if deviceassignment.subclass:
            return deviceassignment.subclass(*args_, **kwargs_)
        else:
            return deviceassignment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_componentid(self):
        return self.componentid
    def set_componentid(self, componentid):
        self.componentid = componentid
    componentidProp = property(get_componentid, set_componentid)
    def get_assignedDeviceid(self):
        return self.assignedDeviceid
    def set_assignedDeviceid(self, assignedDeviceid):
        self.assignedDeviceid = assignedDeviceid
    assignedDeviceidProp = property(get_assignedDeviceid, set_assignedDeviceid)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='deviceassignment', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('deviceassignment')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='deviceassignment')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='deviceassignment', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='deviceassignment'):
        if self.componentid is not None and 'componentid' not in already_processed:
            already_processed.add('componentid')
            outfile.write(' componentid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.componentid), input_name='componentid')), ))
        if self.assignedDeviceid is not None and 'assignedDeviceid' not in already_processed:
            already_processed.add('assignedDeviceid')
            outfile.write(' assignedDeviceid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.assignedDeviceid), input_name='assignedDeviceid')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='deviceassignment', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('componentid', node)
        if value is not None and 'componentid' not in already_processed:
            already_processed.add('componentid')
            self.componentid = value
        value = find_attr_value_('assignedDeviceid', node)
        if value is not None and 'assignedDeviceid' not in already_processed:
            already_processed.add('assignedDeviceid')
            self.assignedDeviceid = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class deviceassignment


class deploymentdependencies(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, propertyref=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if propertyref is None:
            self.propertyref = []
        else:
            self.propertyref = propertyref
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, deploymentdependencies)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if deploymentdependencies.subclass:
            return deploymentdependencies.subclass(*args_, **kwargs_)
        else:
            return deploymentdependencies(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_propertyref(self):
        return self.propertyref
    def set_propertyref(self, propertyref):
        self.propertyref = propertyref
    def add_propertyref(self, value):
        self.propertyref.append(value)
    def add_propertyref(self, value):
        self.propertyref.append(value)
    def insert_propertyref_at(self, index, value):
        self.propertyref.insert(index, value)
    def replace_propertyref_at(self, index, value):
        self.propertyref[index] = value
    propertyrefProp = property(get_propertyref, set_propertyref)
    def hasContent_(self):
        if (
            self.propertyref
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='deploymentdependencies', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('deploymentdependencies')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='deploymentdependencies')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='deploymentdependencies', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='deploymentdependencies'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='deploymentdependencies', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for propertyref_ in self.propertyref:
            propertyref_.export(outfile, level, namespaceprefix_='t:', name_='propertyref', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'propertyref':
            obj_ = propertyref.factory(parent_object_=self)
            obj_.build(child_)
            self.propertyref.append(obj_)
            obj_.original_tagname_ = 'propertyref'
# end class deploymentdependencies


class executionaffinityassignments(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, executionaffinityassignment=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if executionaffinityassignment is None:
            self.executionaffinityassignment = []
        else:
            self.executionaffinityassignment = executionaffinityassignment
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, executionaffinityassignments)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if executionaffinityassignments.subclass:
            return executionaffinityassignments.subclass(*args_, **kwargs_)
        else:
            return executionaffinityassignments(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_executionaffinityassignment(self):
        return self.executionaffinityassignment
    def set_executionaffinityassignment(self, executionaffinityassignment):
        self.executionaffinityassignment = executionaffinityassignment
    def add_executionaffinityassignment(self, value):
        self.executionaffinityassignment.append(value)
    def add_executionaffinityassignment(self, value):
        self.executionaffinityassignment.append(value)
    def insert_executionaffinityassignment_at(self, index, value):
        self.executionaffinityassignment.insert(index, value)
    def replace_executionaffinityassignment_at(self, index, value):
        self.executionaffinityassignment[index] = value
    executionaffinityassignmentProp = property(get_executionaffinityassignment, set_executionaffinityassignment)
    def hasContent_(self):
        if (
            self.executionaffinityassignment
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='executionaffinityassignments', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('executionaffinityassignments')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='executionaffinityassignments')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='executionaffinityassignments', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='executionaffinityassignments'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='executionaffinityassignments', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for executionaffinityassignment_ in self.executionaffinityassignment:
            executionaffinityassignment_.export(outfile, level, namespaceprefix_='t:', name_='executionaffinityassignment', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'executionaffinityassignment':
            obj_ = executionaffinityassignment.factory(parent_object_=self)
            obj_.build(child_)
            self.executionaffinityassignment.append(obj_)
            obj_.original_tagname_ = 'executionaffinityassignment'
# end class executionaffinityassignments


class executionaffinityassignment(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, componentid=None, processcollocation=None, coreaffinity=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.componentid = _cast(None, componentid)
        self.processcollocation = _cast(None, processcollocation)
        if coreaffinity is None:
            self.coreaffinity = []
        else:
            self.coreaffinity = coreaffinity
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, executionaffinityassignment)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if executionaffinityassignment.subclass:
            return executionaffinityassignment.subclass(*args_, **kwargs_)
        else:
            return executionaffinityassignment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_coreaffinity(self):
        return self.coreaffinity
    def set_coreaffinity(self, coreaffinity):
        self.coreaffinity = coreaffinity
    def add_coreaffinity(self, value):
        self.coreaffinity.append(value)
    def add_coreaffinity(self, value):
        self.coreaffinity.append(value)
    def insert_coreaffinity_at(self, index, value):
        self.coreaffinity.insert(index, value)
    def replace_coreaffinity_at(self, index, value):
        self.coreaffinity[index] = value
    coreaffinityProp = property(get_coreaffinity, set_coreaffinity)
    def get_componentid(self):
        return self.componentid
    def set_componentid(self, componentid):
        self.componentid = componentid
    componentidProp = property(get_componentid, set_componentid)
    def get_processcollocation(self):
        return self.processcollocation
    def set_processcollocation(self, processcollocation):
        self.processcollocation = processcollocation
    processcollocationProp = property(get_processcollocation, set_processcollocation)
    def hasContent_(self):
        if (
            self.coreaffinity
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='executionaffinityassignment', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('executionaffinityassignment')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='executionaffinityassignment')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='executionaffinityassignment', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='executionaffinityassignment'):
        if self.componentid is not None and 'componentid' not in already_processed:
            already_processed.add('componentid')
            outfile.write(' componentid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.componentid), input_name='componentid')), ))
        if self.processcollocation is not None and 'processcollocation' not in already_processed:
            already_processed.add('processcollocation')
            outfile.write(' processcollocation=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.processcollocation), input_name='processcollocation')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='executionaffinityassignment', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for coreaffinity_ in self.coreaffinity:
            coreaffinity_.export(outfile, level, namespaceprefix_='t:', name_='coreaffinity', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('componentid', node)
        if value is not None and 'componentid' not in already_processed:
            already_processed.add('componentid')
            self.componentid = value
        value = find_attr_value_('processcollocation', node)
        if value is not None and 'processcollocation' not in already_processed:
            already_processed.add('processcollocation')
            self.processcollocation = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'coreaffinity':
            obj_ = coreaffinity.factory(parent_object_=self)
            obj_.build(child_)
            self.coreaffinity.append(obj_)
            obj_.original_tagname_ = 'coreaffinity'
# end class executionaffinityassignment


class propertyref(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, value=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.refid = _cast(None, refid)
        self.value = _cast(None, value)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, propertyref)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if propertyref.subclass:
            return propertyref.subclass(*args_, **kwargs_)
        else:
            return propertyref(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_refid(self):
        return self.refid
    def set_refid(self, refid):
        self.refid = refid
    refidProp = property(get_refid, set_refid)
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    valueProp = property(get_value, set_value)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='propertyref', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('propertyref')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='propertyref')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='propertyref', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='propertyref'):
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.refid), input_name='refid')), ))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='propertyref', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class propertyref


class assemblycontroller(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, componentinstantiationref=None, assemblyinstantiationref=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.componentinstantiationref = componentinstantiationref
        if assemblyinstantiationref is None:
            self.assemblyinstantiationref = []
        else:
            self.assemblyinstantiationref = assemblyinstantiationref
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, assemblycontroller)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if assemblycontroller.subclass:
            return assemblycontroller.subclass(*args_, **kwargs_)
        else:
            return assemblycontroller(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_componentinstantiationref(self):
        return self.componentinstantiationref
    def set_componentinstantiationref(self, componentinstantiationref):
        self.componentinstantiationref = componentinstantiationref
    componentinstantiationrefProp = property(get_componentinstantiationref, set_componentinstantiationref)
    def get_assemblyinstantiationref(self):
        return self.assemblyinstantiationref
    def set_assemblyinstantiationref(self, assemblyinstantiationref):
        self.assemblyinstantiationref = assemblyinstantiationref
    def add_assemblyinstantiationref(self, value):
        self.assemblyinstantiationref.append(value)
    def add_assemblyinstantiationref(self, value):
        self.assemblyinstantiationref.append(value)
    def insert_assemblyinstantiationref_at(self, index, value):
        self.assemblyinstantiationref.insert(index, value)
    def replace_assemblyinstantiationref_at(self, index, value):
        self.assemblyinstantiationref[index] = value
    assemblyinstantiationrefProp = property(get_assemblyinstantiationref, set_assemblyinstantiationref)
    def hasContent_(self):
        if (
            self.componentinstantiationref is not None or
            self.assemblyinstantiationref
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='assemblycontroller', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('assemblycontroller')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='assemblycontroller')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='assemblycontroller', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='assemblycontroller'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='assemblycontroller', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.componentinstantiationref is not None:
            self.componentinstantiationref.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='componentinstantiationref', pretty_print=pretty_print)
        for assemblyinstantiationref_ in self.assemblyinstantiationref:
            assemblyinstantiationref_.export(outfile, level, namespaceprefix_='t:', name_='assemblyinstantiationref', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'componentinstantiationref':
            obj_ = componentinstantiationref.factory(parent_object_=self)
            obj_.build(child_)
            self.componentinstantiationref = obj_
            obj_.original_tagname_ = 'componentinstantiationref'
        elif nodeName_ == 'assemblyinstantiationref':
            obj_ = assemblyinstantiationref.factory(parent_object_=self)
            obj_.build(child_)
            self.assemblyinstantiationref.append(obj_)
            obj_.original_tagname_ = 'assemblyinstantiationref'
# end class assemblycontroller


class connections(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, connectinterface=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if connectinterface is None:
            self.connectinterface = []
        else:
            self.connectinterface = connectinterface
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, connections)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if connections.subclass:
            return connections.subclass(*args_, **kwargs_)
        else:
            return connections(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_connectinterface(self):
        return self.connectinterface
    def set_connectinterface(self, connectinterface):
        self.connectinterface = connectinterface
    def add_connectinterface(self, value):
        self.connectinterface.append(value)
    def add_connectinterface(self, value):
        self.connectinterface.append(value)
    def insert_connectinterface_at(self, index, value):
        self.connectinterface.insert(index, value)
    def replace_connectinterface_at(self, index, value):
        self.connectinterface[index] = value
    connectinterfaceProp = property(get_connectinterface, set_connectinterface)
    def hasContent_(self):
        if (
            self.connectinterface
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='connections', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('connections')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='connections')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='connections', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='connections'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='connections', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for connectinterface_ in self.connectinterface:
            connectinterface_.export(outfile, level, namespaceprefix_='t:', name_='connectinterface', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'connectinterface':
            obj_ = connectinterface.factory(parent_object_=self)
            obj_.build(child_)
            self.connectinterface.append(obj_)
            obj_.original_tagname_ = 'connectinterface'
# end class connections


class connectinterface(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _id=None, usesport=None, providesport=None, componentsupportedinterface=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self._id = _cast(None, _id)
        self.usesport = usesport
        self.providesport = providesport
        self.componentsupportedinterface = componentsupportedinterface
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, connectinterface)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if connectinterface.subclass:
            return connectinterface.subclass(*args_, **kwargs_)
        else:
            return connectinterface(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_usesport(self):
        return self.usesport
    def set_usesport(self, usesport):
        self.usesport = usesport
    usesportProp = property(get_usesport, set_usesport)
    def get_providesport(self):
        return self.providesport
    def set_providesport(self, providesport):
        self.providesport = providesport
    providesportProp = property(get_providesport, set_providesport)
    def get_componentsupportedinterface(self):
        return self.componentsupportedinterface
    def set_componentsupportedinterface(self, componentsupportedinterface):
        self.componentsupportedinterface = componentsupportedinterface
    componentsupportedinterfaceProp = property(get_componentsupportedinterface, set_componentsupportedinterface)
    def get_id(self):
        return self._id
    def set_id(self, _id):
        self._id = _id
    idProp = property(get_id, set_id)
    def hasContent_(self):
        if (
            self.usesport is not None or
            self.providesport is not None or
            self.componentsupportedinterface is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='connectinterface', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('connectinterface')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='connectinterface')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='connectinterface', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='connectinterface'):
        if self._id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self._id), input_name='id')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='connectinterface', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.usesport is not None:
            self.usesport.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='usesport', pretty_print=pretty_print)
        if self.providesport is not None:
            self.providesport.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='providesport', pretty_print=pretty_print)
        if self.componentsupportedinterface is not None:
            self.componentsupportedinterface.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='componentsupportedinterface', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'usesport':
            obj_ = usesport.factory(parent_object_=self)
            obj_.build(child_)
            self.usesport = obj_
            obj_.original_tagname_ = 'usesport'
        elif nodeName_ == 'providesport':
            obj_ = providesport.factory(parent_object_=self)
            obj_.build(child_)
            self.providesport = obj_
            obj_.original_tagname_ = 'providesport'
        elif nodeName_ == 'componentsupportedinterface':
            obj_ = componentsupportedinterface.factory(parent_object_=self)
            obj_.build(child_)
            self.componentsupportedinterface = obj_
            obj_.original_tagname_ = 'componentsupportedinterface'
# end class connectinterface


class usesport(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, identifier=None, componentinstantiationref=None, assemblyinstantiationref=None, devicethatloadedthiscomponentref=None, deviceusedbythiscomponentref=None, domainfinder=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.identifier = identifier
        self.componentinstantiationref = componentinstantiationref
        self.assemblyinstantiationref = assemblyinstantiationref
        self.devicethatloadedthiscomponentref = devicethatloadedthiscomponentref
        self.deviceusedbythiscomponentref = deviceusedbythiscomponentref
        self.domainfinder = domainfinder
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, usesport)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if usesport.subclass:
            return usesport.subclass(*args_, **kwargs_)
        else:
            return usesport(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_identifier(self):
        return self.identifier
    def set_identifier(self, identifier):
        self.identifier = identifier
    identifierProp = property(get_identifier, set_identifier)
    def get_componentinstantiationref(self):
        return self.componentinstantiationref
    def set_componentinstantiationref(self, componentinstantiationref):
        self.componentinstantiationref = componentinstantiationref
    componentinstantiationrefProp = property(get_componentinstantiationref, set_componentinstantiationref)
    def get_assemblyinstantiationref(self):
        return self.assemblyinstantiationref
    def set_assemblyinstantiationref(self, assemblyinstantiationref):
        self.assemblyinstantiationref = assemblyinstantiationref
    assemblyinstantiationrefProp = property(get_assemblyinstantiationref, set_assemblyinstantiationref)
    def get_devicethatloadedthiscomponentref(self):
        return self.devicethatloadedthiscomponentref
    def set_devicethatloadedthiscomponentref(self, devicethatloadedthiscomponentref):
        self.devicethatloadedthiscomponentref = devicethatloadedthiscomponentref
    devicethatloadedthiscomponentrefProp = property(get_devicethatloadedthiscomponentref, set_devicethatloadedthiscomponentref)
    def get_deviceusedbythiscomponentref(self):
        return self.deviceusedbythiscomponentref
    def set_deviceusedbythiscomponentref(self, deviceusedbythiscomponentref):
        self.deviceusedbythiscomponentref = deviceusedbythiscomponentref
    deviceusedbythiscomponentrefProp = property(get_deviceusedbythiscomponentref, set_deviceusedbythiscomponentref)
    def get_domainfinder(self):
        return self.domainfinder
    def set_domainfinder(self, domainfinder):
        self.domainfinder = domainfinder
    domainfinderProp = property(get_domainfinder, set_domainfinder)
    def hasContent_(self):
        if (
            self.identifier is not None or
            self.componentinstantiationref is not None or
            self.assemblyinstantiationref is not None or
            self.devicethatloadedthiscomponentref is not None or
            self.deviceusedbythiscomponentref is not None or
            self.domainfinder is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='usesport', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('usesport')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='usesport')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='usesport', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='usesport'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='usesport', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.identifier is not None:
            self.identifier.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='identifier', pretty_print=pretty_print)
        if self.componentinstantiationref is not None:
            self.componentinstantiationref.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='componentinstantiationref', pretty_print=pretty_print)
        if self.assemblyinstantiationref is not None:
            self.assemblyinstantiationref.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='assemblyinstantiationref', pretty_print=pretty_print)
        if self.devicethatloadedthiscomponentref is not None:
            self.devicethatloadedthiscomponentref.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='devicethatloadedthiscomponentref', pretty_print=pretty_print)
        if self.deviceusedbythiscomponentref is not None:
            self.deviceusedbythiscomponentref.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='deviceusedbythiscomponentref', pretty_print=pretty_print)
        if self.domainfinder is not None:
            self.domainfinder.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='domainfinder', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'identifier':
            obj_ = identifier.factory(parent_object_=self)
            obj_.build(child_)
            self.identifier = obj_
            obj_.original_tagname_ = 'identifier'
        elif nodeName_ == 'componentinstantiationref':
            obj_ = componentinstantiationref.factory(parent_object_=self)
            obj_.build(child_)
            self.componentinstantiationref = obj_
            obj_.original_tagname_ = 'componentinstantiationref'
        elif nodeName_ == 'assemblyinstantiationref':
            obj_ = assemblyinstantiationref.factory(parent_object_=self)
            obj_.build(child_)
            self.assemblyinstantiationref = obj_
            obj_.original_tagname_ = 'assemblyinstantiationref'
        elif nodeName_ == 'devicethatloadedthiscomponentref':
            obj_ = devicethatloadedthiscomponentref.factory(parent_object_=self)
            obj_.build(child_)
            self.devicethatloadedthiscomponentref = obj_
            obj_.original_tagname_ = 'devicethatloadedthiscomponentref'
        elif nodeName_ == 'deviceusedbythiscomponentref':
            obj_ = deviceusedbythiscomponentref.factory(parent_object_=self)
            obj_.build(child_)
            self.deviceusedbythiscomponentref = obj_
            obj_.original_tagname_ = 'deviceusedbythiscomponentref'
        elif nodeName_ == 'domainfinder':
            obj_ = domainfinder.factory(parent_object_=self)
            obj_.build(child_)
            self.domainfinder = obj_
            obj_.original_tagname_ = 'domainfinder'
# end class usesport


class identifier(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None, mixedclass_=None, content_=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, identifier)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if identifier.subclass:
            return identifier.subclass(*args_, **kwargs_)
        else:
            return identifier(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='identifier', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('identifier')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='identifier')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='identifier'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='identifier', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        pass
# end class identifier


class componentinstantiationref(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.refid = _cast(None, refid)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, componentinstantiationref)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if componentinstantiationref.subclass:
            return componentinstantiationref.subclass(*args_, **kwargs_)
        else:
            return componentinstantiationref(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_refid(self):
        return self.refid
    def set_refid(self, refid):
        self.refid = refid
    refidProp = property(get_refid, set_refid)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentinstantiationref', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('componentinstantiationref')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='componentinstantiationref')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='componentinstantiationref', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='componentinstantiationref'):
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.refid), input_name='refid')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentinstantiationref', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class componentinstantiationref


class assemblyinstantiationref(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.refid = _cast(None, refid)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, assemblyinstantiationref)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if assemblyinstantiationref.subclass:
            return assemblyinstantiationref.subclass(*args_, **kwargs_)
        else:
            return assemblyinstantiationref(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_refid(self):
        return self.refid
    def set_refid(self, refid):
        self.refid = refid
    refidProp = property(get_refid, set_refid)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='assemblyinstantiationref', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('assemblyinstantiationref')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='assemblyinstantiationref')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='assemblyinstantiationref', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='assemblyinstantiationref'):
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.refid), input_name='refid')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='assemblyinstantiationref', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class assemblyinstantiationref


class devicethatloadedthiscomponentref(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.refid = _cast(None, refid)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, devicethatloadedthiscomponentref)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if devicethatloadedthiscomponentref.subclass:
            return devicethatloadedthiscomponentref.subclass(*args_, **kwargs_)
        else:
            return devicethatloadedthiscomponentref(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_refid(self):
        return self.refid
    def set_refid(self, refid):
        self.refid = refid
    refidProp = property(get_refid, set_refid)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='devicethatloadedthiscomponentref', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('devicethatloadedthiscomponentref')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='devicethatloadedthiscomponentref')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='devicethatloadedthiscomponentref', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='devicethatloadedthiscomponentref'):
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.refid), input_name='refid')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='devicethatloadedthiscomponentref', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class devicethatloadedthiscomponentref


class deviceusedbythiscomponentref(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, usesrefid=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.refid = _cast(None, refid)
        self.usesrefid = _cast(None, usesrefid)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, deviceusedbythiscomponentref)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if deviceusedbythiscomponentref.subclass:
            return deviceusedbythiscomponentref.subclass(*args_, **kwargs_)
        else:
            return deviceusedbythiscomponentref(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_refid(self):
        return self.refid
    def set_refid(self, refid):
        self.refid = refid
    refidProp = property(get_refid, set_refid)
    def get_usesrefid(self):
        return self.usesrefid
    def set_usesrefid(self, usesrefid):
        self.usesrefid = usesrefid
    usesrefidProp = property(get_usesrefid, set_usesrefid)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='deviceusedbythiscomponentref', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('deviceusedbythiscomponentref')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='deviceusedbythiscomponentref')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='deviceusedbythiscomponentref', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='deviceusedbythiscomponentref'):
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.refid), input_name='refid')), ))
        if self.usesrefid is not None and 'usesrefid' not in already_processed:
            already_processed.add('usesrefid')
            outfile.write(' usesrefid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.usesrefid), input_name='usesrefid')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='deviceusedbythiscomponentref', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
        value = find_attr_value_('usesrefid', node)
        if value is not None and 'usesrefid' not in already_processed:
            already_processed.add('usesrefid')
            self.usesrefid = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class deviceusedbythiscomponentref


class domainfinder(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, name=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.type_ = _cast(None, type_)
        self.name = _cast(None, name)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, domainfinder)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if domainfinder.subclass:
            return domainfinder.subclass(*args_, **kwargs_)
        else:
            return domainfinder(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_type(self):
        return self.type_
    def set_type(self, type_):
        self.type_ = type_
    typeProp = property(get_type, set_type)
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    nameProp = property(get_name, set_name)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='domainfinder', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('domainfinder')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='domainfinder')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='domainfinder', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='domainfinder'):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.type_), input_name='type')), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='domainfinder', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class domainfinder


class providesport(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, stringifiedobjectref=None, identifier=None, componentinstantiationref=None, assemblyinstantiationref=None, devicethatloadedthiscomponentref=None, deviceusedbythiscomponentref=None, domainfinder=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.stringifiedobjectref = _cast(None, stringifiedobjectref)
        self.identifier = identifier
        self.componentinstantiationref = componentinstantiationref
        self.assemblyinstantiationref = assemblyinstantiationref
        self.devicethatloadedthiscomponentref = devicethatloadedthiscomponentref
        self.deviceusedbythiscomponentref = deviceusedbythiscomponentref
        self.domainfinder = domainfinder
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, providesport)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if providesport.subclass:
            return providesport.subclass(*args_, **kwargs_)
        else:
            return providesport(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_identifier(self):
        return self.identifier
    def set_identifier(self, identifier):
        self.identifier = identifier
    identifierProp = property(get_identifier, set_identifier)
    def get_componentinstantiationref(self):
        return self.componentinstantiationref
    def set_componentinstantiationref(self, componentinstantiationref):
        self.componentinstantiationref = componentinstantiationref
    componentinstantiationrefProp = property(get_componentinstantiationref, set_componentinstantiationref)
    def get_assemblyinstantiationref(self):
        return self.assemblyinstantiationref
    def set_assemblyinstantiationref(self, assemblyinstantiationref):
        self.assemblyinstantiationref = assemblyinstantiationref
    assemblyinstantiationrefProp = property(get_assemblyinstantiationref, set_assemblyinstantiationref)
    def get_devicethatloadedthiscomponentref(self):
        return self.devicethatloadedthiscomponentref
    def set_devicethatloadedthiscomponentref(self, devicethatloadedthiscomponentref):
        self.devicethatloadedthiscomponentref = devicethatloadedthiscomponentref
    devicethatloadedthiscomponentrefProp = property(get_devicethatloadedthiscomponentref, set_devicethatloadedthiscomponentref)
    def get_deviceusedbythiscomponentref(self):
        return self.deviceusedbythiscomponentref
    def set_deviceusedbythiscomponentref(self, deviceusedbythiscomponentref):
        self.deviceusedbythiscomponentref = deviceusedbythiscomponentref
    deviceusedbythiscomponentrefProp = property(get_deviceusedbythiscomponentref, set_deviceusedbythiscomponentref)
    def get_domainfinder(self):
        return self.domainfinder
    def set_domainfinder(self, domainfinder):
        self.domainfinder = domainfinder
    domainfinderProp = property(get_domainfinder, set_domainfinder)
    def get_stringifiedobjectref(self):
        return self.stringifiedobjectref
    def set_stringifiedobjectref(self, stringifiedobjectref):
        self.stringifiedobjectref = stringifiedobjectref
    stringifiedobjectrefProp = property(get_stringifiedobjectref, set_stringifiedobjectref)
    def hasContent_(self):
        if (
            self.identifier is not None or
            self.componentinstantiationref is not None or
            self.assemblyinstantiationref is not None or
            self.devicethatloadedthiscomponentref is not None or
            self.deviceusedbythiscomponentref is not None or
            self.domainfinder is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='providesport', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('providesport')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='providesport')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='providesport', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='providesport'):
        if self.stringifiedobjectref is not None and 'stringifiedobjectref' not in already_processed:
            already_processed.add('stringifiedobjectref')
            outfile.write(' stringifiedobjectref=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.stringifiedobjectref), input_name='stringifiedobjectref')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='providesport', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.identifier is not None:
            self.identifier.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='identifier', pretty_print=pretty_print)
        if self.componentinstantiationref is not None:
            self.componentinstantiationref.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='componentinstantiationref', pretty_print=pretty_print)
        if self.assemblyinstantiationref is not None:
            self.assemblyinstantiationref.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='assemblyinstantiationref', pretty_print=pretty_print)
        if self.devicethatloadedthiscomponentref is not None:
            self.devicethatloadedthiscomponentref.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='devicethatloadedthiscomponentref', pretty_print=pretty_print)
        if self.deviceusedbythiscomponentref is not None:
            self.deviceusedbythiscomponentref.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='deviceusedbythiscomponentref', pretty_print=pretty_print)
        if self.domainfinder is not None:
            self.domainfinder.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='domainfinder', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('stringifiedobjectref', node)
        if value is not None and 'stringifiedobjectref' not in already_processed:
            already_processed.add('stringifiedobjectref')
            self.stringifiedobjectref = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'identifier':
            obj_ = identifier.factory(parent_object_=self)
            obj_.build(child_)
            self.identifier = obj_
            obj_.original_tagname_ = 'identifier'
        elif nodeName_ == 'componentinstantiationref':
            obj_ = componentinstantiationref.factory(parent_object_=self)
            obj_.build(child_)
            self.componentinstantiationref = obj_
            obj_.original_tagname_ = 'componentinstantiationref'
        elif nodeName_ == 'assemblyinstantiationref':
            obj_ = assemblyinstantiationref.factory(parent_object_=self)
            obj_.build(child_)
            self.assemblyinstantiationref = obj_
            obj_.original_tagname_ = 'assemblyinstantiationref'
        elif nodeName_ == 'devicethatloadedthiscomponentref':
            obj_ = devicethatloadedthiscomponentref.factory(parent_object_=self)
            obj_.build(child_)
            self.devicethatloadedthiscomponentref = obj_
            obj_.original_tagname_ = 'devicethatloadedthiscomponentref'
        elif nodeName_ == 'deviceusedbythiscomponentref':
            obj_ = deviceusedbythiscomponentref.factory(parent_object_=self)
            obj_.build(child_)
            self.deviceusedbythiscomponentref = obj_
            obj_.original_tagname_ = 'deviceusedbythiscomponentref'
        elif nodeName_ == 'domainfinder':
            obj_ = domainfinder.factory(parent_object_=self)
            obj_.build(child_)
            self.domainfinder = obj_
            obj_.original_tagname_ = 'domainfinder'
# end class providesport


class componentsupportedinterface(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, identifier=None, componentinstantiationref=None, devicethatloadedthiscomponentref=None, deviceusedbythiscomponentref=None, domainfinder=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.identifier = identifier
        self.componentinstantiationref = componentinstantiationref
        self.devicethatloadedthiscomponentref = devicethatloadedthiscomponentref
        self.deviceusedbythiscomponentref = deviceusedbythiscomponentref
        self.domainfinder = domainfinder
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, componentsupportedinterface)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if componentsupportedinterface.subclass:
            return componentsupportedinterface.subclass(*args_, **kwargs_)
        else:
            return componentsupportedinterface(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_identifier(self):
        return self.identifier
    def set_identifier(self, identifier):
        self.identifier = identifier
    identifierProp = property(get_identifier, set_identifier)
    def get_componentinstantiationref(self):
        return self.componentinstantiationref
    def set_componentinstantiationref(self, componentinstantiationref):
        self.componentinstantiationref = componentinstantiationref
    componentinstantiationrefProp = property(get_componentinstantiationref, set_componentinstantiationref)
    def get_devicethatloadedthiscomponentref(self):
        return self.devicethatloadedthiscomponentref
    def set_devicethatloadedthiscomponentref(self, devicethatloadedthiscomponentref):
        self.devicethatloadedthiscomponentref = devicethatloadedthiscomponentref
    devicethatloadedthiscomponentrefProp = property(get_devicethatloadedthiscomponentref, set_devicethatloadedthiscomponentref)
    def get_deviceusedbythiscomponentref(self):
        return self.deviceusedbythiscomponentref
    def set_deviceusedbythiscomponentref(self, deviceusedbythiscomponentref):
        self.deviceusedbythiscomponentref = deviceusedbythiscomponentref
    deviceusedbythiscomponentrefProp = property(get_deviceusedbythiscomponentref, set_deviceusedbythiscomponentref)
    def get_domainfinder(self):
        return self.domainfinder
    def set_domainfinder(self, domainfinder):
        self.domainfinder = domainfinder
    domainfinderProp = property(get_domainfinder, set_domainfinder)
    def hasContent_(self):
        if (
            self.identifier is not None or
            self.componentinstantiationref is not None or
            self.devicethatloadedthiscomponentref is not None or
            self.deviceusedbythiscomponentref is not None or
            self.domainfinder is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentsupportedinterface', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('componentsupportedinterface')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='componentsupportedinterface')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='componentsupportedinterface', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='componentsupportedinterface'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentsupportedinterface', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.identifier is not None:
            self.identifier.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='identifier', pretty_print=pretty_print)
        if self.componentinstantiationref is not None:
            self.componentinstantiationref.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='componentinstantiationref', pretty_print=pretty_print)
        if self.devicethatloadedthiscomponentref is not None:
            self.devicethatloadedthiscomponentref.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='devicethatloadedthiscomponentref', pretty_print=pretty_print)
        if self.deviceusedbythiscomponentref is not None:
            self.deviceusedbythiscomponentref.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='deviceusedbythiscomponentref', pretty_print=pretty_print)
        if self.domainfinder is not None:
            self.domainfinder.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='domainfinder', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'identifier':
            obj_ = identifier.factory(parent_object_=self)
            obj_.build(child_)
            self.identifier = obj_
            obj_.original_tagname_ = 'identifier'
        elif nodeName_ == 'componentinstantiationref':
            obj_ = componentinstantiationref.factory(parent_object_=self)
            obj_.build(child_)
            self.componentinstantiationref = obj_
            obj_.original_tagname_ = 'componentinstantiationref'
        elif nodeName_ == 'devicethatloadedthiscomponentref':
            obj_ = devicethatloadedthiscomponentref.factory(parent_object_=self)
            obj_.build(child_)
            self.devicethatloadedthiscomponentref = obj_
            obj_.original_tagname_ = 'devicethatloadedthiscomponentref'
        elif nodeName_ == 'deviceusedbythiscomponentref':
            obj_ = deviceusedbythiscomponentref.factory(parent_object_=self)
            obj_.build(child_)
            self.deviceusedbythiscomponentref = obj_
            obj_.original_tagname_ = 'deviceusedbythiscomponentref'
        elif nodeName_ == 'domainfinder':
            obj_ = domainfinder.factory(parent_object_=self)
            obj_.build(child_)
            self.domainfinder = obj_
            obj_.original_tagname_ = 'domainfinder'
# end class componentsupportedinterface


class externalports(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, port=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if port is None:
            self.port = []
        else:
            self.port = port
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, externalports)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if externalports.subclass:
            return externalports.subclass(*args_, **kwargs_)
        else:
            return externalports(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_port(self):
        return self.port
    def set_port(self, port):
        self.port = port
    def add_port(self, value):
        self.port.append(value)
    def add_port(self, value):
        self.port.append(value)
    def insert_port_at(self, index, value):
        self.port.insert(index, value)
    def replace_port_at(self, index, value):
        self.port[index] = value
    portProp = property(get_port, set_port)
    def hasContent_(self):
        if (
            self.port
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='externalports', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('externalports')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='externalports')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='externalports', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='externalports'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='externalports', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for port_ in self.port:
            port_.export(outfile, level, namespaceprefix_='t:', name_='port', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'port':
            obj_ = port.factory(parent_object_=self)
            obj_.build(child_)
            self.port.append(obj_)
            obj_.original_tagname_ = 'port'
# end class externalports


class port(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, description=None, usesidentifier=None, providesidentifier=None, supportedidentifier=None, componentinstantiationref=None, assemblyinstantiationref=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.description = description
        self.usesidentifier = usesidentifier
        self.providesidentifier = providesidentifier
        self.supportedidentifier = supportedidentifier
        self.componentinstantiationref = componentinstantiationref
        self.assemblyinstantiationref = assemblyinstantiationref
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, port)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if port.subclass:
            return port.subclass(*args_, **kwargs_)
        else:
            return port(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    descriptionProp = property(get_description, set_description)
    def get_usesidentifier(self):
        return self.usesidentifier
    def set_usesidentifier(self, usesidentifier):
        self.usesidentifier = usesidentifier
    usesidentifierProp = property(get_usesidentifier, set_usesidentifier)
    def get_providesidentifier(self):
        return self.providesidentifier
    def set_providesidentifier(self, providesidentifier):
        self.providesidentifier = providesidentifier
    providesidentifierProp = property(get_providesidentifier, set_providesidentifier)
    def get_supportedidentifier(self):
        return self.supportedidentifier
    def set_supportedidentifier(self, supportedidentifier):
        self.supportedidentifier = supportedidentifier
    supportedidentifierProp = property(get_supportedidentifier, set_supportedidentifier)
    def get_componentinstantiationref(self):
        return self.componentinstantiationref
    def set_componentinstantiationref(self, componentinstantiationref):
        self.componentinstantiationref = componentinstantiationref
    componentinstantiationrefProp = property(get_componentinstantiationref, set_componentinstantiationref)
    def get_assemblyinstantiationref(self):
        return self.assemblyinstantiationref
    def set_assemblyinstantiationref(self, assemblyinstantiationref):
        self.assemblyinstantiationref = assemblyinstantiationref
    assemblyinstantiationrefProp = property(get_assemblyinstantiationref, set_assemblyinstantiationref)
    def hasContent_(self):
        if (
            self.description is not None or
            self.usesidentifier is not None or
            self.providesidentifier is not None or
            self.supportedidentifier is not None or
            self.componentinstantiationref is not None or
            self.assemblyinstantiationref is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='port', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('port')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='port')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='port', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='port'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='port', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.description is not None:
            self.description.export(outfile, level, namespaceprefix_='t:', name_='description', pretty_print=pretty_print)
        if self.usesidentifier is not None:
            self.usesidentifier.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='usesidentifier', pretty_print=pretty_print)
        if self.providesidentifier is not None:
            self.providesidentifier.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='providesidentifier', pretty_print=pretty_print)
        if self.supportedidentifier is not None:
            self.supportedidentifier.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='supportedidentifier', pretty_print=pretty_print)
        if self.componentinstantiationref is not None:
            self.componentinstantiationref.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='componentinstantiationref', pretty_print=pretty_print)
        if self.assemblyinstantiationref is not None:
            self.assemblyinstantiationref.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='assemblyinstantiationref', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            obj_ = description.factory(parent_object_=self)
            obj_.build(child_)
            self.description = obj_
            obj_.original_tagname_ = 'description'
        elif nodeName_ == 'usesidentifier':
            obj_ = usesidentifier.factory(parent_object_=self)
            obj_.build(child_)
            self.usesidentifier = obj_
            obj_.original_tagname_ = 'usesidentifier'
        elif nodeName_ == 'providesidentifier':
            obj_ = providesidentifier.factory(parent_object_=self)
            obj_.build(child_)
            self.providesidentifier = obj_
            obj_.original_tagname_ = 'providesidentifier'
        elif nodeName_ == 'supportedidentifier':
            obj_ = supportedidentifier.factory(parent_object_=self)
            obj_.build(child_)
            self.supportedidentifier = obj_
            obj_.original_tagname_ = 'supportedidentifier'
        elif nodeName_ == 'componentinstantiationref':
            obj_ = componentinstantiationref.factory(parent_object_=self)
            obj_.build(child_)
            self.componentinstantiationref = obj_
            obj_.original_tagname_ = 'componentinstantiationref'
        elif nodeName_ == 'assemblyinstantiationref':
            obj_ = assemblyinstantiationref.factory(parent_object_=self)
            obj_.build(child_)
            self.assemblyinstantiationref = obj_
            obj_.original_tagname_ = 'assemblyinstantiationref'
# end class port


class usesidentifier(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None, mixedclass_=None, content_=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, usesidentifier)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if usesidentifier.subclass:
            return usesidentifier.subclass(*args_, **kwargs_)
        else:
            return usesidentifier(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='usesidentifier', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('usesidentifier')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='usesidentifier')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='usesidentifier'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='usesidentifier', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        pass
# end class usesidentifier


class providesidentifier(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None, mixedclass_=None, content_=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, providesidentifier)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if providesidentifier.subclass:
            return providesidentifier.subclass(*args_, **kwargs_)
        else:
            return providesidentifier(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='providesidentifier', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('providesidentifier')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='providesidentifier')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='providesidentifier'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='providesidentifier', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        pass
# end class providesidentifier


class supportedidentifier(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None, mixedclass_=None, content_=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, supportedidentifier)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if supportedidentifier.subclass:
            return supportedidentifier.subclass(*args_, **kwargs_)
        else:
            return supportedidentifier(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='supportedidentifier', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('supportedidentifier')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='supportedidentifier')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='supportedidentifier'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='supportedidentifier', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        pass
# end class supportedidentifier


class deploymentprefs(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, localfile=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.localfile = localfile
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, deploymentprefs)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if deploymentprefs.subclass:
            return deploymentprefs.subclass(*args_, **kwargs_)
        else:
            return deploymentprefs(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_localfile(self):
        return self.localfile
    def set_localfile(self, localfile):
        self.localfile = localfile
    localfileProp = property(get_localfile, set_localfile)
    def hasContent_(self):
        if (
            self.localfile is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='deploymentprefs', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('deploymentprefs')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='deploymentprefs')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_=namespacedef_, name_='deploymentprefs', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='deploymentprefs'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='deploymentprefs', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.localfile is not None:
            self.localfile.export(outfile, level, namespaceprefix_='t:', namespacedef_=namespacedef_, name_='localfile', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'localfile':
            obj_ = localfile.factory(parent_object_=self)
            obj_.build(child_)
            self.localfile = obj_
            obj_.original_tagname_ = 'localfile'
# end class deploymentprefs


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'softwareassembly'
        rootClass = softwareassembly
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     if not silence:
##         sys.stdout.write('<?xml version="1.0" ?>\n')
##         rootObj.export(
##             sys.stdout, 0, name_=rootTag,
##             namespacedef_='xmlns:t="http://www.w3.org/namespace/"',
##             pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'softwareassembly'
        rootClass = softwareassembly
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
##     if not silence:
##         content = etree_.tostring(
##             rootElement, pretty_print=True,
##             xml_declaration=True, encoding="utf-8")
##         sys.stdout.write(content)
##         sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'softwareassembly'
        rootClass = softwareassembly
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
##     if not silence:
##         sys.stdout.write('<?xml version="1.0" ?>\n')
##         rootObj.export(
##             sys.stdout, 0, name_=rootTag,
##             namespacedef_='xmlns:t="http://www.w3.org/namespace/"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'softwareassembly'
        rootClass = softwareassembly
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     if not silence:
##         sys.stdout.write('#from sad import *\n\n')
##         sys.stdout.write('import sad as model_\n\n')
##         sys.stdout.write('rootObj = model_.rootClass(\n')
##         rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
##         sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "assemblycontroller",
    "assemblyinstantiation",
    "assemblyinstantiationref",
    "assemblyplacement",
    "componentfactoryproperties",
    "componentfactoryref",
    "componentfile",
    "componentfileref",
    "componentfiles",
    "componentinstantiation",
    "componentinstantiationref",
    "componentplacement",
    "componentproperties",
    "componentsupportedinterface",
    "connectinterface",
    "connections",
    "coreaffinity",
    "deploymentdependencies",
    "deploymentprefs",
    "description",
    "deviceassignment",
    "deviceassignments",
    "devicethatloadedthiscomponentref",
    "deviceusedbythiscomponentref",
    "domainfinder",
    "executionaffinityassignment",
    "executionaffinityassignments",
    "externalports",
    "hostcollocation",
    "identifier",
    "localfile",
    "partitioning",
    "port",
    "propertyref",
    "providesidentifier",
    "providesport",
    "simpleref",
    "simplesequenceref",
    "softwareassembly",
    "structref",
    "structsequenceref",
    "structvalue",
    "supportedidentifier",
    "usesidentifier",
    "usesport",
    "value",
    "values"
]
