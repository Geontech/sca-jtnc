#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Wed Nov 28 18:40:08 2018 by generateDS.py version 2.30.8.
# Python 2.7.5 (default, Jul 13 2018, 13:06:57)  [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)]
#
# Command line options:
#   ('-f', '')
#   ('--silence', '')
#   ('-m', '')
#   ('-o', 'sca/parsers/scd.py')
#
# Command line arguments:
#   ../../../xml/xsd/softwarecomponent.4.1.xsd
#
# Command line:
#   /usr/bin/generateDS.py -f --silence -m -o "sca/parsers/scd.py" ../../../xml/xsd/softwarecomponent.4.1.xsd
#
# Current working directory (os.getcwd()):
#   python
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class softwarecomponent(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, componentrepid=None, componenttype=None, componentfeatures=None, interfaces=None, propertyfile=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.componentrepid = componentrepid
        self.componenttype = componenttype
        self.componentfeatures = componentfeatures
        self.interfaces = interfaces
        self.propertyfile = propertyfile
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, softwarecomponent)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if softwarecomponent.subclass:
            return softwarecomponent.subclass(*args_, **kwargs_)
        else:
            return softwarecomponent(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_componentrepid(self):
        return self.componentrepid
    def set_componentrepid(self, componentrepid):
        self.componentrepid = componentrepid
    componentrepidProp = property(get_componentrepid, set_componentrepid)
    def get_componenttype(self):
        return self.componenttype
    def set_componenttype(self, componenttype):
        self.componenttype = componenttype
    componenttypeProp = property(get_componenttype, set_componenttype)
    def get_componentfeatures(self):
        return self.componentfeatures
    def set_componentfeatures(self, componentfeatures):
        self.componentfeatures = componentfeatures
    componentfeaturesProp = property(get_componentfeatures, set_componentfeatures)
    def get_interfaces(self):
        return self.interfaces
    def set_interfaces(self, interfaces):
        self.interfaces = interfaces
    interfacesProp = property(get_interfaces, set_interfaces)
    def get_propertyfile(self):
        return self.propertyfile
    def set_propertyfile(self, propertyfile):
        self.propertyfile = propertyfile
    propertyfileProp = property(get_propertyfile, set_propertyfile)
    def hasContent_(self):
        if (
            self.componentrepid is not None or
            self.componenttype is not None or
            self.componentfeatures is not None or
            self.interfaces is not None or
            self.propertyfile is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='softwarecomponent', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('softwarecomponent')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='softwarecomponent')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='softwarecomponent', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='softwarecomponent'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='softwarecomponent', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.componentrepid is not None:
            self.componentrepid.export(outfile, level, namespaceprefix_='t:', namespacedef_, name_='componentrepid', pretty_print=pretty_print)
        if self.componenttype is not None:
            self.componenttype.export(outfile, level, namespaceprefix_='t:', namespacedef_, name_='componenttype', pretty_print=pretty_print)
        if self.componentfeatures is not None:
            self.componentfeatures.export(outfile, level, namespaceprefix_='t:', namespacedef_, name_='componentfeatures', pretty_print=pretty_print)
        if self.interfaces is not None:
            self.interfaces.export(outfile, level, namespaceprefix_='t:', namespacedef_, name_='interfaces', pretty_print=pretty_print)
        if self.propertyfile is not None:
            self.propertyfile.export(outfile, level, namespaceprefix_='t:', name_='propertyfile', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'componentrepid':
            obj_ = componentrepid.factory(parent_object_=self)
            obj_.build(child_)
            self.componentrepid = obj_
            obj_.original_tagname_ = 'componentrepid'
        elif nodeName_ == 'componenttype':
            obj_ = componenttype.factory(parent_object_=self)
            obj_.build(child_)
            self.componenttype = obj_
            obj_.original_tagname_ = 'componenttype'
        elif nodeName_ == 'componentfeatures':
            obj_ = componentfeatures.factory(parent_object_=self)
            obj_.build(child_)
            self.componentfeatures = obj_
            obj_.original_tagname_ = 'componentfeatures'
        elif nodeName_ == 'interfaces':
            obj_ = interfaces.factory(parent_object_=self)
            obj_.build(child_)
            self.interfaces = obj_
            obj_.original_tagname_ = 'interfaces'
        elif nodeName_ == 'propertyfile':
            obj_ = propertyfile.factory(parent_object_=self)
            obj_.build(child_)
            self.propertyfile = obj_
            obj_.original_tagname_ = 'propertyfile'
# end class softwarecomponent


class componentrepid(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, repid=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.repid = _cast(None, repid)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, componentrepid)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if componentrepid.subclass:
            return componentrepid.subclass(*args_, **kwargs_)
        else:
            return componentrepid(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_repid(self):
        return self.repid
    def set_repid(self, repid):
        self.repid = repid
    repidProp = property(get_repid, set_repid)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentrepid', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('componentrepid')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='componentrepid')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='componentrepid', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='componentrepid'):
        if self.repid is not None and 'repid' not in already_processed:
            already_processed.add('repid')
            outfile.write(' repid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.repid), input_name='repid')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentrepid', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('repid', node)
        if value is not None and 'repid' not in already_processed:
            already_processed.add('repid')
            self.repid = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class componentrepid


class componenttype(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None, mixedclass_=None, content_=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, componenttype)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if componenttype.subclass:
            return componenttype.subclass(*args_, **kwargs_)
        else:
            return componenttype(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componenttype', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('componenttype')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='componenttype')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='componenttype'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componenttype', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        pass
# end class componenttype


class componentfeatures(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, supportsinterface=None, ports=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if supportsinterface is None:
            self.supportsinterface = []
        else:
            self.supportsinterface = supportsinterface
        self.ports = ports
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, componentfeatures)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if componentfeatures.subclass:
            return componentfeatures.subclass(*args_, **kwargs_)
        else:
            return componentfeatures(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_supportsinterface(self):
        return self.supportsinterface
    def set_supportsinterface(self, supportsinterface):
        self.supportsinterface = supportsinterface
    def add_supportsinterface(self, value):
        self.supportsinterface.append(value)
    def add_supportsinterface(self, value):
        self.supportsinterface.append(value)
    def insert_supportsinterface_at(self, index, value):
        self.supportsinterface.insert(index, value)
    def replace_supportsinterface_at(self, index, value):
        self.supportsinterface[index] = value
    supportsinterfaceProp = property(get_supportsinterface, set_supportsinterface)
    def get_ports(self):
        return self.ports
    def set_ports(self, ports):
        self.ports = ports
    portsProp = property(get_ports, set_ports)
    def hasContent_(self):
        if (
            self.supportsinterface or
            self.ports is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentfeatures', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('componentfeatures')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='componentfeatures')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='componentfeatures', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='componentfeatures'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='componentfeatures', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for supportsinterface_ in self.supportsinterface:
            supportsinterface_.export(outfile, level, namespaceprefix_='t:', name_='supportsinterface', pretty_print=pretty_print)
        if self.ports is not None:
            self.ports.export(outfile, level, namespaceprefix_='t:', namespacedef_, name_='ports', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'supportsinterface':
            obj_ = supportsinterface.factory(parent_object_=self)
            obj_.build(child_)
            self.supportsinterface.append(obj_)
            obj_.original_tagname_ = 'supportsinterface'
        elif nodeName_ == 'ports':
            obj_ = ports.factory(parent_object_=self)
            obj_.build(child_)
            self.ports = obj_
            obj_.original_tagname_ = 'ports'
# end class componentfeatures


class supportsinterface(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, repid=None, supportsname=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.repid = _cast(None, repid)
        self.supportsname = _cast(None, supportsname)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, supportsinterface)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if supportsinterface.subclass:
            return supportsinterface.subclass(*args_, **kwargs_)
        else:
            return supportsinterface(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_repid(self):
        return self.repid
    def set_repid(self, repid):
        self.repid = repid
    repidProp = property(get_repid, set_repid)
    def get_supportsname(self):
        return self.supportsname
    def set_supportsname(self, supportsname):
        self.supportsname = supportsname
    supportsnameProp = property(get_supportsname, set_supportsname)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='supportsinterface', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('supportsinterface')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='supportsinterface')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='supportsinterface', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='supportsinterface'):
        if self.repid is not None and 'repid' not in already_processed:
            already_processed.add('repid')
            outfile.write(' repid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.repid), input_name='repid')), ))
        if self.supportsname is not None and 'supportsname' not in already_processed:
            already_processed.add('supportsname')
            outfile.write(' supportsname=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.supportsname), input_name='supportsname')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='supportsinterface', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('repid', node)
        if value is not None and 'repid' not in already_processed:
            already_processed.add('repid')
            self.repid = value
        value = find_attr_value_('supportsname', node)
        if value is not None and 'supportsname' not in already_processed:
            already_processed.add('supportsname')
            self.supportsname = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class supportsinterface


class ports(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, provides=None, uses=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if provides is None:
            self.provides = []
        else:
            self.provides = provides
        if uses is None:
            self.uses = []
        else:
            self.uses = uses
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ports)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ports.subclass:
            return ports.subclass(*args_, **kwargs_)
        else:
            return ports(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_provides(self):
        return self.provides
    def set_provides(self, provides):
        self.provides = provides
    def add_provides(self, value):
        self.provides.append(value)
    def add_provides(self, value):
        self.provides.append(value)
    def insert_provides_at(self, index, value):
        self.provides.insert(index, value)
    def replace_provides_at(self, index, value):
        self.provides[index] = value
    providesProp = property(get_provides, set_provides)
    def get_uses(self):
        return self.uses
    def set_uses(self, uses):
        self.uses = uses
    def add_uses(self, value):
        self.uses.append(value)
    def add_uses(self, value):
        self.uses.append(value)
    def insert_uses_at(self, index, value):
        self.uses.insert(index, value)
    def replace_uses_at(self, index, value):
        self.uses[index] = value
    usesProp = property(get_uses, set_uses)
    def hasContent_(self):
        if (
            self.provides or
            self.uses
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='ports', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ports')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ports')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ports', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='ports'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='ports', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for provides_ in self.provides:
            provides_.export(outfile, level, namespaceprefix_='t:', name_='provides', pretty_print=pretty_print)
        for uses_ in self.uses:
            uses_.export(outfile, level, namespaceprefix_='t:', name_='uses', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'provides':
            obj_ = provides.factory(parent_object_=self)
            obj_.build(child_)
            self.provides.append(obj_)
            obj_.original_tagname_ = 'provides'
        elif nodeName_ == 'uses':
            obj_ = uses.factory(parent_object_=self)
            obj_.build(child_)
            self.uses.append(obj_)
            obj_.original_tagname_ = 'uses'
# end class ports


class provides(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, repid=None, providesname=None, maxconnections=None, porttype=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.repid = _cast(None, repid)
        self.providesname = _cast(None, providesname)
        self.maxconnections = _cast(None, maxconnections)
        if porttype is None:
            self.porttype = []
        else:
            self.porttype = porttype
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, provides)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if provides.subclass:
            return provides.subclass(*args_, **kwargs_)
        else:
            return provides(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_porttype(self):
        return self.porttype
    def set_porttype(self, porttype):
        self.porttype = porttype
    def add_porttype(self, value):
        self.porttype.append(value)
    def add_porttype(self, value):
        self.porttype.append(value)
    def insert_porttype_at(self, index, value):
        self.porttype.insert(index, value)
    def replace_porttype_at(self, index, value):
        self.porttype[index] = value
    porttypeProp = property(get_porttype, set_porttype)
    def get_repid(self):
        return self.repid
    def set_repid(self, repid):
        self.repid = repid
    repidProp = property(get_repid, set_repid)
    def get_providesname(self):
        return self.providesname
    def set_providesname(self, providesname):
        self.providesname = providesname
    providesnameProp = property(get_providesname, set_providesname)
    def get_maxconnections(self):
        return self.maxconnections
    def set_maxconnections(self, maxconnections):
        self.maxconnections = maxconnections
    maxconnectionsProp = property(get_maxconnections, set_maxconnections)
    def hasContent_(self):
        if (
            self.porttype
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='provides', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('provides')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='provides')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='provides', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='provides'):
        if self.repid is not None and 'repid' not in already_processed:
            already_processed.add('repid')
            outfile.write(' repid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.repid), input_name='repid')), ))
        if self.providesname is not None and 'providesname' not in already_processed:
            already_processed.add('providesname')
            outfile.write(' providesname=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.providesname), input_name='providesname')), ))
        if self.maxconnections is not None and 'maxconnections' not in already_processed:
            already_processed.add('maxconnections')
            outfile.write(' maxconnections=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.maxconnections), input_name='maxconnections')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='provides', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for porttype_ in self.porttype:
            porttype_.export(outfile, level, namespaceprefix_='t:', name_='porttype', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('repid', node)
        if value is not None and 'repid' not in already_processed:
            already_processed.add('repid')
            self.repid = value
        value = find_attr_value_('providesname', node)
        if value is not None and 'providesname' not in already_processed:
            already_processed.add('providesname')
            self.providesname = value
        value = find_attr_value_('maxconnections', node)
        if value is not None and 'maxconnections' not in already_processed:
            already_processed.add('maxconnections')
            self.maxconnections = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'porttype':
            obj_ = porttype.factory(parent_object_=self)
            obj_.build(child_)
            self.porttype.append(obj_)
            obj_.original_tagname_ = 'porttype'
# end class provides


class uses(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, repid=None, usesname=None, maxconnections=None, porttype=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.repid = _cast(None, repid)
        self.usesname = _cast(None, usesname)
        self.maxconnections = _cast(None, maxconnections)
        if porttype is None:
            self.porttype = []
        else:
            self.porttype = porttype
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, uses)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if uses.subclass:
            return uses.subclass(*args_, **kwargs_)
        else:
            return uses(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_porttype(self):
        return self.porttype
    def set_porttype(self, porttype):
        self.porttype = porttype
    def add_porttype(self, value):
        self.porttype.append(value)
    def add_porttype(self, value):
        self.porttype.append(value)
    def insert_porttype_at(self, index, value):
        self.porttype.insert(index, value)
    def replace_porttype_at(self, index, value):
        self.porttype[index] = value
    porttypeProp = property(get_porttype, set_porttype)
    def get_repid(self):
        return self.repid
    def set_repid(self, repid):
        self.repid = repid
    repidProp = property(get_repid, set_repid)
    def get_usesname(self):
        return self.usesname
    def set_usesname(self, usesname):
        self.usesname = usesname
    usesnameProp = property(get_usesname, set_usesname)
    def get_maxconnections(self):
        return self.maxconnections
    def set_maxconnections(self, maxconnections):
        self.maxconnections = maxconnections
    maxconnectionsProp = property(get_maxconnections, set_maxconnections)
    def hasContent_(self):
        if (
            self.porttype
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='uses', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('uses')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='uses')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='uses', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='uses'):
        if self.repid is not None and 'repid' not in already_processed:
            already_processed.add('repid')
            outfile.write(' repid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.repid), input_name='repid')), ))
        if self.usesname is not None and 'usesname' not in already_processed:
            already_processed.add('usesname')
            outfile.write(' usesname=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.usesname), input_name='usesname')), ))
        if self.maxconnections is not None and 'maxconnections' not in already_processed:
            already_processed.add('maxconnections')
            outfile.write(' maxconnections=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.maxconnections), input_name='maxconnections')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='uses', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for porttype_ in self.porttype:
            porttype_.export(outfile, level, namespaceprefix_='t:', name_='porttype', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('repid', node)
        if value is not None and 'repid' not in already_processed:
            already_processed.add('repid')
            self.repid = value
        value = find_attr_value_('usesname', node)
        if value is not None and 'usesname' not in already_processed:
            already_processed.add('usesname')
            self.usesname = value
        value = find_attr_value_('maxconnections', node)
        if value is not None and 'maxconnections' not in already_processed:
            already_processed.add('maxconnections')
            self.maxconnections = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'porttype':
            obj_ = porttype.factory(parent_object_=self)
            obj_.build(child_)
            self.porttype.append(obj_)
            obj_.original_tagname_ = 'porttype'
# end class uses


class porttype(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.type_ = _cast(None, type_)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, porttype)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if porttype.subclass:
            return porttype.subclass(*args_, **kwargs_)
        else:
            return porttype(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_type(self):
        return self.type_
    def set_type(self, type_):
        self.type_ = type_
    typeProp = property(get_type, set_type)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='porttype', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('porttype')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='porttype')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='porttype', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='porttype'):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.type_), input_name='type')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='porttype', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class porttype


class interfaces(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, interface=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if interface is None:
            self.interface = []
        else:
            self.interface = interface
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, interfaces)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if interfaces.subclass:
            return interfaces.subclass(*args_, **kwargs_)
        else:
            return interfaces(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_interface(self):
        return self.interface
    def set_interface(self, interface):
        self.interface = interface
    def add_interface(self, value):
        self.interface.append(value)
    def add_interface(self, value):
        self.interface.append(value)
    def insert_interface_at(self, index, value):
        self.interface.insert(index, value)
    def replace_interface_at(self, index, value):
        self.interface[index] = value
    interfaceProp = property(get_interface, set_interface)
    def hasContent_(self):
        if (
            self.interface
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='interfaces', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('interfaces')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='interfaces')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='interfaces', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='interfaces'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='interfaces', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for interface_ in self.interface:
            interface_.export(outfile, level, namespaceprefix_='t:', name_='interface', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'interface':
            obj_ = interface.factory(parent_object_=self)
            obj_.build(child_)
            self.interface.append(obj_)
            obj_.original_tagname_ = 'interface'
# end class interfaces


class interface(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, repid=None, name=None, inheritsinterface=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.repid = _cast(None, repid)
        self.name = _cast(None, name)
        if inheritsinterface is None:
            self.inheritsinterface = []
        else:
            self.inheritsinterface = inheritsinterface
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, interface)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if interface.subclass:
            return interface.subclass(*args_, **kwargs_)
        else:
            return interface(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_inheritsinterface(self):
        return self.inheritsinterface
    def set_inheritsinterface(self, inheritsinterface):
        self.inheritsinterface = inheritsinterface
    def add_inheritsinterface(self, value):
        self.inheritsinterface.append(value)
    def add_inheritsinterface(self, value):
        self.inheritsinterface.append(value)
    def insert_inheritsinterface_at(self, index, value):
        self.inheritsinterface.insert(index, value)
    def replace_inheritsinterface_at(self, index, value):
        self.inheritsinterface[index] = value
    inheritsinterfaceProp = property(get_inheritsinterface, set_inheritsinterface)
    def get_repid(self):
        return self.repid
    def set_repid(self, repid):
        self.repid = repid
    repidProp = property(get_repid, set_repid)
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    nameProp = property(get_name, set_name)
    def hasContent_(self):
        if (
            self.inheritsinterface
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='interface', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('interface')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='interface')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='interface', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='interface'):
        if self.repid is not None and 'repid' not in already_processed:
            already_processed.add('repid')
            outfile.write(' repid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.repid), input_name='repid')), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='interface', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for inheritsinterface_ in self.inheritsinterface:
            inheritsinterface_.export(outfile, level, namespaceprefix_='t:', name_='inheritsinterface', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('repid', node)
        if value is not None and 'repid' not in already_processed:
            already_processed.add('repid')
            self.repid = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'inheritsinterface':
            obj_ = inheritsinterface.factory(parent_object_=self)
            obj_.build(child_)
            self.inheritsinterface.append(obj_)
            obj_.original_tagname_ = 'inheritsinterface'
# end class interface


class inheritsinterface(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, repid=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.repid = _cast(None, repid)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, inheritsinterface)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if inheritsinterface.subclass:
            return inheritsinterface.subclass(*args_, **kwargs_)
        else:
            return inheritsinterface(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_repid(self):
        return self.repid
    def set_repid(self, repid):
        self.repid = repid
    repidProp = property(get_repid, set_repid)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='inheritsinterface', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('inheritsinterface')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='inheritsinterface')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='inheritsinterface', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='inheritsinterface'):
        if self.repid is not None and 'repid' not in already_processed:
            already_processed.add('repid')
            outfile.write(' repid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.repid), input_name='repid')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='inheritsinterface', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('repid', node)
        if value is not None and 'repid' not in already_processed:
            already_processed.add('repid')
            self.repid = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class inheritsinterface


class propertyfile(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, localfile=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.type_ = _cast(None, type_)
        self.localfile = localfile
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, propertyfile)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if propertyfile.subclass:
            return propertyfile.subclass(*args_, **kwargs_)
        else:
            return propertyfile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_localfile(self):
        return self.localfile
    def set_localfile(self, localfile):
        self.localfile = localfile
    localfileProp = property(get_localfile, set_localfile)
    def get_type(self):
        return self.type_
    def set_type(self, type_):
        self.type_ = type_
    typeProp = property(get_type, set_type)
    def hasContent_(self):
        if (
            self.localfile is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='propertyfile', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('propertyfile')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='propertyfile')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='propertyfile', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='propertyfile'):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.type_), input_name='type')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='propertyfile', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.localfile is not None:
            self.localfile.export(outfile, level, namespaceprefix_='t:', namespacedef_, name_='localfile', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'localfile':
            obj_ = localfile.factory(parent_object_=self)
            obj_.build(child_)
            self.localfile = obj_
            obj_.original_tagname_ = 'localfile'
# end class propertyfile


class localfile(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.name = _cast(None, name)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, localfile)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if localfile.subclass:
            return localfile.subclass(*args_, **kwargs_)
        else:
            return localfile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    nameProp = property(get_name, set_name)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='localfile', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('localfile')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='localfile')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='localfile', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='t:', name_='localfile'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='t:', namespacedef_='xmlns:t="http://www.w3.org/namespace/"', name_='localfile', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class localfile


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'softwarecomponent'
        rootClass = softwarecomponent
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     if not silence:
##         sys.stdout.write('<?xml version="1.0" ?>\n')
##         rootObj.export(
##             sys.stdout, 0, name_=rootTag,
##             namespacedef_='xmlns:t="http://www.w3.org/namespace/"',
##             pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'softwarecomponent'
        rootClass = softwarecomponent
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
##     if not silence:
##         content = etree_.tostring(
##             rootElement, pretty_print=True,
##             xml_declaration=True, encoding="utf-8")
##         sys.stdout.write(content)
##         sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'softwarecomponent'
        rootClass = softwarecomponent
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
##     if not silence:
##         sys.stdout.write('<?xml version="1.0" ?>\n')
##         rootObj.export(
##             sys.stdout, 0, name_=rootTag,
##             namespacedef_='xmlns:t="http://www.w3.org/namespace/"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'softwarecomponent'
        rootClass = softwarecomponent
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     if not silence:
##         sys.stdout.write('#from scd import *\n\n')
##         sys.stdout.write('import scd as model_\n\n')
##         sys.stdout.write('rootObj = model_.rootClass(\n')
##         rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
##         sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "componentfeatures",
    "componentrepid",
    "componenttype",
    "inheritsinterface",
    "interface",
    "interfaces",
    "localfile",
    "ports",
    "porttype",
    "propertyfile",
    "provides",
    "softwarecomponent",
    "supportsinterface",
    "uses"
]
