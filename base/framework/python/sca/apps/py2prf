#!/usr/bin/python
#
# This file is protected by Copyright. Please refer to the COPYRIGHT file 
# distributed with this source distribution.
# 
# This file is part of SCA-JTNC core.
# 
# SCA-JTNC core is free software: you can redistribute it and/or modify it under 
# the terms of the GNU Lesser General Public License as published by the Free 
# Software Foundation, either version 3 of the License, or (at your option) any 
# later version.
# 
# SCA-JTNC core is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
# 
# You should have received a copy of the GNU Lesser General Public License 
# along with this program.  If not, see http://www.gnu.org/licenses/.
#

import sys
import os
import imp
import inspect
import __builtin__

import sca.resource
import sca.properties

###############################################################################
# Common methods
def properties_to_xml(properties, outfile):
    outfile.write('<?xml version="1.0" encoding="UTF-8"?>\n')
    outfile.write('<!DOCTYPE properties PUBLIC "-//JTRS//DTD SCA V2.2.2 PRF//EN" "properties.dtd">\n')
    outfile.write("<properties>\n")
    for prop in properties:
	outfile.write(prop.toXML(1))
	outfile.write("\n")
    outfile.write("</properties>\n")

###############################################################################
# Introspection based methods
def _import(filepath):
    searchPath, moduleName = os.path.split(filepath)
    module = None
    return module

def py2prf_using_introspection(filepath, classname=None):
    # Normalize the filepath
    filepath = os.path.normpath(os.path.abspath(filepath))
    basedir = os.path.split(filepath)[0]
    name = os.path.splitext(os.path.split(filepath)[1])[0]

    module = imp.load_source(name, filepath)
    if module == None:
	raise ValueError, "could not load " + filepath

    classestoexamine = {}
    for name, attr in module.__dict__.items():
	if inspect.isclass(attr) and issubclass(attr, sca.resource.Resource) and (attr != sca.resource.Resource and attr != sca.component.Component):
	    classestoexamine[name] = attr

    clazz = None
    if len(classestoexamine.values()) == 0 and classname == None:
	raise StandardError, "File doesn't contain any classes of type Resource"
    elif len(classestoexamine.values()) > 1 and classname == None:
	raise StandardError, "File contains more than one class of type Resource; use the --class argument"
    elif len(classestoexamine) == 1:
	clazz = classestoexamine.values()[0]
    else:
	clazz = module.__dict__[classname]

    properties = []
    for name in dir(clazz):
	class_attr = getattr(clazz, name)
	if isinstance(class_attr, sca.properties._property):
	    properties.append(class_attr)
    return properties

###############################################################################
# Parser based methods
try:
    import ast
except ImportError:
    PARSING_SUPPORTED = False
    def py2prf_using_parsing(filepath, classname=None):
	raise NotImplementedError, "parsing requires the ast module (found in Python 2.6+)"
else:
    PARSING_SUPPORTED = True
    def py2prf_using_parsing(filepath, classname=None):
	classestoexamine = {}
	xx = ast.parse(open(filepath).read(), filepath)

	class Visit(ast.NodeVisitor):
	    def visit_ClassDef(self, node):
		classestoexamine[node.name] = node
	Visit().visit(xx)

	clazz = None
	if len(classestoexamine.values()) == 0:
	    raise StandardError, "File doesn't contain any classes of type Resource"
	elif len(classestoexamine.values()) > 1 and classname == None:
	    raise StandardError, "File contains more than one class of type Resource; use the --class argument"
	elif len(classestoexamine) == 1:
	    clazz = classestoexamine.values()[0]
	else:
	    clazz = classestoexamine[classname]

	# In the parser-based approach we have to descend the inheritence tree ourselves
	# For now, let's only support generating properties from the top-most-class
	# Since that is the typical CONOP
#	for base in clazz:
#	    try:
#		name = None
#		if type(base) is ast.Name:
#		    name = base.id
#		elif type(base) is ast.Attribute:
#		    name = base.attr

	properties = []
        for b in clazz.body:
	    if type(b) is ast.Assign:
		if type(b.value) is ast.Call:
		    if b.value.func.id in ("simple_property", "simpleseq_property"):
			for x in b.value.args:
			    print x, dir(x)
			args = [x.s for x in b.value.args]

			kwargs = {}
			for kw in b.value.keywords:
			    if type(kw.value) is ast.Str:
				kwargs[kw.arg] = kw.value.s
			    elif type(kw.value) is ast.Num:
				kwargs[kw.arg] = kw.value.n
			    elif type(kw.value) is ast.Tuple:
				elements = [x.s for x in kw.value.elts]
				kwargs[kw.arg] = tuple(elements)
			prop_clazz = getattr(sca.properties, b.value.func.id)
			prop = prop_clazz(*args, **kwargs)
			properties.append(prop)
	return properties

###############################################################################
# Main
__USAGE = """
usage: %prog [options] FILE

Analyze the provided FILE, which must contain at most one sca.Resource
class, and convert all defined SCA properties into an SCA domain
profile PRF file.
"""
if __name__ == "__main__":

    from optparse import OptionParser
    parser = OptionParser(__USAGE)
    parser.add_option("-p", "--parsing", dest="parsing",
                      action="store_true",
		      help="use parsing to analyze the file instead of introspection (require python 2.6+)",
		      default=False)
    parser.add_option("-o", "--outfile", dest="outfile",
		      help="the output file to use, stdout is the default",
		      default="-")
    parser.add_option("-c", "--class", dest="classname",
		      help="explictly provide the class to be analyzed",
		      default=None)

    options, args = parser.parse_args()
    if options.parsing and not PARSING_SUPPORTED:
	parser.error("the parsing method is not supported by your python installation (version 2.6+ is required)")

    if len(args) != 1:
	parser.error("one and only one file must be provided")

    if not os.path.isfile(args[0]):
	parser.error("input is not a file")

    if options.outfile == "-":
	outfile = sys.stdout
    else:
	outfile = open(options.outfile, "w+")

    if not options.parsing:
	properties = py2prf_using_introspection(args[0], options.classname)
    else:
	properties = py2prf_using_parsing(args[0], options.classname)

    properties_to_xml(properties, outfile)
