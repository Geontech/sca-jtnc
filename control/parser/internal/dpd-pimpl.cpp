/*
 * This file is protected by Copyright. Please refer to the COPYRIGHT file
 * distributed with this source distribution.
 *
 * This file is part of REDHAWK core.
 *
 * REDHAWK core is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 *
 * REDHAWK core is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 */
// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#include "dpd-pimpl.h"

namespace dpd
{
  // devicepkg_pimpl
  //

  void devicepkg_pimpl::
  pre ()
  {
  }

  void devicepkg_pimpl::
  title (const ::std::string& title)
  {
    // TODO
    //
  }

  void devicepkg_pimpl::
  author ()
  {
  }

  void devicepkg_pimpl::
  description (const ::std::string& description)
  {
    // TODO
    //
  }

  void devicepkg_pimpl::
  hwdeviceregistration ()
  {
  }

  void devicepkg_pimpl::
  id (const ::std::string& id)
  {
    // TODO
    //
  }

  void devicepkg_pimpl::
  name (const ::std::string& name)
  {
    // TODO
    //
  }

  void devicepkg_pimpl::
  version (const ::std::string& version)
  {
    // TODO
    //
  }

  void devicepkg_pimpl::
  post_devicepkg ()
  {
  }

  // author_pimpl
  //

  void author_pimpl::
  pre ()
  {
  }

  void author_pimpl::
  name (const ::std::string& name)
  {
    // TODO
    //
  }

  void author_pimpl::
  company (const ::std::string& company)
  {
    // TODO
    //
  }

  void author_pimpl::
  webpage (const ::std::string& webpage)
  {
    // TODO
    //
  }

  void author_pimpl::
  post_author ()
  {
  }

  // hwdeviceregistration_pimpl
  //

  void hwdeviceregistration_pimpl::
  pre ()
  {
  }

  void hwdeviceregistration_pimpl::
  propertyfile ()
  {
  }

  void hwdeviceregistration_pimpl::
  description (const ::std::string& description)
  {
    // TODO
    //
  }

  void hwdeviceregistration_pimpl::
  manufacturer (const ::std::string& manufacturer)
  {
    // TODO
    //
  }

  void hwdeviceregistration_pimpl::
  modelnumber (const ::std::string& modelnumber)
  {
    // TODO
    //
  }

  void hwdeviceregistration_pimpl::
  deviceclass ()
  {
  }

  void hwdeviceregistration_pimpl::
  childhwdevice ()
  {
  }

  void hwdeviceregistration_pimpl::
  id (const ::std::string& id)
  {
    // TODO
    //
  }

  void hwdeviceregistration_pimpl::
  name (const ::std::string& name)
  {
    // TODO
    //
  }

  void hwdeviceregistration_pimpl::
  version (const ::std::string& version)
  {
    // TODO
    //
  }

  void hwdeviceregistration_pimpl::
  post_hwdeviceregistration ()
  {
  }

  // propertyfile_pimpl
  //

  void propertyfile_pimpl::
  pre ()
  {
  }

  void propertyfile_pimpl::
  localfile ()
  {
  }

  void propertyfile_pimpl::
  type (const ::std::string& type)
  {
    // TODO
    //
  }

  void propertyfile_pimpl::
  post_propertyfile ()
  {
  }

  // localfile_pimpl
  //

  void localfile_pimpl::
  pre ()
  {
  }

  void localfile_pimpl::
  name (const ::std::string& name)
  {
    // TODO
    //
  }

  void localfile_pimpl::
  post_localfile ()
  {
  }

  // deviceclass_pimpl
  //

  void deviceclass_pimpl::
  pre ()
  {
  }

  void deviceclass_pimpl::
  class_ (const ::std::string& class_)
  {
    // TODO
    //
  }

  void deviceclass_pimpl::
  post_deviceclass ()
  {
  }

  // childhwdevice_pimpl
  //

  void childhwdevice_pimpl::
  pre ()
  {
  }

  void childhwdevice_pimpl::
  hwdeviceregistration ()
  {
  }

  void childhwdevice_pimpl::
  devicepkgref ()
  {
  }

  void childhwdevice_pimpl::
  post_childhwdevice ()
  {
  }

  // devicepkgref_pimpl
  //

  void devicepkgref_pimpl::
  pre ()
  {
  }

  void devicepkgref_pimpl::
  localfile ()
  {
  }

  void devicepkgref_pimpl::
  type (const ::std::string& type)
  {
    // TODO
    //
  }

  void devicepkgref_pimpl::
  post_devicepkgref ()
  {
  }
}

