/*
 * This file is protected by Copyright. Please refer to the COPYRIGHT file
 * distributed with this source distribution.
 *
 * This file is part of REDHAWK core.
 *
 * REDHAWK core is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 *
 * REDHAWK core is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 */
#ifndef _RH_DOMAIN_CONTEXT_H_
#define _RH_DOMAIN_CONTEXT_H_

#include <stdexcept>
#include <string>
#include <omniORB4/CORBA.h>
#include <ossie/CorbaUtils.h>
#include <boost/thread/shared_mutex.hpp>


class ObjectBinding;

/**
  RH_NamingContext

  Simplied version of the omniNames NamingContext implementation to reduce possible collisions within
  the NamingService. This class only supports a simple CosNaming::Name object that contains a single entry and not a 
  hierachical path. The NamingContext objects created can be used in the same manner as the
  NamingService's NamingContext objects.

  NamingContext objects from this class will be generated by the GetNamingContext method when useNS == false otherwise it
  will return a NamingContext from the NamingService to use.

 */

class RH_NamingContext : public virtual POA_CosNaming::NamingContextExt
{

  friend class ObjectBinding;

public:

  /**
     Return a NamingContext object for use by the ApplicationFactory and Application Objects during
     waveform deployments. 
     
     @param  string domain : the name of the domain to lookup in the NamingService
     @param  bool   useNS  : use the NamingService to provide the context or this class.
   */
  static CosNaming::NamingContext_ptr GetNamingContext( const std::string &domain, const bool useNS=true );

  RH_NamingContext( PortableServer::POA_ptr poa );

  virtual ~RH_NamingContext();

  void bind(const CosNaming::Name &n, CORBA::Object_ptr obj) {
    bind_helper( n, obj, CosNaming::nobject, 0);
  }

  void unbind(const CosNaming::Name &n);

  void rebind(const CosNaming::Name &n, CORBA::Object_ptr obj) {
    bind_helper( n, obj, CosNaming::nobject, 1 );
  }
    
  void bind_context(const CosNaming::Name &n, CosNaming::NamingContext_ptr nc) {
    bind_helper(n, nc, CosNaming::ncontext, 0);
  }

  void rebind_context(const CosNaming::Name &n, CosNaming::NamingContext_ptr nc) {
    bind_helper(n, nc, CosNaming::ncontext, 0);
  }

  CosNaming::NamingContext_ptr new_context();
  CosNaming::NamingContext_ptr bind_new_context(const CosNaming::Name &Name);
  void destroy();

  CORBA::Object_ptr resolve(const CosNaming::Name &Name);

  void list(CORBA::ULong length, CosNaming::BindingList_out out, 
            CosNaming::BindingIterator_out iterator);

  //
  // CosNaming::NamingContextExt operations
  //

  char*             to_string  (const CosNaming::Name& n);
  CosNaming::Name*  to_name    (const char*            sn);
  char*             to_url     (const char*            addr, const char* sn);
  CORBA::Object_ptr resolve_str(const char*            n);
    
private:
    
    boost::shared_mutex       _access;
    ObjectBinding             *headBinding;
    ObjectBinding             *tailBinding;
    PortableServer::POA_ptr    nc_poa;
    unsigned long              size;

     void bind_helper(const CosNaming::Name &n, CORBA::Object_ptr obj,
                      CosNaming::BindingType t, CORBA::Boolean rebind);

    ObjectBinding* resolve_simple(const CosNaming::Name& name);

};

#endif
