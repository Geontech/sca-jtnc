/*
 * This file is protected by Copyright. Please refer to the COPYRIGHT file 
 * distributed with this source distribution.
 * 
 * This file is part of SCA-JTNC core.
 * 
 * SCA-JTNC core is free software: you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by the 
 * Free Software Foundation, either version 3 of the License, or (at your 
 * option) any later version.
 * 
 * SCA-JTNC core is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License 
 * for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License 
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 */

#ifndef _BULKIO_STATS_IDL_
#define _BULKIO_STATS_IDL_

#include "sca/CF/CFProperties.idl"
#include "sca/CF/CFCommonTypes.idl"
#include "sca/CF/QueryablePort.idl"
#include "sca/CF/AdditionalTypes.idl"
#include "sca/BULKIO/bulkioDataTypes.idl"

module BULKIO {

    enum PortUsageType {
        IDLE,
        ACTIVE,
        BUSY
    };

    struct PortStatistics {
        string portName;

        // The rate of CORBA elements transferred
        // in the pushPacket data.  It is recommended
        // that this be calculated over TBD pushPacket
        // calls using an EMA.
        float elementsPerSecond;

        // The rate of bits transferred.
        //  - In the case of CORBA pushPacket calls   bit rate of transfer
        //  - In the case of dataXML             - size of XML data (not schema) in that second
        //  - In the case of dataFile            - size of file (or part of file) transferred in that second
        float bitsPerSecond;

        // Number of calls per second (push or send)
        float callsPerSecond;

        // List of all active streamIDs (that have not been ended)
        CF::StringSequence streamIDs;

        // For components that queue data before processing/sending,
        // the averageQueueDepth, measured as a percentage.
        // It is recommended that this be calculated over TBD pushPacket
        // calls using an EMA.
        //
        // If a port does not queue data, this value shall be set to 0
        float averageQueueDepth;

        // The elapsed time, in seconds, since the last packet was
        // transfered via a pushPacket call
        float timeSinceLastCall;

        // Additional statistics information provided by the port
        sequence<CF::DataType> keywords;
    };

    interface ProvidesPortStatisticsProvider {
        // true if the port cannot accept another pushPacket call without blocking
        readonly attribute PortUsageType state;
        // Advanced statistics about the port
        readonly attribute PortStatistics statistics;
    };

    struct UsesPortStatistics {
        string connectionId;
        PortStatistics statistics;
    };

    typedef sequence<UsesPortStatistics> UsesPortStatisticsSequence;

    interface UsesPortStatisticsProvider : ExtendedCF::QueryablePort {
        readonly attribute UsesPortStatisticsSequence statistics;
    };
};

#endif
